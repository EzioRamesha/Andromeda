@model WebApp.Models.RetroTreatyDetailViewModel

@{
    ViewBag.Title = "Retro Treaty Detail";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    ViewBag.PrevTitle = "Retro Treaty";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", new { id = Model.RetroTreatyId });
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body" id="app">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.RetroTreatyId)
            @Html.HiddenFor(model => model.PerLifeRetroConfigurationTreatyId)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.TreatyCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TreatyCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TreatyType, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ReinsEffectiveStartDateStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ReinsEffectiveStartDateStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ReinsEffectiveEndDateStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ReinsEffectiveEndDateStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RiskQuarterStartDateStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RiskQuarterStartDateStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RiskQuarterEndDateStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RiskQuarterEndDateStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.IsToAggregate, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.IsToAggregate, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.FundsAccountingType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.FundsAccountingType, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", readOnly = true } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.MlreShareStr, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">%</div>
                            </div>
                            @Html.EditorFor(model => model.MlreShareStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @v_model = "RetroTreatyDetailModel.MlreShareStr" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.MlreShareStr, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Remark, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1" })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="mt-4">
                    @Html.Partial("_StandardRetroOutputInfo")
                </div>


                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.GrossRetroPremium, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.GrossRetroPremium, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @v_model = "RetroTreatyDetailModel.GrossRetroPremium" } })
                            <div class="input-group-prepend">
                                <button class="btn btn-generate" type="button" v-on:click="openSingleEval(RetroTreatyDetailModel.GrossRetroPremium)"><i class="fas fa-calculator"></i></button>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.GrossRetroPremium, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyDiscount, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.TreatyDiscount, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @v_model = "RetroTreatyDetailModel.TreatyDiscount" } })
                            <div class="input-group-prepend">
                                <button class="btn btn-generate" type="button" v-on:click="openSingleEval(RetroTreatyDetailModel.TreatyDiscount)"><i class="fas fa-calculator"></i></button>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.TreatyDiscount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.NetRetroPremium, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            @Html.EditorFor(model => model.NetRetroPremium, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @v_model = "RetroTreatyDetailModel.NetRetroPremium" } })
                            <div class="input-group-prepend">
                                <button class="btn btn-generate" type="button" v-on:click="openSingleEval(RetroTreatyDetailModel.NetRetroPremium)"><i class="fas fa-calculator"></i></button>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.NetRetroPremium, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PremiumSpreadTableId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.PremiumSpreadTableId, (List<SelectListItem>)ViewBag.DropDownPremiumSpreadTables, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "RetroTreatyDetailModel.PremiumSpreadTableId" })
                        @Html.ValidationMessageFor(model => model.PremiumSpreadTableId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyDiscountTableId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.TreatyDiscountTableId, (List<SelectListItem>)ViewBag.DropDownTreatyDiscountTables, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "RetroTreatyDetailModel.TreatyDiscountTableId" })
                        @Html.ValidationMessageFor(model => model.TreatyDiscountTableId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Edit", new { id = Model.RetroTreatyId }, new { @class = "btn btn-cancel" })
                        @Html.ActionLink("DELETE", "DeleteRetroTreatyDetail", new { id = Model.Id, retroTreatyId = Model.RetroTreatyId }, new { @class = "btn btn-del" })
                        <button type="submit" class="btn btn-submit float-right">SAVE</button>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="evaluationResultModal" tabindex="-1" role="dialog" aria-labelledby="evaluationResultModal" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Formula Evaluation</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p class="text-success" v-if="CurrentEvalSuccess">{{ CurrentEvalMsg[0] }}</p>
                            <ul v-if="!CurrentEvalSuccess">
                                <li v-for="(evaluation, index) in CurrentEvalMsg" class="text-danger">{{ evaluation }}</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="evaluationModal" tabindex="-1" role="dialog" aria-labelledby="evaluationModal" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Formula Evaluation</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div style="max-height: 500px; overflow: auto;">
                                <span class="font-weight-bold"><label class="col-form-label" for="Values">Values</label></span>
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="w-30">Label</th>
                                            <th class="w-30">Type</th>
                                            <th class="w-40">Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr v-if="!CurrentEvalSingle.StandardRetroOutputBos || !CurrentEvalSingle.StandardRetroOutputBos.length">
                                            <td colspan="3" class="no-data">No available data found.</td>
                                        </tr>
                                        <tr v-for="(standardOutputBo, index) in CurrentEvalSingle.StandardRetroOutputBos">
                                            <td>{{ standardOutputBo.Code }}</td>
                                            <td>{{ standardOutputBo.DataTypeName }}</td>
                                            <td>
                                                <div class="input-w-icon" v-on:click="openDatePicker(index)">
                                                    <input v-model.lazy="standardOutputBo.DummyValue" :id="standardOutputBo.Code + '_' + index" class="form-control" :disabled="standardOutputBo.DisableDummyValue" :placeholder="getPlaceHolder(standardOutputBo.DataType)" autocomplete="off" />
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" v-if="standardOutputBo.DataType == DataTypeDate" />
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                                <div v-if="CurrentEvalSingle.ShowResult" class="mt-4">
                                    <span class="font-weight-bold"><label class="col-form-label" for="Result">Result</label></span>
                                    <table class="table table-hover">
                                        <tbody>
                                            <tr v-for="(result, index) in CurrentEvalSingle.Result" v-if="CurrentEvalSingle.Success">
                                                <td class="w-20">{{ result.title }}</td>
                                                <td class="w-80">{{ result.value }}</td>
                                            </tr>
                                            <tr v-for="error in CurrentEvalSingle.Errors" v-if="!CurrentEvalSingle.Success">
                                                <td class="w-100 text-danger">{{ error }}</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="text-right mt-2">
                                <button type="button" class="btn btn-submit" v-on:click="evalSingle()">Evaluate</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var RetroTreatyDetailModel = @Html.Raw(Json.Encode(Model));

        // Lists
        var StandardRetroOutputList = @Html.Raw(Json.Encode(ViewBag.StandardRetroOutputs));
        var OtherOutputList = @Html.Raw(Json.Encode(ViewBag.OtherOutputs));

        // Url
        var EvaluateFormulasUrl = "@(Url.Action("EvaluateFormulasJson"))";
        var GetEvaluateVariableUrl = "@(Url.Action("GetEvaluateVariables"))";
        var EvaluateSingleUrl = "@(Url.Action("GetEvaluateResult"))";

        var DataTypeDate = "@BusinessObject.StandardOutputBo.DataTypeDate";
    </script>
    @Scripts.Render("~/Scripts/models/RetroTreatyDetail.js")
}
