@using Shared.Forms.Helpers
@model WebApp.Models.TreatyPricingTreatyWorkflowViewModel

@{
    ViewBag.Title = "Treaty Workflow";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

@Html.Partial("_LoadingSpinner")

<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingTreatyWorkflowBo.GetDocumentStatusClass(Model.DocumentStatus)">
                    @BusinessObject.TreatyPricing.TreatyPricingTreatyWorkflowBo.GetDocumentStatusName(Model.DocumentStatus)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">

        @Html.Partial("_ObjectLockEditButton")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.EditableVersion)
            @Html.HiddenFor(model => model.Reviewer)
            @Html.HiddenFor(model => model.CurrentVersionObjectId)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.DocumentType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.DocumentType, (List<SelectListItem>)ViewBag.TreatyWorkflowDocumentTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.DocumentType, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.ReinsuranceTypePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ReinsuranceTypePickListDetailId, (List<SelectListItem>)ViewBag.DropDownReinsuranceTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.ReinsuranceTypePickListDetailId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.CounterPartyDetailId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CounterPartyDetailId, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.CounterPartyDetailId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.InwardRetroPartyDetailId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.InwardRetroPartyDetailId, (List<SelectListItem>)ViewBag.DropDownRetroParties, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.InwardRetroPartyDetailId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.BusinessOriginPickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.BusinessOriginPickListDetailId, (List<SelectListItem>)ViewBag.DropDownBusinessOrigins, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.HiddenFor(model => model.BusinessOriginPickListDetailId)
                        @Html.ValidationMessageFor(model => model.BusinessOriginPickListDetailId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TypeOfBusiness, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TypeOfBusiness, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.TypeOfBusiness, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.DocumentId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.DocumentId, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TreatyCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.TreatyCode, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.DocumentStatus, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.DocumentStatus, (List<SelectListItem>)ViewBag.DocumentStatuss, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "orionGroupEmpty()" })
                        @Html.ValidationMessageFor(model => model.DocumentStatus, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.DraftingStatus, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.DraftingStatusName, new { htmlAttributes = new { @class = "form-control", @readonly = "true", id = "draftingStatus" } })
                        @Html.ValidationMessageFor(model => model.DraftingStatusName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.EffectiveAt, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.EffectiveAtStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('EffectiveAtStr')" }, { @"v-model.lazy", @"TreatyWorkflow.EffectiveAtStr" }, { @"onchange", @"calculateOrionGroup()" } })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('EffectiveAtStr')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.EffectiveAtStr, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.DraftingStatusCategory, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.DraftingStatusCategoryName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.DraftingStatusCategoryName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.OrionGroupStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.OrionGroupStr, new { htmlAttributes = new { @class = "form-control", @readonly = "true", id = "orionGroupStr" } })
                        @Html.ValidationMessageFor(model => model.OrionGroupStr, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.CoverageStatus, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CoverageStatus, (List<SelectListItem>)ViewBag.CoverageStatuss, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.CoverageStatus, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Version", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.CurrentVersion, (List<SelectListItem>)ViewBag.DropDownVersions, htmlAttributes: new { @class = "form-control selectpicker" })
                            <div class="input-group-prepend">
                                <button type="button" class="input-group-text" data-toggle="modal" v-on:click="" data-target="#newVersionModal">CREATE NEW VERSION</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.SharepointLink, htmlAttributes: new { @class = "col-form-label" })
                        @*@Html.EditorFor(model => model.SharepointLink, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })*@
                        <div class="input-group">
                            @Html.EditorFor(model => model.SharepointLink, new { htmlAttributes = new { @class = "form-control" } })
                            <div class="input-group-prepend">
                                <button type="button" class="input-group-text" v-on:click="browseSharepoint()">BROWSE</button>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.SharepointLink, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.CountryOrigin, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.CountryOrigin, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.CountryOrigin, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            @Html.Partial("_Details")

            <div class="form-row form-row-btn">
                <div class="form-group col-md-12 btn-row">
                    @Html.ActionLink("CANCEL", "Index", "TreatyPricingTreatyWorkflow", null, new { @class = "btn btn-cancel" })
                    @if (ViewBag.IsEditMode ?? false)
                    {
                        <button type="submit" class="btn btn-submit float-right">SAVE</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="newVersionModal" tabindex="-1" role="dialog" aria-labelledby="newVersionModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Version</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form">
                    <div class="form-group">
                        <label class="col-form-label" for="userName">Person In-Charge</label>
                        <input type="text" readonly class="form-control" id="userName" value="@ViewBag.PersonInChargeName">
                    </div>

                    <div class="form-group">
                        <label class="col-form-label" for="duplicatePreviousVersion">Duplicate Previous Version</label>
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch pl-2">
                                <input class="custom-control-input" id="duplicatePreviousVersion" name="duplicatePreviousVersion" type="checkbox" />
                                <label class="custom-control-label" for="duplicatePreviousVersion">Yes</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                <button type="button" onclick="createVersion()" class="btn btn-submit" data-dismiss="modal">CREATE</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/textarea-autoresize.js")
    @Scripts.Render("~/bundles/jqueryval")
<script>
        // Model
        var Model = @Html.Raw(Json.Encode(Model));

        var TreatyPricingTreatyWorkflows = @Html.Raw(Json.Encode(ViewBag.TreatyPricingTreatyWorkflows));
        var TreatyPricingWorkflowObjectBos = @Html.Raw(Json.Encode(Model.TreatyPricingWorkflowObjectBos));

        // Url
        var CreateVersionUrl = "@(Url.Action("CreateVersion", "TreatyPricingTreatyWorkflow"))";
        var CreateStatusHistoryUrl = "@Url.Action("UpdateStatus", "TreatyPricingTreatyWorkflow")";
        var GetOrionGroupUrl = "@Url.Action("OrionGroup", "TreatyPricingTreatyWorkflow")";
        var UpdateLatestRevisionDateUrl = "@Url.Action("UpdateLatestRevisionDate", "TreatyPricingTreatyWorkflow")";

        // Others
        var AuthUserId = "@ViewBag.PersonInChargeId";
        var AuthUserName = "@ViewBag.PersonInChargeName";
        var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingTreatyWorkflow.ToString()';
        var RecipientEmails = @Html.Raw(Json.Encode(ViewBag.RecipientEmails));
        var DraftingStatuses = @Html.Raw(Json.Encode(ViewBag.DraftingStatuss));
        var DocumentType = @BusinessObject.TreatyPricing.TreatyPricingWorkflowObjectBo.TypeTreaty;
        var BaseUrl = "@ViewBag.BaseUrl";
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingTreatyWorkflow.ToString()';
        var TargetSentDateDisableDates = @Html.Raw(Json.Encode(ViewBag.TargetSentDateDisableDates));

        var loadingDiv = $("#loadingSpinner");

        //Remarks
        var Remarks = @Html.Raw(Json.Encode(ViewBag.RemarkBos));
        var RemarkSubjects = @Html.Raw(Json.Encode(ViewBag.RemarkSubjects));

        // Status History
        var StatusHistories = @Html.Raw(Json.Encode(ViewBag.StatusHistoryBos));

        var DropDownObjectModules = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingObjectModules));

        $(document).ready(function () {
            var version = $('#CurrentVersion').val();
            getVersionDetails(version);
        });

</script>
    @Scripts.Render("~/Scripts/models/TreatyPricingTreatyWorkflow.js")
    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
