@model WebApp.Models.TreatyPricingGroupReferralViewModel
@using Shared.Forms.Helpers

@{
    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
}

<div class="form-row mt-4">
    <div class="form-group col-md 12">
        <ul class="nav nav-tabs">
            <li class="nav-item"><a data-toggle="tab" href="#general" class="active underline-tab">General</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#version">Version</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#uploadedTable">Uploaded Table</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#statusHistory">Status History</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#checklist">Checklist</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#remarks">Remarks</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#changelog">Changelog</a></li>
        </ul>

        <div class="tab-content underline-tab-content">
            <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">

                <div class="form-horizontal">
                    <div class="form-row">
                        <div class="form-group col-md-12">
                            <span class="font-weight-bold">@Html.LabelForRequired(model => model.HasRiGroupSlip, htmlAttributes: new { @class = "col-form-label" })</span>
                            <div class="row m-0 p-0">
                                <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                                <div class="custom-control custom-switch pl-2">
                                    @Html.CheckBoxFor(model => model.HasRiGroupSlip, new Dictionary<string, object>() { { "class", "custom-control-input" }, { "id", "hasRiGroupSlip" }, { @"v-on:change", "riGroupSlipChange()" } })
                                    <label class="custom-control-label" for="hasRiGroupSlip">Yes</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelForRequired(model => model.WonVersion, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.WonVersion, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", id = "riGroupSlipWonVersion" })
                            @*@Html.TextBoxFor(model => model.WonVersion, new { @class = "form-control", placeholder = "Type here", id = "riGroupSlipWonVersion" })*@
                            @Html.ValidationMessageFor(model => model.WonVersion, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">
                            @Html.LabelForRequired(model => model.RiGroupSlipIdCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.RiGroupSlipIdCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.RiGroupSlipIdCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelForRequired(model => model.RiGroupSlipPersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.RiGroupSlipPersonInChargeId, (List<SelectListItem>)ViewBag.UsersRiGroupSlip, htmlAttributes: new { @class = "form-control selectpicker", id = "riGroupSlipPersonInChargeId" })
                            @Html.ValidationMessageFor(model => model.RiGroupSlipPersonInChargeId, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">
                            @Html.LabelForRequired(model => model.RiGroupSlipStatus, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.RiGroupSlipStatus, (List<SelectListItem>)ViewBag.DropDownRiGroupSlipStatus, htmlAttributes: new { @class = "form-control selectpicker", id = "riGroupSlipStatus" })
                            @Html.ValidationMessageFor(model => model.RiGroupSlipStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelForRequired(model => model.RiGroupSlipConfirmationDate, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-w-icon">
                                @Html.TextBoxFor(model => model.RiGroupSlipConfirmationDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('RiGroupSlipConfirmationDateStr')" }, { @"v-model.lazy", @"Model.RiGroupSlipConfirmationDateStr" } })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('RiGroupSlipConfirmationDateStr')" />
                            </div>
                            @Html.ValidationMessageFor(model => model.RiGroupSlipConfirmationDateStr, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                    </div>
                    <div class="form-row mt-4">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelForRequired(model => model.RiGroupSlipVersionId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.RiGroupSlipVersionId, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", id = "riGroupSlipVersionId" })
                            @Html.ValidationMessageFor(model => model.RiGroupSlipVersionId, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">
                            @Html.LabelForRequired(model => model.RiGroupSlipTemplateId, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                @Html.DropDownListFor(model => model.RiGroupSlipTemplateId, (List<SelectListItem>)ViewBag.RiGroupSlipTemplates, htmlAttributes: new { @class = "form-control selectpicker", id = "riGroupSlipTemplateId", @v_model = "Model.RiGroupSlipTemplateId" })
                                <div class="input-group-append">
                                    <input id="riGroupSlipGenerateSharePointLink" type="button" class="btn btn-generate" v-on:click="generateSharePointFile('RiGroupSlip')" value="GENERATE SHAREPOINT LINK" />
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.RiGroupSlipTemplateId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelForRequired(model => model.RiGroupSlipSharePointLink, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.RiGroupSlipSharePointLink, new { @class = "form-control", placeholder = "Type here", id = "riGroupSlipSharePointLink" })
                                <div class="input-group-append">
                                    <input id="riGroupSlipEditSharePointLink" type="button" class="btn btn-generate" v-on:click="editSharePointFile('RiGroupSlip')" value="EDIT" />
                                </div>
                            </div>
                            @*@Html.HiddenFor(model => model.RiGroupSlipSharePointFolderPath)*@
                            @Html.ValidationMessageFor(model => model.RiGroupSlipSharePointLink, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">
                            @Html.LabelForRequired(model => model.RiGroupSlipSharePointFolderPath, htmlAttributes: new { @class = "col-form-label" })
                            @Html.TextBoxFor(model => model.RiGroupSlipSharePointFolderPath, new { @class = "form-control", placeholder = "Type here" })
                            @Html.ValidationMessageFor(model => model.RiGroupSlipSharePointFolderPath, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row mt-4">
                        <div class="form-group col-md-12" style="padding-bottom: 0;">
                            <span class="font-weight-bold">@Html.Label("Master Letter", htmlAttributes: new { @class = "col-form-label" })</span>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.GroupMasterLetterCode, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.GroupMasterLetterCode, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                                </div>
                                <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="version" role="tabpanel" aria-labelledby="version-tab">

                <div class="form-horizontal">
                    @Html.HiddenFor(model => Model.CurrentVersionObjectId)
                    @Html.HiddenFor(model => model.TreatyPricingGroupReferralVersionBenefit)
                    <div class="form-row">
                        <div class="form-group col-md-12" style="padding-bottom: 0;">
                            <span class="font-weight-bold">@Html.Label("Version Details", htmlAttributes: new { @class = "col-form-label" })</span>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "col-form-label" })
                                    <div class="input-group">
                                        @Html.DropDownListFor(model => model.CurrentVersion, (List<SelectListItem>)ViewBag.DropDownVersions, htmlAttributes: new { @class = "form-control selectpicker" })
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-generate" data-toggle="modal" v-on:click="" data-target="#newVersionModal">CREATE NEW VERSION</button>
                                        </div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2">
                                    @Html.LabelForRequired(model => model.GroupReferralPersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.GroupReferralPersonInChargeId, (List<SelectListItem>)ViewBag.UsersGR, htmlAttributes: new { @class = "form-control selectpicker" })
                                    @Html.ValidationMessageFor(model => model.GroupReferralPersonInChargeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row mt-4">
                        <div class="form-group col-md-12">

                            <ul class="nav nav-tabs">
                                <li class="nav-item"><a data-toggle="tab" href="#detail" class="active underline-tab">Product Detail</a></li>
                                <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#benefit">Benefit</a></li>
                            </ul>

                            <div class="tab-content underline-tab-content">
                                <div class="tab-pane fade show active" id="detail" role="tabpanel" aria-labelledby="detail-tab">

                                    <div class="form-horizontal">
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.QuotationTAT, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">Day(s)</div>
                                                    </div>
                                                    @Html.EditorFor(model => model.QuotationTAT, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here", @readonly = "true" } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.QuotationTAT, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.InternalTAT, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">Day(s)</div>
                                                    </div>
                                                    @Html.EditorFor(model => model.InternalTAT, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here", @readonly = "true" } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.InternalTAT, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.QuotationValidityDate, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-w-icon">
                                                    @Html.TextBoxFor(model => model.QuotationValidityDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { "readonly", "true" }, { @"v-model.lazy", @"Model.QuotationValidityDateStr" } })
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('QuotationValidityDateStr')" />
                                                </div>
                                                @Html.ValidationMessageFor(model => model.QuotationValidityDateStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.QuotationValidityDay, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">Day(s)</div>
                                                    </div>
                                                    @Html.EditorFor(model => model.QuotationValidityDay, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.QuotationValidityDay, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.FirstQuotationSentWeek, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.EditorFor(model => model.FirstQuotationSentWeek, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                                                @Html.ValidationMessageFor(model => model.FirstQuotationSentWeek, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.FirstQuotationSentMonth, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.DropDownListFor(model => model.FirstQuotationSentMonth, (List<SelectListItem>)ViewBag.DropDownMonths, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(model => model.FirstQuotationSentMonth, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.FirstQuotationSentQuarter, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.DropDownListFor(model => model.FirstQuotationSentQuarter, (List<SelectListItem>)ViewBag.DropDownQuarters, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                                                @Html.ValidationMessageFor(model => model.FirstQuotationSentQuarter, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.FirstQuotationSentYear, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.TextBoxFor(model => model.FirstQuotationSentYear, new { @class = "form-control", autocomplete = "off", @readonly = "true" })
                                                @Html.ValidationMessageFor(model => model.FirstQuotationSentYear, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row mt-4">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.CedantPersonInCharge, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.TextBoxFor(model => model.CedantPersonInCharge, new { @class = "form-control", placeholder = "Type here" })
                                                @Html.ValidationMessageFor(model => model.CedantPersonInCharge, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.RequestTypePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.DropDownListFor(model => model.RequestTypePickListDetailId, (List<SelectListItem>)ViewBag.DropDownRequests, htmlAttributes: new { @class = "form-control selectpicker" })
                                                @Html.ValidationMessageFor(model => model.RequestTypePickListDetailId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.PremiumTypePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.DropDownListFor(model => model.PremiumTypePickListDetailId, (List<SelectListItem>)ViewBag.DropDownPremiumTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                                                @Html.ValidationMessageFor(model => model.PremiumTypePickListDetailId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.AverageSumAssuredStr, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.AverageSumAssuredStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.AverageSumAssuredStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.GrossRiskPremium, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.GrossRiskPremiumStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.GrossRiskPremiumStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.ReinsurancePremium, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.ReinsurancePremiumStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ReinsurancePremiumStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.GrossRiskPremiumGTL, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.GrossRiskPremiumGTLStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.GrossRiskPremiumGTLStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.ReinsurancePremiumGTL, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.ReinsurancePremiumGTLStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ReinsurancePremiumGTLStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.GrossRiskPremiumGHS, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.GrossRiskPremiumGHSStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.GrossRiskPremiumGHSStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.ReinsurancePremiumGHS, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-group mb-2">
                                                    <div class="input-group-prepend">
                                                        <div class="input-group-text">MYR</div>
                                                    </div>
                                                    @Html.TextBoxFor(model => model.ReinsurancePremiumGHSStr, new { @class = "form-control text-right", placeholder = "0.00" })
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ReinsurancePremiumGHSStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.GroupSizeStr, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.EditorFor(model => model.GroupSizeStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                                @Html.ValidationMessageFor(model => model.GroupSizeStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.IsCompulsoryOrVoluntary, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.DropDownListFor(model => model.IsCompulsoryOrVoluntary, (List<SelectListItem>)ViewBag.DropDownCompulsoryVoluntary, htmlAttributes: new { @class = "form-control selectpicker" })
                                                @Html.ValidationMessageFor(model => model.IsCompulsoryOrVoluntary, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.UnderwritingMethod, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.EditorFor(model => model.UnderwritingMethod, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                                @Html.ValidationMessageFor(model => model.UnderwritingMethod, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.Remarks, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="form-row mt-4">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.RequestReceivedDate, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-w-icon">
                                                    @Html.TextBoxFor(model => model.RequestReceivedDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('RequestReceivedDateStr')" } })
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('RequestReceivedDateStr')" />
                                                </div>
                                                @Html.ValidationMessageFor(model => model.RequestReceivedDateStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.EnquiryToClientDate, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-w-icon">
                                                    @Html.TextBoxFor(model => model.EnquiryToClientDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('EnquiryToClientDateStr')" } })
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('EnquiryToClientDateStr')" />
                                                </div>
                                                @Html.ValidationMessageFor(model => model.EnquiryToClientDateStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.ClientReplyDate, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-w-icon">
                                                    @Html.TextBoxFor(model => model.ClientReplyDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('ClientReplyDateStr')" } })
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('ClientReplyDateStr')" />
                                                </div>
                                                @Html.ValidationMessageFor(model => model.ClientReplyDateStr, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.QuotationSentDate, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="input-w-icon">
                                                    @Html.TextBoxFor(model => model.QuotationSentDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('QuotationSentDateStr')" } })
                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('QuotationSentDateStr')" />
                                                </div>
                                                @Html.ValidationMessageFor(model => model.QuotationSentDateStr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="form-group col-md-6 mid-line-1">
                                                @Html.LabelForRequired(model => model.Score, htmlAttributes: new { @class = "col-form-label" })
                                                @Html.EditorFor(model => model.Score, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @readonly = "true" } })
                                                @Html.ValidationMessageFor(model => model.Score, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="form-group col-md-6 mid-line-2">
                                                @Html.LabelForRequired(model => model.HasPerLifeRetro, htmlAttributes: new { @class = "col-form-label" })
                                                <div class="row m-0 p-0">
                                                    <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                                                    <div class="custom-control custom-switch pl-2">
                                                        @Html.EditorFor(model => model.HasPerLifeRetro, new { htmlAttributes = new { @class = "custom-control-input" } })
                                                        <label class="custom-control-label" for="HasPerLifeRetro">Yes</label>
                                                    </div>
                                                </div>
                                                @Html.ValidationMessageFor(model => model.HasPerLifeRetro, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                </div>

                                <div class="tab-pane fade" id="benefit" role="tabpanel" aria-labelledby="benefit-tab">
                                    @*@Html.Partial("_BenefitTab")*@
                                    <div class="form-horizontal">
                                        <div class="form-row">
                                            <div class="form-group col-md-12">
                                                <div class="text-right">
                                                    <button type="button" v-on:click="resetBenefitModal()" data-toggle="modal" data-target="#benefitModal" class="btn btn-add-sub" @*:disabled="DisabledAdd"*@>ADD BENEFIT</button>
                                                </div>

                                                <div class="mt-4">

                                                    <ul class="list-group list-group-flush">

                                                        <li class="list-group-item px-0 accordion-item" v-for="(benefit, index) in Benefits">
                                                            <div class="row accordion-header">
                                                                <div class="col-md-6">{{ benefit.BenefitCode }}</div>
                                                                <div class="col-md-6 text-right">
                                                                    <a class="accordion-link" href="javascript:void(0);" v-on:click="cloneBenefit(index)" title="Duplicate Benefit"><span class="fas fa-clone" /></a>
                                                                    <a class="accordion-link" href="javascript:void(0);" v-on:click="removeBenefit(index)" title="Remove Benefit"><span class="fas fa-trash-alt" /></a>
                                                                    <a class="btn collapsed accordion-link" data-toggle="collapse" v-bind:href="'#collapseExample' + index + ''" role="button" aria-expanded="true" :aria-controls="'collapseExample' + index + ''">
                                                                        <span class="mr-3"></span>
                                                                    </a>
                                                                </div>
                                                            </div>
                                                            <div class="collapse" :id="'collapseExample' + index + ''">
                                                                <div class="accordion-body mt-2">
                                                                    <input type="hidden" :name="'verBenefitId[' + index + ']'" class="form-control" :value="benefit.Id">
                                                                    <input type="hidden" :name="'benefitId[' + index + ']'" class="form-control" :value="benefit.BenefitId">
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("RI Arrangement", htmlAttributes: new { @class = "col-form-label required" })
                                                                            <select v-model="benefit.ReinsuranceArrangementPickListDetailId" :name="'riArrangemen[' + index + ']'" class="form-control selectpicker" ref="select">
                                                                                <option v-for="(dropDownArrangementRetrocessionnaireType, index) in DropDownRiArrangements" :value="dropDownArrangementRetrocessionnaireType.Value">{{ dropDownArrangementRetrocessionnaireType.Text }}</option>
                                                                            </select>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Age Basis (Age Definition)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <select v-model="benefit.AgeBasisPickListDetailId" :name="'ageBasis[' + index + ']'" class="form-control selectpicker" ref="select">
                                                                                <option v-for="(dropDownAgeBasis, index) in DropDownAgeBasis" :value="dropDownAgeBasis.Value">{{ dropDownAgeBasis.Text }}</option>
                                                                            </select>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            <div class="row">
                                                                                <div class="col-md-6">
                                                                                    @Html.Label("Minimum Entry Age", htmlAttributes: new { @class = "col-form-label" })
                                                                                    <input v-model="benefit.MinimumEntryAge" class="form-control" :name="'minEntryAge[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    @Html.Label("Maximum Entry Age", htmlAttributes: new { @class = "col-form-label" })
                                                                                    <input v-model="benefit.MaximumEntryAge" class="form-control" :name="'maxEntryAge[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Maximum Expiry Age", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.MaximumExpiryAge" class="form-control" :name="'maxExpiryAge[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Underwriting Limits", htmlAttributes: new { @class = "col-form-label" })
                                                                            <div class="input-group">
                                                                                <select v-model="benefit.TreatyPricingUwLimitSelect" :name="'treatyPricingUwLimit[' + index + ']'" class="form-control selectpicker" ref="select">
                                                                                    <option v-for="(dropDownTreatyPricingUnderwritingLimit, index) in DropDownTreatyPricingUnderwritingLimits" :value="dropDownTreatyPricingUnderwritingLimit.Value">{{ dropDownTreatyPricingUnderwritingLimit.Text }}</option>
                                                                                </select>
                                                                                <div class="input-group-append">
                                                                                    <button type="button" v-on:click="linkToUnderwritingLimit(index)" class="btn btn-generate" :disabled="!benefit.TreatyPricingUwLimitId">VIEW</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row mt-4">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Group Free Cover Limit (Non-CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input type="hidden" :id="'groupLimitNonCI' + index" :name="'groupLimitNonCI[' + index + ']'" class="form-control" :value="benefit.GroupFreeCoverLimitNonCI">
                                                                            <div class="input-group">
                                                                                <input class="form-control" placeholder="Click to Edit" :id="'GroupFreeCoverLimitNonCiInput' + index" disabled />
                                                                                <div class="input-group-prepend">
                                                                                    <button type="button" class="input-group-text prevent-disable" v-on:click="editEditor('Group Free Cover Limit (Non-CI)', 'groupLimitNonCI' + index)">EDIT</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Requested Free Cover Limit (Non-CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.RequestedFreeCoverLimitNonCI" class="form-control" :name="'requestedLimitNonCI[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Group Free Cover Limit (CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input type="hidden" :id="'groupLimitCI' + index" :name="'groupLimitCI[' + index + ']'" class="form-control" :value="benefit.GroupFreeCoverLimitCI">
                                                                            <div class="input-group">
                                                                                <input class="form-control" placeholder="Click to Edit" :id="'GroupFreeCoverLimitCiInput' + index" disabled />
                                                                                <div class="input-group-prepend">
                                                                                    <button type="button" class="input-group-text prevent-disable" v-on:click="editEditor('Group Free Cover Limit (CI)', 'groupLimitCI' + index)">EDIT</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Requested Free Cover Limit (CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.RequestedFreeCoverLimitCI" class="form-control" :name="'requestedLimitCI[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Group Free Cover Limit - Age (Non-CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.GroupFreeCoverLimitAgeNonCI" class="form-control" :name="'groupLimitAgeNonCI[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Group Free Cover Limit - Age (CI)", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.GroupFreeCoverLimitAgeCI" class="form-control" :name="'groupLimitAgeCI[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Other Special RI Arrangement", htmlAttributes: new { @class = "col-form-label required" })
                                                                            <select v-model="benefit.OtherSpecialReinsuranceArrangement" :name="'otherSpecialRiArrangement[' + index + ']'" class="form-control selectpicker" ref="select">
                                                                                <option v-for="(dropDownRiArrangement, index) in DropDownOtherSpecialReinsuranceAgreements" :value="dropDownRiArrangement.Value">{{ dropDownRiArrangement.Text }}</option>
                                                                            </select>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Other Special Terms", htmlAttributes: new { @class = "col-form-label" })
                                                                            <textarea rows="1" v-on:focus="autoExpandTextarea('otherSpecialTerms')" v-on:blur="autoCollapseTextarea('otherSpecialTerms')" v-model="benefit.OtherSpecialTerms" class="form-control textarea-auto-expand" id="otherSpecialTerms" placeholder="Type here"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row mt-4">
                                                                        <div class="form-group col-md-12" style="padding-bottom: 0;">
                                                                            <span class="font-weight-bold">@Html.Label("Coinsurance Layer", htmlAttributes: new { @class = "col-form-label" })</span>
                                                                            <div class="form-row">
                                                                                <div class="form-group col-md-6 mid-line-1">
                                                                                    @Html.Label("Profit Margin", htmlAttributes: new { @class = "col-form-label required" })
                                                                                    <input v-model="benefit.ProfitMargin" class="form-control" :name="'profitMargin[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                                <div class="form-group col-md-6 mid-line-2">
                                                                                    @Html.Label("Expense Margin", htmlAttributes: new { @class = "col-form-label required" })
                                                                                    <input v-model="benefit.ExpenseMargin" class="form-control" :name="'expenseMargin[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Commission Margin", htmlAttributes: new { @class = "col-form-label required" })
                                                                            <input v-model="benefit.CommissionMargin" class="form-control" :name="'commissionMargin[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Group Profit Commission Loading", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.ProfitCommissionLoading" class="form-control" :name="'profitCommissionLoading[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Additional Loading", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.AdditionalLoading" class="form-control" :name="'additionalLoading[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Coinsurance RI Discount", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.CoinsuranceRiDiscount" class="form-control" :name="'coinsuranceRiDiscount[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Coinsurance Cedant's Retention", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.CoinsuranceCedantRetention" class="form-control" :name="'coinsuranceCedantRetention[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Coinsurance Reinsurer's Share", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.CoinsuranceReinsurerShare" class="form-control text-right" :name="'coinsuranceReinsurerShare[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row mt-4">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Profit Commission", htmlAttributes: new { @class = "col-form-label" })
                                                                            <div class="row m-0 p-0">
                                                                                <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                                                                                <div class="custom-control custom-switch pl-2">
                                                                                    <input type="checkbox" class="custom-control-input" v-model="benefit.HasProfitCommission" :id="'hasProfitComm' + index" />
                                                                                    <label class="custom-control-label" :for="'hasProfitComm' + index">Yes</label>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Group Profit Commission", htmlAttributes: new { @class = "col-form-label" })
                                                                            <div class="row m-0 p-0">
                                                                                <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                                                                                <div class="custom-control custom-switch pl-2">
                                                                                    <input type="checkbox" class="custom-control-input" v-model="benefit.HasGroupProfitCommission" :id="'hasGroupProfitComm' + index" />
                                                                                    <label class="custom-control-label" :for="'hasGroupProfitComm' + index">Yes</label>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">&nbsp;</div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            <input type="hidden" :id="'groupProfitCommission' + index" :name="'groupProfitCommission[' + index + ']'" class="form-control" :value="benefit.GroupProfitCommission">
                                                                            <div class="input-group">
                                                                                <input class="form-control" placeholder="Click to Edit" :id="'GroupProfitCommissionInput' + index" disabled />
                                                                                <div class="input-group-prepend">
                                                                                    <button type="button" class="input-group-text prevent-disable" v-on:click="editEditor('Group Profit Commission', 'groupProfitCommission' + index)">EDIT</button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">&nbsp;</div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Overwrite Group Profit Commission", htmlAttributes: new { @class = "col-form-label" })
                                                                            <div class="row m-0 p-0">
                                                                                <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                                                                                <div class="custom-control custom-switch pl-2">
                                                                                    <input type="checkbox" class="custom-control-input" v-model="benefit.IsOverwriteGroupProfitCommission" :id="'isOverwriteGroupProfitComm' + index" />
                                                                                    <label class="custom-control-label" :for="'isOverwriteGroupProfitComm' + index">Yes</label>
                                                                                </div>
                                                                                <div class="ml-auto">
                                                                                    <div v-if="benefit.IsOverwriteGroupProfitCommission" v-on:click="openOverwriteProfitCommRemarks(index)" data-toggle="modal" data-target="#overwriteGroupProfitCommRemarksModal">View / Edit</div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row mt-4">
                                                                        <div class="form-group col-md-12" style="padding-bottom: 0;">
                                                                            <span class="font-weight-bold">@Html.Label("YRT Layer", htmlAttributes: new { @class = "col-form-label" })</span>
                                                                            <div class="form-row">
                                                                                <div class="form-group col-md-6 mid-line-1">
                                                                                    @Html.Label("Additional Loading", htmlAttributes: new { @class = "col-form-label" })
                                                                                    <input v-model="benefit.AdditionalLoadingYRTLayer" class="form-control" :name="'additionalLoadingYRTLayer[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                                <div class="form-group col-md-6 mid-line-2">
                                                                                    @Html.Label("RI Discount", htmlAttributes: new { @class = "col-form-label" })
                                                                                    <input v-model="benefit.RiDiscount" class="form-control" :name="'riDiscount[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row">
                                                                        <div class="form-group col-md-6 mid-line-1">
                                                                            @Html.Label("Cedant's Retention", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.CedantRetention" class="form-control" :name="'cedantRetention[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                        <div class="form-group col-md-6 mid-line-2">
                                                                            @Html.Label("Reinsurance's Share", htmlAttributes: new { @class = "col-form-label" })
                                                                            <input v-model="benefit.ReinsuranceShare" class="form-control" :name="'reinsuranceShare[' + index + ']'" placeholder="Type here" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-row mt-4">
                                                                        <div class="form-group col-md-12" style="padding-bottom: 0;">
                                                                            <span class="font-weight-bold">@Html.Label("Takaful Only", htmlAttributes: new { @class = "col-form-label" })</span>
                                                                            <div class="form-row">
                                                                                <div class="form-group col-md-6 mid-line-1">
                                                                                    @Html.Label("Tabarru Loading", htmlAttributes: new { @class = "col-form-label" })
                                                                                    <input v-model="benefit.TabarruLoading" class="form-control" :name="'tabarruLoading[' + index + ']'" placeholder="Type here" />
                                                                                </div>
                                                                                <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                                                                            </div>
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                            </div>
                                                        </li>

                                                    </ul>
                                                </div>

                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>

                        </div>
                    </div>

                </div>

            </div>

            <div class="tab-pane fade" id="uploadedTable" role="tabpanel" aria-labelledby="uploadedTable-tab">

                <div class="text-right mb-2">
                    <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-submit">VIEW TABLE DATA</a>
                    <div class="btn-group">
                        <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            DOWNLOAD TEMPLATE AS
                        </button>
                        <div class="dropdown-menu">
                            @Html.ActionLink("HIPS", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeHips }, new { @class = "dropdown-item" })
                            @Html.ActionLink("GTL Claim Experience", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeGtlClaim }, new { @class = "dropdown-item" })
                            @Html.ActionLink("GTL Takeover Rates (Unit Rates)", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeGtlRate }, new { @class = "dropdown-item" })
                            @Html.ActionLink("GTL Takeover Rates (Age Banded)", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeGtlAge }, new { @class = "dropdown-item" })
                            @Html.ActionLink("GTL Basis of SA", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeGtlSa }, new { @class = "dropdown-item" })
                            @Html.ActionLink("GHS Claim Experience", "DownloadTableTypeExcelFile", new { tableType = BusinessObject.PickListDetailBo.TableTypeGhsClaim }, new { @class = "dropdown-item" })
                        </div>
                    </div>
                    <button type="button" class="btn btn-add-sub" style="width: auto;" v-on:click="resetAddTableGroupModal()" data-toggle="modal" data-target="#uploadedTableModal">ADD TABLE</button>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover" v-cloak>
                        <thead>
                            <tr>
                                <th class="w-40">Filename</th>
                                <th class="w-25">Table Type</th>
                                <th class="w-10">Upload Date & Time</th>
                                <th class="w-10">Uploaded by</th>
                                <th class="w-10">Status</th>
                                <th class="w-5">View Error</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-if="!TableGroupUploads || !TableGroupUploads.length">
                                <td colspan="6" class="no-data">No available data found.</td>
                            </tr>
                            <tr v-for="(file, index) in TableGroupUploads">
                                <td>{{ file.FileName }}</td>
                                <td>{{ file.TableTypePickListDetailBo.Description }}</td>
                                <td>{{ file.CreatedAtStr }}</td>
                                <td>{{ file.CreatedByBo?.FullName }}</td>
                                <td>{{ file.StatusName }}</td>
                                <td v-if="!file.Errors"></td>
                                <td class="text-center" v-if="file.Errors">
                                    <span class="fas fa-exclamation-triangle" style="cursor: pointer;" v-on:click="showErrorModal(index)" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="tab-pane fade" id="statusHistory" role="tabpanel" aria-labelledby="statusHistory-tab">
                @Html.Partial("_StatusHistory", new ViewDataDictionary { { "loadModal", false }, { "showRemark", true }, { "showDocuments", true }, { "showVersion", true }, { "showStatusSelect", true }, { "showRecipient", true }, { "statusHeaderName", "Quotation Status" } })
            </div>

            <div class="tab-pane fade" id="checklist" role="tabpanel" aria-labelledby="checklist-tab">
                @Html.Partial("_ChecklistTab")
            </div>

            <div class="tab-pane fade" id="remarks" role="tabpanel" aria-labelledby="remarks-tab">

                <div class="form-horizontal">
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelFor(model => model.QuotationFolder, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.QuotationFolder, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.QuotationFolder, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                    </div>
                    <div class="form-row mt-4">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelFor(model => model.ReplyVersionId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.ReplyVersionId, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.ReplyVersionId, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">
                            @Html.LabelFor(model => model.ReplyTemplateId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.ReplyTemplateId, (List<SelectListItem>)ViewBag.ReplyTemplates, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "Model.ReplyTemplateId" })
                            @Html.ValidationMessageFor(model => model.ReplyTemplateId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.LabelFor(model => model.ReplySharePointLink, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.ReplySharePointLink, new { @class = "form-control", placeholder = "Type here" })
                                <div class="input-group-append">
                                    <input type="button" class="btn btn-generate" v-on:click="editSharePointFile('Reply')" value="EDIT" />
                                </div>
                            </div>
                            @Html.HiddenFor(model => model.ReplySharePointFolderPath)
                            @Html.ValidationMessageFor(model => model.ReplySharePointLink, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2"></div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-12 text-right">
                            <button type="button" class="btn btn-add" style="width: auto;" v-on:click="generateSharePointFile('Reply')">GENERATE REPLY TEMPLATE</button>
                        </div>
                    </div>
                    <div class="form-row mt-4">
                        <div class="form-group col-md-12">
                            @Html.Partial("_Remark", new ViewDataDictionary { { "showDocuments", true }, { "showStatus", false }, { "showVersion", true }, { "showSubject", true }, { "dropdownVersions", ViewBag.DropDownVersions } })
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="changelog" role="tabpanel" aria-labelledby="changelog-tab">
                @Html.Partial("_Changelog")
            </div>

        </div>
    </div>
</div>

@Html.Partial("_CkEditor")

<div class="modal fade" id="newVersionModal" tabindex="-1" role="dialog" aria-labelledby="newVersionModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Version</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form">
                    <div class="form-group">
                        <label class="col-form-label" for="userName">Person In-Charge (Business Development)</label>
                        <input type="text" readonly class="form-control" id="userName" value="@ViewBag.AuthUserName">
                    </div>

                    <div class="form-group">
                        <label class="col-form-label" for="duplicatePreviousVersion">Duplicate Previous Version</label>
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch pl-2">
                                <input class="custom-control-input" id="duplicatePreviousVersion" name="duplicatePreviousVersion" type="checkbox" />
                                <label class="custom-control-label" for="duplicatePreviousVersion">Yes</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                <button type="button" onclick="createVersion()" class="btn btn-submit" data-dismiss="modal">CREATE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="benefitModal" tabindex="-1" role="dialog" aria-labelledby="benefitModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Benefit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div v-if="BenefitDataValidation.length" class="alert alert-danger" role="alert">
                    <ul>
                        <li v-for="(validation, index) in BenefitDataValidation">{{validation}}</li>
                    </ul>
                </div>
                <div class="form">
                    <div class="form-group">
                        <label class="col-form-label" for="userName">Benefit Code</label>
                        <select v-model="BenefitModal.BenefitId" id="BenefitId" class="form-control selectpicker" ref="select">
                            <option v-for="benefitCode in BenefitCodes" :value="benefitCode.BenefitBo?.Id">{{ benefitCode.BenefitBo?.Code + " - " + benefitCode.BenefitBo?.Description }}</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="col-form-label" for="duplicatePreviousVersion">Duplicate Existing Benefit</label>
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch pl-2">
                                <input class="custom-control-input" id="isDuplicateExisting" name="isDuplicateExisting" type="checkbox" v-model="BenefitModal.IsDuplicateExisting" />
                                <label class="custom-control-label" for="isDuplicateExisting">Yes</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group" v-if="BenefitModal.IsDuplicateExisting">
                        <label class="col-form-label" for="userName">Existing Benefit Code</label>
                        <select v-model="BenefitModal.DuplicateBenefitId" id="DuplicateBenefitId" class="form-control selectpicker" ref="select">
                            <option v-for="(duplicateBenefitCode, index) in DuplicateBenefitCodes" :value="duplicateBenefitCode.Id">{{ duplicateBenefitCode.BenefitCode }}</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                <button type="button" v-on:click="addBenefit()" class="btn btn-submit">CREATE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="uploadedTableModal" tabindex="-1" role="dialog" aria-labelledby="uploadedTableModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Table</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div v-if="TableGroupDataValidation.length" class="alert alert-danger" role="alert">
                    <ul>
                        <li v-for="(validation, index) in TableGroupDataValidation">{{validation}}</li>
                    </ul>
                </div>
                <div class="form">
                    <div class="form-group">
                        <label class="col-form-label" for="tableType">Table Type</label>
                        <select v-model="TableGroupModal.TableTypeId" id="TableTypeId" class="form-control selectpicker" ref="select">
                            <option v-for="tableType in TableTypes" :value="tableType.Value">{{ tableType.Text }}</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="col-form-label" for="uploadFile">File Upload</label>
                        <div class="file is-boxed">
                            <label class="file-label">
                                <input class="form-control-file" type="file" id="tableGroupFiles" name="tableGroupUpload" accept=".xlsx, .xls" v-on:change="uploadTableGroupFile()">
                                Drag and Drop File Here or <u>Browse your file</u>
                                <br />
                                <span class="file-desc">
                                    Allowed file format: .xls .xlsx
                                </span>
                                <br />
                                <span class="file-desc">
                                    File size is up to 2GB
                                </span>
                            </label>
                        </div>
                        <div id="selectedFiles" class="file-list-display table-group-files"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                <button type="button" v-on:click="addTableGroup()" class="btn btn-submit">CREATE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error Message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" rows="5" readonly style="resize: none;">{{ TableGroupError }}</textarea>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="overwriteGroupProfitCommRemarksModal" tabindex="-1" role="dialog" aria-labelledby="overwriteGroupProfitCommRemarksModal">
    <div hidden v-model="OverwriteGroupProfitCommissionRemarksIndex"></div>
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" v-model="OverwriteGroupProfitCommissionRemarksTitle">Overwrite Group Profit Commission Remarks</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control" rows="5" style="resize: none;" v-model="OverwriteGroupProfitCommissionRemarks"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" v-on:click="saveOverwriteProfitCommRemarks(OverwriteGroupProfitCommissionRemarksIndex)" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CLOSE</button>
            </div>
        </div>
    </div>
</div>

@* Sharepoint modals *@
<div class="modal fade" id="sharePointGenerateErrorModal" tabindex="-1" role="dialog" aria-labelledby="sharePointGenerateErrorModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Errors</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul>
                    <li v-for="(error, index) in SharePointGenerateValidation" class="text-danger">{{ error }}</li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sharePointGenerateConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="sharePointGenerateConfirmationModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul>
                    <li v-for="(confirmation, index) in SharePointGenerateConfirmation" class="text-danger">{{ confirmation }}</li>
                </ul>
                Do you wish to proceed?
            </div>
            <div class="modal-footer">
                <button class="btn btn-submit" v-on:click="generateSharePointFileConfirmed()" data-dismiss="modal">YES</button>
                <button type="button" class="btn btn-cancel" data-dismiss="modal">NO</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sharePointGenerateSuccessModal" tabindex="-1" role="dialog" aria-labelledby="sharePointGenerateSuccessModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Success</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                File generated successfully.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sharePointEditErrorModal" tabindex="-1" role="dialog" aria-labelledby="sharePointEditErrorModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="text-danger">SharePoint file not found</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>
@* Sharepoint modals *@

@Html.Partial("_AddRemarkModal", new ViewDataDictionary { { "showDocuments", true }, { "showSubject", true } })
@Html.Partial("_AddStatusHistoryModal", new ViewDataDictionary { { "showVersion", true }, { "showStatusSelect", true }, { "showRecipient", true }, { "showRemark", true }, { "showDocuments", true } })

<script>
    // Model
    var Model = @Html.Raw(serializer.Serialize(Model));

     //Url
    var CreateVersionUrl = "@(Url.Action("CreateVersion", "TreatyPricingGroupReferral"))";
    var GetVersionDetailUrl = "@(Url.Action("GetVersionDetails"))";
    var GetChecklistHistoriesVersionUrl = "@(Url.Action("GetChecklistHistoriesVersion"))";
    var CreateStatusHistoryUrl = "@Url.Action("UpdateStatus", "TreatyPricingGroupReferral")";
    var CreateUploadUrl = "@Url.Action("UploadedTableFiles", "TreatyPricingGroupReferral")";
    var GenerateSharePointFileUrl = "@Url.Action("GenerateSharePointFile", "TreatyPricingGroupReferral")";
    var GenerateSharePointFileConfirmedUrl = "@Url.Action("GenerateSharePointFileConfirmed", "TreatyPricingGroupReferral")";
    var DropDownVersionUrl = "@Url.Action("DropDownVersion", "TreatyPricingGroupReferral")";
    var GetChecklistStatusNameUrl = "@Url.Action("GetChecklistStatusName", "TreatyPricingGroupReferral")";
    var NotifyQuotationChecklistUrl = "@Url.Action("NotifyQuotationChecklist", "TreatyPricingGroupReferral")";
    var UpdateChecklistStatusUrl = "@Url.Action("UpdateChecklistStatus", "TreatyPricingGroupReferral")";
    var SaveBenefitsUrl = "@Url.Action("SaveBenefits")";
    var UnderwritingLimitEditUrl = "@Url.Action("Edit", "TreatyPricingUwLimit")";

    //List
    var Benefits = @Html.Raw(serializer.Serialize(ViewBag.DropDownProductBenefits));
    var Remarks = @Html.Raw(serializer.Serialize(ViewBag.RemarkBos));
    var RemarkSubjects = @Html.Raw(serializer.Serialize(ViewBag.RemarkSubjects));
    var Changelogs = @Html.Raw(serializer.Serialize(ViewBag.ObjectVersionChangelogs));
    var StatusHistories = @Html.Raw(serializer.Serialize(ViewBag.StatusHistoryBos));
    var Uploads = @Html.Raw(serializer.Serialize(ViewBag.UploadBos));
    var TableTypes = @Html.Raw(serializer.Serialize(ViewBag.TableTypes));
    var DropDownUltimateApprovers = @Html.Raw(serializer.Serialize(ViewBag.DropDownUltimateApprovers));
    var DropDownGRStatus = @Html.Raw(serializer.Serialize(ViewBag.DropDownGRStatus));
    var ChecklistGroups = @Html.Raw(serializer.Serialize(ViewBag.Groups));
    var DropDownAgeBasis = @Html.Raw(serializer.Serialize(ViewBag.DropDownAgeBasis));
    var DropDownProfitComms = @Html.Raw(serializer.Serialize(ViewBag.DropDownTreatyPricingProfitCommissions));
    var DropDownRiArrangements = @Html.Raw(serializer.Serialize(ViewBag.DropDownRiArrangements));
    var DropDownOtherSpecialReinsuranceAgreements = @Html.Raw(serializer.Serialize(ViewBag.DropDownOtherSpecialReinsuranceAgreements));
    var DropDownTreatyPricingUnderwritingLimits = @Html.Raw(serializer.Serialize(ViewBag.DropDownTreatyPricingUnderwritingLimits));
    var UnderwritingMethodCodes = @Html.Raw(serializer.Serialize(ViewBag.UnderwritingMethodCodes));
    var LatestVersion = @Html.Raw(serializer.Serialize(ViewBag.LatestVersion));
    var RecipientEmails = @Html.Raw(serializer.Serialize(ViewBag.RecipientEmails));

    // User tokens
    var UsersUnderwriting = @Html.Raw(serializer.Serialize(ViewBag.UsersUnderwriting));
    var UsersHealth = @Html.Raw(serializer.Serialize(ViewBag.UsersHealth));
    var UsersClaim = @Html.Raw(serializer.Serialize(ViewBag.UsersClaim));
    var UsersBD = @Html.Raw(serializer.Serialize(ViewBag.UsersBD));
    var UsersCR = @Html.Raw(serializer.Serialize(ViewBag.UsersCR));
    var UsersGroup = @Html.Raw(serializer.Serialize(ViewBag.UsersGroup));
    var UsersReviewer = @Html.Raw(serializer.Serialize(ViewBag.UsersReviewer));
    var UsersHOD = @Html.Raw(serializer.Serialize(ViewBag.UsersHOD));
    var UsersCEO = @Html.Raw(serializer.Serialize(ViewBag.UsersCEO));

    // Checklist statuses
    var StatusNotRequired = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusNotRequired;
    var StatusPendingReview = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusPendingReview;
    var StatusCompleted = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusCompleted;
    var StatusPendingApproval = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusPendingApproval;
    var StatusApproved = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusApproved;
    var StatusRejected = @BusinessObject.TreatyPricing.TreatyPricingGroupReferralChecklistBo.StatusRejected;

    //Other
    var AuthUserName = '@ViewBag.AuthUserName';
    var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
    var UploadedType = '@BusinessObject.TreatyPricing.TreatyPricingGroupReferralFileBo.UploadedTypeTable';
    var ViewVersionOnly = @ViewBag.EnableView.ToString().ToLower();
</script>

