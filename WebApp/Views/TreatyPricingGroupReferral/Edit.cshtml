@model WebApp.Models.TreatyPricingGroupReferralViewModel
@using Shared.Forms.Helpers

@{
    ViewBag.Title = "Group Referral";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

@Html.Partial("_LoadingSpinner")

<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingGroupReferralBo.GetStatusClass(Model.Status)">
                    @BusinessObject.TreatyPricing.TreatyPricingGroupReferralBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">

        @Html.Partial("_ObjectLockEditButton")

        <div class="alert alert-danger" style="display:none;" id="benefitErrors">
        </div>
        @using (Html.BeginForm("Edit", "TreatyPricingGroupReferral", FormMethod.Post, new { id = "myForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Code)
            @Html.HiddenFor(model => model.GRCedantId)
            @Html.HiddenFor(model => model.RiArrangementPickListDetailId)
            @Html.HiddenFor(model => model.PrimaryTreatyPricingProductSelect)
            @Html.HiddenFor(model => model.SecondaryTreatyPricingProductSelect)
            @Html.HiddenFor(model => model.PrimaryTreatyPricingProductId)
            @Html.HiddenFor(model => model.PrimaryTreatyPricingProductVersionId)
            @Html.HiddenFor(model => model.SecondaryTreatyPricingProductId)
            @Html.HiddenFor(model => model.SecondaryTreatyPricingProductVersionId)
            @Html.HiddenFor(model => model.GroupMasterLetterId)
            @Html.HiddenFor(model => model.EditableVersion)
            @Html.HiddenFor(model => model.Status)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.GRPolicyNumber, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBoxFor(model => model.GRPolicyNumber, new { @class = "form-control", placeholder = "Type here" })
                        @Html.ValidationMessageFor(model => model.GRPolicyNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Primary Product ID", htmlAttributes: new { @class = "col-form-label" })
                        @if (!string.IsNullOrEmpty(Model.PrimaryTreatyPricingProductSelect))
                        {
                            string primaryProductText = string.Format("{0} - {1} v{2}.0", Model.PrimaryTreatyPricingProductCode, Model.PrimaryTreatyPricingProductName, Model.PrimaryTreatyPricingProductVersion.ToString());
                            <input type="text" readonly class="form-control" value="@(!string.IsNullOrEmpty(primaryProductText) ? primaryProductText : "")">
                        }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Quotation Name", htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.QuotationnName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Secondary Product ID", htmlAttributes: new { @class = "col-form-label" })
                        @{
                            string secondaryProductText = "";
                            if (!string.IsNullOrEmpty(Model.SecondaryTreatyPricingProductSelect))
                            {
                                secondaryProductText = string.Format("{0} - {1} v{2}.0", Model.SecondaryTreatyPricingProductCode, Model.SecondaryTreatyPricingProductName, Model.SecondaryTreatyPricingProductVersion.ToString());
                            }

                            <input type="text" readonly class="form-control" value="@(!string.IsNullOrEmpty(secondaryProductText) ? secondaryProductText : "")">
                        }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.InsuredGroupId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.InsuredGroupId, (List<SelectListItem>)ViewBag.DropDownInsuredGroupNames, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.InsuredGroupId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.IndustryNameId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.IndustryNameId, (List<SelectListItem>)ViewBag.DropDownIndustryNames, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.IndustryNameId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.FirstReferralDate, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.FirstReferralDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('FirstReferralDateStr')" }, { @"v-model.lazy", @"Model.FirstReferralDateStr" } })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('FirstReferralDateStr')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.FirstReferralDateStr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.CoverageStartDate, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.CoverageStartDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('CoverageStartDateStr')" }, { @"v-model.lazy", @"Model.CoverageStartDateStr" } })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('CoverageStartDateStr')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.CoverageStartDateStr, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.CoverageEndDate, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.CoverageEndDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('CoverageEndDateStr')" }, { @"v-model.lazy", @"Model.CoverageEndDateStr" } })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('CoverageEndDateStr')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.CoverageEndDateStr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.ReferredTypeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ReferredTypeId, (List<SelectListItem>)ViewBag.DropDownReferredTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.ReferredTypeId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.WorkflowStatus, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.WorkflowStatusName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right" v-on:click="submitGroupReferral()">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var loadingDiv = $("#loadingSpinner");
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingGroupReferral.ToString()';
        $(document).ready(function () {
            $('#Description').autoResize();
            $('#Description').trigger('keyup');
        });
    </script>

    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/TreatyPricingGroupReferral.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
