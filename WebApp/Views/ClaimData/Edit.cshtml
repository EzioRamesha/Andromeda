@using PagedList.Mvc
@model WebApp.Models.ClaimDataBatchViewModel

@{
    ViewBag.Title = "Claim Data Batch";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    var disabled = ViewBag.Disabled || ViewBag.ReadOnly;
    var canProcess = ViewBag.CanProcess;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.Claims.ClaimDataBatchBo.GetStatusClass(Model.Status)">
                    @BusinessObject.Claims.ClaimDataBatchBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @Html.Partial("_LoadingSpinner")

        @using (Html.BeginForm("Edit", "ClaimData", FormMethod.Post, new { enctype = "multipart/form-data", id = "editForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Status, new { @Id = "status" })
            @Html.HiddenFor(model => model.ModuleId)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.CedantId)
                        <input type="text" readonly class="form-control" value="@string.Format("{0} - {1}", Model.CedantBo.Code, Model.CedantBo.Name)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.TreatyId)
                        <input type="text" readonly class="form-control" id="TreatyName" value="@(string.Format("{0} - {1}", Model.ClaimDataConfigBo.TreatyBo.TreatyIdCode, Model.ClaimDataConfigBo.TreatyBo.Description))">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Quarter, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Quarter, new { htmlAttributes = new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off", onclick = "openQuarterPicker(this.id)" } })
                        @Html.ValidationMessageFor(model => model.Quarter, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ClaimDataConfigId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ClaimDataConfigId, new SelectList(Enumerable.Empty<SelectListItem>()), "Please select", htmlAttributes: new { @class = "form-control selectpicker", @onchange = "changeClaimDataConfig(this.value)" })
                        @Html.ValidationMessageFor(model => model.ClaimDataConfigId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.PersonInChargeId)
                        <input type="text" readonly class="form-control" value="@Model.PersonInChargeBo.FullName">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ReceivedAtStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ReceivedAtStr, new { htmlAttributes = new { @class = "form-control datepicker", placeholder = "DD MM YYYY", onclick = "openDatePicker(this.id)" } })
                        @Html.ValidationMessageFor(model => model.ReceivedAtStr, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ClaimTransactionTypePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ClaimTransactionTypePickListDetailId, (List<SelectListItem>)ViewBag.DropDownClaimTransactionTypes, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "ClaimDataBatch.ClaimTransactionTypePickListDetailId" })
                        @Html.ValidationMessageFor(model => model.ClaimTransactionTypePickListDetailId, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.Partial("_MatchSoaData")

                <div class="mt-4">
                    <span class="font-weight-bold">@Html.Label("Data File Upload", htmlAttributes: new { @class = "col-form-label" })</span>

                    <div id="fileConfig">
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.FileType, htmlAttributes: new { @class = "col-form-label" })
                                @Html.HiddenFor(model => model.FileType)
                                <input type="text" readonly class="form-control" id="FileTypeName">
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="delimiterDiv">
                                @Html.LabelFor(model => model.Delimiter, htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.Delimiter, (List<SelectListItem>)ViewBag.DropDownDelimiters, htmlAttributes: new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.Delimiter, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="worksheetDiv">
                                @Html.LabelFor(model => model.Worksheet, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.Worksheet, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.Worksheet, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.HasHeader, htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.HasHeader, (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "toggleHeader()" })
                                @Html.ValidationMessageFor(model => model.HasHeader, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="headerRowDiv">
                                @Html.LabelFor(model => model.HeaderRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.HeaderRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.HeaderRow, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.StartRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.StartRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.StartRow, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.EndRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.EndRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.EndRow, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.StartColumn, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.StartColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.StartColumn, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.EndColumn, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.EndColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.EndColumn, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <input type="hidden" name="IncludedFiles" id="IncludedFiles" />
                    <div class="form-row" id="fileUpload">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.Label("Upload File", htmlAttributes: new { @class = "col-form-label" })
                            <div class="file is-boxed">
                                <label class="file-label">
                                    <input class="form-control-file" type="file" id="files" name="upload" multiple>
                                    Drag and Drop File Here or <u>Browse your file</u>
                                    <br />
                                    <span class="file-desc">
                                        Allowed file format: .csv, .txt, .xls, .xlsx, .pro, .rpt, .xlsb, .xlsm
                                    </span>
                                    <br />
                                    <span class="file-desc">
                                        File size is up to 2GB
                                    </span>
                                </label>
                            </div>
                            <div id="selectedFiles" class="file-list-display"></div>
                            <div class="field-validation-error text-danger" id="errorSizeExceeds" style="display: none;"></div>
                            @Html.ValidationMessageFor(model => model.Upload, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                    </div>
                </div>

                <div class="mt-4">
                    <span class="font-weight-bold">@Html.Label("Override Properties", htmlAttributes: new { @class = "col-form-label" })</span>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="w-50">
                                        Label
                                    </th>
                                    <th class="w-50">
                                        Value
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var item in Model.OverrideProperties)
                                    {
                                        int type = int.Parse(item.Key);
                                        string FieldName = BusinessObject.StandardClaimDataOutputBo.GetCodeByType(type);
                                        int DataType = BusinessObject.StandardClaimDataOutputBo.GetDataTypeByType(type);
                                        <tr>
                                            <td>
                                                @BusinessObject.StandardClaimDataOutputBo.GetTypeName(type)
                                            </td>
                                            <td>
                                                <div class="form-group">
                                                    @{
                                                        switch (DataType)
                                                        {
                                                            case BusinessObject.StandardOutputBo.DataTypeAmount:
                                                                <div class="input-group">
                                                                    @if (type != BusinessObject.StandardClaimDataOutputBo.TypeCurrencyRate)
                                                                    {
                                                                        <div class="input-group-prepend">
                                                                            <div class="input-group-text">MYR</div>
                                                                        </div>
                                                                    }
                                                                    @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                                </div>
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypePercentage:
                                                                <div class="input-group">
                                                                    <div class="input-group-prepend">
                                                                        <div class="input-group-text">%</div>
                                                                    </div>
                                                                    @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                                </div>
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeDropDown:
                                                                @Html.DropDownList(FieldName, (List<SelectListItem>)ViewBag.OverrideDropDownItems[item.Key], htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                                                break;
                                                            default:
                                                                @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                                if (DataType == BusinessObject.StandardOutputBo.DataTypeDate)
                                                                {
                                                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('@FieldName')"></span>
                                                                }
                                                                break;
                                                        }
                                                        @Html.ValidationMessage(FieldName)
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }

        @Html.Partial("_ClaimDataDetails")

        <div class="form-row form-row-btn mt-4">
            <div class="form-group col-md-12 btn-row">
                @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                @Html.ActionLink("DELETE", "Delete", new { id = Model.Id }, new { @class = "btn btn-del" })
                <div class="row m-0 p-0 float-right">
                    @if (!ViewBag.Disabled)
                    {
                        <div class="mr-1">
                            <input type="button" id="submit-form" onclick="submitBatch()" class="btn btn-submit" value="SAVE" />
                        </div>
                        <div class="mr-1">
                            <input type="button" id="processBtn" onclick="updateStatus(@BusinessObject.Claims.ClaimDataBatchBo.StatusSubmitForProcessing)" class="btn btn-submit float-right" style="width: auto;" value="SUBMIT FOR PROCESSING" />
                        </div>
                    }

                    @if (ViewBag.CanReportClaim)
                    {
                        <input type="button" onclick="updateStatus(@BusinessObject.Claims.ClaimDataBatchBo.StatusSubmitForReportClaim)" class="btn btn-submit" style="width: auto;height: 25px;" value="SUBMIT FOR REPORT CLAIM DATA" />
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
    // Model
    var Model = @Html.Raw(Json.Encode(Model));
    var ClaimDataFiles = @Html.Raw(Json.Encode(ViewBag.ClaimDataFileBos));
    var ClaimDataBatchStatusFiles = @Html.Raw(Json.Encode(ViewBag.ClaimDataBatchStatusFileBos));
    var StatusHistories = @Html.Raw(Json.Encode(ViewBag.StatusHistoryBos));
    var Remarks = @Html.Raw(Json.Encode(ViewBag.RemarkBos));

    // URL
    var GetClaimDataConfigListUrl = '@Url.Action("GetClaimDataConfigByCedant")';
    var GetClaimDataConfigUrl = '@Url.Action("GetClaimDataConfig")';
    var DownloadClaimDataFileUrl = '@Url.Action("DownloadClaimDataFile")';
    var EditClaimDataFileUrl = '@Url.Action("EditClaimDataFile")';
    var AddRemarkUrl = '@Url.Action("Create", "Remark")';
    var RefreshUserSessionUrl = '@Url.Action("RefreshUserSession", "Account")';
    var LoginUrl = '@Url.Action("Login", "Account")';
    var GetSoaDataBatchUrl = '@Url.Action("GetSoaDataBatch", "SoaData")';
    var CreateSoaDataBatchUrl = '@Url.Action("CreateSoaDataBatch", "SoaData")';
    var ViewSoaDataBatchUrl = "@(Url.Action("Edit", "SoaData"))";
    var EditClaimDataConfigUrl = "@(Url.Action("Edit", "ClaimDataConfig"))";

    // Constants
    var FileTypeExcel = @BusinessObject.Claims.ClaimDataConfigBo.FileTypeExcel;
    var FileTypePlainText = @BusinessObject.Claims.ClaimDataConfigBo.FileTypePlainText;
    var ModeInclude = @BusinessObject.Claims.ClaimDataFileBo.ModeInclude;
    var ModeExclude = @BusinessObject.Claims.ClaimDataFileBo.ModeExclude;

    // Others
    var QuarterFormat = '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs';
    var AuthUserName = '@ViewBag.AuthUserName';
    var DateTimeFormat = '@(Shared.Util.GetDateTimeFormatMomentJs())';

    $(document).ready(function () {
        var readOnly = @(disabled.ToString().ToLower());
        if (readOnly) {
            disableFields();
            if ('@Model.SoaDataBatchId.HasValue')
                    $('button.btn-generate').removeAttr("disabled");
        }

        if (!@canProcess) {
            $('#processBtn').prop('disabled', true);
        }
    });
    </script>

    @Scripts.Render("~/Scripts/models/ClaimDataBatch.js")
}
