@using PagedList.Mvc
@model WebApp.Models.ClaimDataFileViewModel

@{
    ViewBag.Title = "Claim Data File";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    ViewBag.PrevTitle = "Claim Data Batch";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", new { id = Model.ClaimDataBatchId });

    var disabled = ViewBag.ReadOnly || ViewBag.CutOffReadOnly;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.Claims.ClaimDataFileBo.GetStatusClass(Model.Status)">
                    @BusinessObject.Claims.ClaimDataFileBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("EditClaimDataFile", "ClaimData", FormMethod.Post, new { enctype = "multipart/form-data", id = "editForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.CedantId)
                        <input type="text" readonly class="form-control" value="@string.Format("{0} - {1}", Model.CedantBo.Code, Model.CedantBo.Name)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.TreatyId)
                        <input type="text" readonly class="form-control" id="TreatyName" value="@(string.Format("{0} - {1}", Model.TreatyBo.TreatyIdCode, Model.TreatyBo.Description))">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Quarter, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.Quarter)
                        <input type="text" readonly class="form-control" id="Quarter" value="@Model.Quarter">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ClaimDataConfigId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ClaimDataConfigId, new SelectList(Enumerable.Empty<SelectListItem>()), "Please select", htmlAttributes: new { @class = "form-control selectpicker", @onchange = "changeClaimDataConfig(this.value)" })
                        @Html.ValidationMessageFor(model => model.ClaimDataConfigId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CurrencyRate, htmlAttributes: new { @class = "col-form-label" })
                        <div class="form-row">
                            <div class="col-md-4">
                                @Html.DropDownListFor(model => model.CurrencyCodeId, (List<SelectListItem>)ViewBag.DropDownCurrencyCodes, htmlAttributes: new { @class = "form-control selectpicker" })
                            </div>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.CurrencyRate, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "0.00" } })
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.CurrencyCodeId, "", new { @class = "text-danger" })
                        @Html.ValidationMessageFor(model => model.CurrencyRate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.PersonInChargeId)
                        <input type="text" readonly class="form-control" value="@Model.PersonInChargeBo.FullName">
                    </div>
                </div>

                <div class="mt-4">
                    <span class="font-weight-bold">@Html.Label("Data File Upload", htmlAttributes: new { @class = "col-form-label" })</span>

                    <div id="fileConfig">
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.FileType, htmlAttributes: new { @class = "col-form-label" })
                                @Html.HiddenFor(model => model.FileType)
                                <input type="text" readonly class="form-control" id="FileTypeName">
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="delimiterDiv">
                                @Html.LabelFor(model => model.Delimiter, htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.Delimiter, (List<SelectListItem>)ViewBag.DropDownDelimiters, htmlAttributes: new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.Delimiter, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="worksheetDiv">
                                @Html.LabelFor(model => model.Worksheet, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.Worksheet, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.Worksheet, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.HasHeader, htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.HasHeader, (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "toggleHeader()" })
                                @Html.ValidationMessageFor(model => model.HasHeader, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2" id="headerRowDiv">
                                @Html.LabelFor(model => model.HeaderRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.HeaderRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.HeaderRow, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.StartRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.StartRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.StartRow, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.EndRow, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.EndRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.EndRow, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.StartColumn, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.StartColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.StartColumn, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.EndColumn, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.EndColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here" } })
                                @Html.ValidationMessageFor(model => model.EndColumn, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <span class="font-weight-bold">@Html.Label("Override Properties", htmlAttributes: new { @class = "col-form-label" })</span>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="w-50">
                                        Label
                                    </th>
                                    <th class="w-50">
                                        Value
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (var item in Model.OverrideProperties)
                                    {
                                        string FieldName = BusinessObject.StandardClaimDataOutputBo.GetCodeByType(int.Parse(item.Key));
                                        int DataType = BusinessObject.StandardClaimDataOutputBo.GetDataTypeByType(int.Parse(item.Key));
                                        <tr>
                                            <td>
                                                @BusinessObject.StandardClaimDataOutputBo.GetTypeName(int.Parse(item.Key))
                                            </td>
                                            <td>
                                                @{
                                                    switch (DataType)
                                                    {
                                                        case BusinessObject.StandardOutputBo.DataTypeAmount:
                                                            <div class="input-group">
                                                                <div class="input-group-prepend">
                                                                    <div class="input-group-text">MYR</div>
                                                                </div>
                                                                @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                            </div>
                                                            break;
                                                        case BusinessObject.StandardOutputBo.DataTypePercentage:
                                                            <div class="input-group">
                                                                <div class="input-group-prepend">
                                                                    <div class="input-group-text">%</div>
                                                                </div>
                                                                @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                            </div>
                                                            break;
                                                        case BusinessObject.StandardOutputBo.DataTypeDropDown:
                                                            @Html.DropDownList(FieldName, (List<SelectListItem>)ViewBag.OverrideDropDownItems[item.Key], htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                                            break;
                                                        default:
                                                            @Html.Editor(FieldName, Model.GetHtmlViewData(DataType, item.Value))
                                                            if (DataType == BusinessObject.StandardOutputBo.DataTypeDate)
                                                            {
                                                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('@FieldName')"></span>
                                                            }
                                                            break;
                                                    }
                                                    @Html.ValidationMessage(FieldName)
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Edit", new { id = Model.ClaimDataBatchId, tabIndex = 2 }, new { @class = "btn btn-cancel" })
                        <button type="submit" class="btn btn-submit float-right">SAVE</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        // Model
        var Model = @Html.Raw(Json.Encode(Model));

        // URL
        var GetClaimDataConfigListUrl = '@Url.Action("GetClaimDataConfigByCedant")';
        var GetClaimDataConfigUrl = '@Url.Action("GetClaimDataConfig")';

        // Constants
        var FileTypeExcel = @BusinessObject.Claims.ClaimDataConfigBo.FileTypeExcel;
        var FileTypePlainText = @BusinessObject.Claims.ClaimDataConfigBo.FileTypePlainText;
        var ModeInclude = @BusinessObject.Claims.ClaimDataFileBo.ModeInclude;
        var ModeExclude = @BusinessObject.Claims.ClaimDataFileBo.ModeExclude;

        // Others
        var QuarterFormat = '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs';

        $(document).ready(function () {
            var readOnly = @(disabled.ToString().ToLower());
            if (readOnly) {
                disableFields();
            }
        });
    </script>

    @Scripts.Render("~/Scripts/models/ClaimDataBatch.js")
}
