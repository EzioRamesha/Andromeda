@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.RiDataCorrectionViewModel>

@{
    ViewBag.Title = "RI Data Correction";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="file btn btn-upload" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                    <label>UPLOAD</label>
                    @using (Html.BeginForm("Upload", "RiDataCorrection", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="file" id="dataFile" name="upload" accept=".csv" onchange="this.form.submit()" />
                    }
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                        {
                            type = 2,
                            CedantId = routeValue["CedantId"],
                            TreatyCodeId = routeValue["TreatyCodeId"],
                            PolicyNumber = routeValue["PolicyNumber"],
                            InsuredRegisterNo = routeValue["InsuredRegisterNo"],
                            CampaignCode = routeValue["CampaignCode"],
                            ReinsBasisCodeId = routeValue["ReinsBasisCodeId"],
                            InsuredGenderCodeId = routeValue["InsuredGenderCodeId"],
                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                            InsuredName = routeValue["InsuredName"],
                            ApLoading = routeValue["ApLoading"],
                        }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Template", "Download", new { type = 3 }, new { @class = "dropdown-item" })
                    </div>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-add">
                    ADD NEW
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedantId;
                                @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedantId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyCodeId;
                                @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPolicyNumber;
                                @Shared.Html.Sorter(ViewBag, "Policy No.", "PolicyNumber", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredRegisterNo;
                                @Shared.Html.Sorter(ViewBag, "Insured Register No.", "InsuredRegisterNo", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCampaignCode;
                                @Shared.Html.Sorter(ViewBag, "Campaign Code", "CampaignCode", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().ReinsBasisCodePickListDetailId)
                        </th>
                        <th class="w-10">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().InsuredGenderCodePickListDetailBo)
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredDateOfBirth;
                                @Shared.Html.Sorter(ViewBag, "Insured Date of Birth", "InsuredDateOfBirth", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredName;
                                @Shared.Html.Sorter(ViewBag, "Insured Name", "InsuredName", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortApLoading;
                                @Shared.Html.Sorter(ViewBag, "AP Loading", "ApLoading", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>
                    <tr>
                        @using (Html.BeginForm("Index", "RiDataCorrection", FormMethod.Get))
                        {
                            @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                            @Html.Hidden("TreatyCodeId", (string)routeValue["TreatyCodeId"])
                            <th>
                                @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @onchange = "getTreatyCode(this.value)" })
                            </th>
                            <th>
                                @Html.DropDownList("TreatyCodeIds", (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @multiple = "multiple", title = "Please select", @data_selected_text_format = "count > 1" })
                            </th>
                            <th>
                                @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredRegisterNo", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("CampaignCode", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("ReinsBasisCodeId", (List<SelectListItem>)ViewBag.DropDownReinsBasisCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("InsuredGenderCodeId", (List<SelectListItem>)ViewBag.DropDownInsuredGenderCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredDateOfBirth", null, new { id = "InsuredDateOfBirth", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                            </th>
                            <th>
                                @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("ApLoading", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Count > 0)
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (item.Cedant != null)
                                    {
                                        @item.Cedant.ToString()
                                    }
                                </td>
                                <td>
                                    @if (item.TreatyCode != null)
                                    {
                                        @item.TreatyCode.ToString()
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PolicyNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsuredRegisterNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CampaignCode)
                                </td>
                                <td>
                                    @if (item.ReinsBasisCodePickListDetail != null)
                                    {
                                        @item.ReinsBasisCodePickListDetail.ToString()
                                    }
                                </td>
                                <td>
                                    @if (item.InsuredGenderCodePickListDetail != null)
                                    {
                                        @item.InsuredGenderCodePickListDetail.ToString()
                                    }
                                </td>
                                <td>
                                    @if (item.InsuredDateOfBirth != null)
                                    {
                                        @item.InsuredDateOfBirth.Value.ToString(Shared.Util.GetDateFormat())
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsuredName)
                                </td>
                                <td class="text-right">
                                    @Shared.Util.DoubleToString(item.ApLoading)
                                </td>
                                <td class="text-center">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <span class="fas fa-ellipsis-v dropbtn" />
                                        </button>
                                        <div class="dropdown-menu">
                                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                            @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "dropdown-item" })
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" class="no-data">No available data found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        CedantId = routeValue["CedantId"],
                        TreatyCodeId = routeValue["TreatyCodeId"],
                        PolicyNumber = routeValue["PolicyNumber"],
                        InsuredRegisterNo = routeValue["InsuredRegisterNo"],
                        CampaignCode = routeValue["CampaignCode"],
                        ReinsBasisCodeId = routeValue["ReinsBasisCodeId"],
                        InsuredGenderCodeId = routeValue["InsuredGenderCodeId"],
                        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                        InsuredName = routeValue["InsuredName"],
                        ApLoading = routeValue["ApLoading"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var getTreatyCodeByCedantUrl = '@Url.Action("Index", "TreatyCode")';
        var selectedTreatyCode = '@ViewBag.routeValue["TreatyCodeId"]';

        $(document).ready(function () {
            dateOffAutoComplete();

            $('#InsuredDateOfBirth').datepicker({
                format: DateFormatDatePickerJs,
            });

            var cedantId = 0;
            if ($('#CedantId')[0].selectedIndex != 0) {
                cedantId = $('#CedantId').val();
            }
            getTreatyCode(cedantId);

            $('#TreatyCodeIds').on('change', function () {
                var arr = $(this).val().join(",");
                $('#TreatyCodeId').val(arr);
            });
        });

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        function getTreatyCode(selectedCedantId) {
            $.ajax({
                url: getTreatyCodeByCedantUrl,
                type: "POST",
                data: {
                    CedantId: selectedCedantId,
                    indexItem: true,
                    foreign: false
                },
                cache: false,
                async: false,
                success: function (data) {
                    var TreatyCodes = data.TreatyCodes;
                    refreshDropDownTreatyCodeItems('TreatyCodeIds', TreatyCodes, selectedTreatyCode, 'Code', 'Description');
                }
            });
        }

        function refreshDropDownTreatyCodeItems(id, items, selectedId, first, second = "", style = true) {
            $(`#${id} option`).remove();
            items.forEach(function (obj) {
                var text = obj[first];
                if (second && obj[second])
                    text += ` - ${obj[second]}`;
                $(`#${id}`).append(new Option(text, obj.Id, false));
            });
            if (selectedId !== '') {
                var selectedIdArr = selectedId.split(',');
                $(`#${id}`).selectpicker('val', selectedIdArr)
            }
            if (style) {
                $(`#${id}`).selectpicker('refresh');
            }
        }
    </script>
}