@model WebApp.Models.RateTableViewModel

@{
    ViewBag.Title = "Rate Table Mapping";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");
}


@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body">
        @Html.Partial("_LoadingSpinner")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.HiddenFor(model => model.Id)

                <div class="form-row">
                    <div class="col-md-6 mid-line-1">
                        <div class="col-form-label">
                            <span class="font-weight-bold">Parameters</span>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.CedantId, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getRelatedDropDown(this.value)" })
                            @Html.ValidationMessageFor(model => model.CedantId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="TreatyCode">Treaty Code <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.TreatyCode, new { htmlAttributes = new { id = "TreatyCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.TreatyCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="CedingTreatyCode">Ceding Treaty Code <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.CedingTreatyCode, new { htmlAttributes = new { id = "CedingTreatyCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.CedingTreatyCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="CedingPlanCode">Ceding Plan Code <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.CedingPlanCode, new { htmlAttributes = new { id = "CedingPlanCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.CedingPlanCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="CedingPlanCode2">Ceding Plan Code 2 <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.CedingPlanCode2, new { htmlAttributes = new { id = "CedingPlanCode2TokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.CedingPlanCode2, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="CedingBenefitTypeCode">Ceding Benefit Type Code <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.CedingBenefitTypeCode, new { htmlAttributes = new { id = "CedingBenefitTypeCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.CedingBenefitTypeCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="CedingBenefitRiskCode">Ceding Benefit Risk Code <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.CedingBenefitRiskCode, new { htmlAttributes = new { id = "CedingBenefitRiskCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.CedingBenefitRiskCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyTermFromStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">Year</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyTermFromStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyTermFromStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyTermToStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">Year</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyTermToStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyTermToStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyDurationFromStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">Month</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyDurationFromStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyDurationFromStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyDurationToStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">Month</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyDurationToStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyDurationToStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label class="col-form-label" for="GroupPolicyNumber">Group Policy Number <span class="sub-label">(Separated by Comma)</span></label>
                            @Html.EditorFor(model => model.GroupPolicyNumber, new { htmlAttributes = new { id = "GroupPolicyNumberTokenField", @class = "form-control", placeholder = "Type here" } })
                            @Html.ValidationMessageFor(model => model.GroupPolicyNumber, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.BenefitId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.BenefitId, (List<SelectListItem>)ViewBag.DropDownBenefits, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.BenefitId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ReinsEffDatePolStartDateStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-w-icon">
                                @Html.TextBoxFor(model => model.ReinsEffDatePolStartDateStr, new { id = "ReinsEffDatePolStartDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReinsEffDatePolStartDate')" />
                            </div>
                            @Html.ValidationMessageFor(model => model.ReinsEffDatePolStartDateStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ReinsEffDatePolEndDateStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-w-icon">
                                @Html.TextBoxFor(model => model.ReinsEffDatePolEndDateStr, new { id = "ReinsEffDatePolEndDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReinsEffDatePolEndDate')" />
                            </div>
                            @Html.ValidationMessageFor(model => model.ReinsEffDatePolEndDateStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ReportingStartDateStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-w-icon">
                                @Html.TextBoxFor(model => model.ReportingStartDateStr, new { id = "ReportingStartDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReportingStartDate')" />
                            </div>
                            @Html.ValidationMessageFor(model => model.ReportingStartDateStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ReportingEndDateStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-w-icon">
                                @Html.TextBoxFor(model => model.ReportingEndDateStr, new { id = "ReportingEndDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReportingEndDate')" />
                            </div>
                            @Html.ValidationMessageFor(model => model.ReportingEndDateStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AttainedAgeFrom, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.AttainedAgeFrom, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            @Html.ValidationMessageFor(model => model.AttainedAgeFrom, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AttainedAgeTo, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.AttainedAgeTo, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @min = "0" } })
                            @Html.ValidationMessageFor(model => model.AttainedAgeTo, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PremiumFrequencyCodePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.PremiumFrequencyCodePickListDetailId, (List<SelectListItem>)ViewBag.DropDownPremiumFrequencyCodes, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.PremiumFrequencyCodePickListDetailId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyAmountFromStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">MYR</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyAmountFromStr, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyAmountFromStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PolicyAmountToStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">MYR</div>
                                </div>
                                @Html.EditorFor(model => model.PolicyAmountToStr, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.PolicyAmountToStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AarFromStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">MYR</div>
                                </div>
                                @Html.EditorFor(model => model.AarFromStr, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.AarFromStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AarToStr, htmlAttributes: new { @class = "col-form-label" })
                            <div class="input-group mb-2">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">MYR</div>
                                </div>
                                @Html.EditorFor(model => model.AarToStr, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.AarToStr, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ReinsBasisCodePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.ReinsBasisCodePickListDetailId, (List<SelectListItem>)ViewBag.DropDownReinsBasisCodes, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.ReinsBasisCodePickListDetailId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6 mid-line-2">
                        <div class="col-form-label">
                            <span class="font-weight-bold">Mapped Values</span>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RateId, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.RateId, (List<SelectListItem>)ViewBag.DropDownRates, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.RateId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.RiDiscountCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.RiDiscountCode, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.RiDiscountCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LargeDiscountCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.LargeDiscountCode, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.LargeDiscountCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.GroupDiscountCode, htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownListFor(model => model.GroupDiscountCode, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.GroupDiscountCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        @Html.ActionLink("DELETE", "Delete", new { id = Model.Id }, new { @class = "btn btn-del" })
                        <button type="submit" class="btn btn-submit float-right">SAVE</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var CedingBenefitTypeCodes = @Html.Raw(Json.Encode(ViewBag.CedingBenefitTypeCodes));

        var getTreatyCodeByCedantUrl = '@Url.Action("CodeValue", "TreatyCode")';
        var getRiDiscountByCedantUrl = '@Url.Action("Index", "RiDiscount")';
        var getLargeDiscountByCedantUrl = '@Url.Action("Index", "LargeDiscount")';
        var getGroupDiscountByCedantUrl = '@Url.Action("Index", "GroupDiscount")';
        var selectedRiDiscount = '@Model.RiDiscountCode';
        var selectedLargeDiscount = '@Model.LargeDiscountCode';
        var selectedGroupDiscount = '@Model.GroupDiscountCode';
        var cedantId = '@Model.CedantId';
        var TreatyCodes = null;

        var treatyCodeCount = 0;
        var cedingTreatyCodeCount = 0;
        var cedingPlanCodeCount = 0;
        var cedingPlanCode2Count = 0;
        var cedingBenefitTypeCodeCount = 0;
        var cedingBenefitRiskCodeCount = 0;
        var groupPolicyNumberCount = 0;

        var tokenfieldReady = {
            treatyCode: false,
            cedingTreatyCode: false,
            cedingPlanCode: false,
            cedingPlanCode2: false,
            cedingBenefitTypeCode: false,
            cedingBenefitRiskCode: false,
            groupPolicyNumber: false,
        };

        var loadingDiv = $("#loadingSpinner");

        $(document).ready(function () {
            if ('@ViewBag.ReadOnly' == 'True') {
                $("input").prop("disabled", true);
                $("select").prop("disabled", true);
                $('#TreatyCodeTokenField').tokenfield('disable');
                $('#CedingPlanCodeTokenField').tokenfield('disable');
                $('button').prop("disabled", true);
                $('.selectpicker').selectpicker('refresh');
            }
        });
    </script>

    @Scripts.Render("~/Scripts/models/RateTableMapping.js")
}
