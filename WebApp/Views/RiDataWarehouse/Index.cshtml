@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.RiDataWarehouseViewModel>

@{
    ViewBag.Title = "RI Data Warehouse";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
    var disableDownload = ViewBag.DisableDownload != null ? ViewBag.DisableDownload : false;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Title</h4>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Index", "RiDataWarehouse", FormMethod.Get))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Search Parameters", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Snapshot Version", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("IsSnapshotVersion", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { id = "IsSnapshotVersion", @class = "form-control selectpicker", onchange = "isSnapshotOnChange(this.value)" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        <div id="CutOffIdDiv">
                            @Html.Label("Cut Off Quarter", htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownList("CutOffId", (List<SelectListItem>)ViewBag.DropDownCutOffs, htmlAttributes: new { id = "CutOffId", @class = "form-control selectpicker" })
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Ceding Company", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { id = "CedantId", @class = "form-control selectpicker", @onchange = "refreshTreatyCode(this.value)" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        &nbsp;
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Treaty Code", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("TreatyCode", new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("SOA Quarter", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("SoaQuarter", null, new { @class = "form-control", @onchange = "validateQuarter(this.value)", @onclick = "openQuarterPicker(this.id)", placeholder = "YYYY MM", autocomplete = "off", value = routeValue["SoaQuarter"] })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Risk Period Start Date", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBox("RiskPeriodStartDate", null, new { id = "RiskPeriodStartDate", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)", value = routeValue["RiskPeriodStartDate"] })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('RiskPeriodStartDate')" />
                        </div>
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Risk Period End Date", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBox("RiskPeriodEndDate", null, new { id = "RiskPeriodEndDate", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)", value = routeValue["RiskPeriodEndDate"] })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('RiskPeriodEndDate')" />
                        </div>
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Insured Name", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type Here", value = routeValue["InsuredName"] })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Number", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type Here", value = routeValue["PolicyNumber"] })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Insured Date of Birth", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBox("InsuredDateOfBirth", null, new { id = "InsuredDateOfBirth", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)", value = routeValue["InsuredDateOfBirth"] })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('InsuredDateOfBirth')" />
                        </div>
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Ceding Plan Code", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("CedingPlanCode", null, new { @class = "form-control", placeholder = "Type Here", maxlength = ViewBag.CedingPlanCodeMaxLength, value = routeValue["CedingPlanCode"] })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("MLRe Benefit Code", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("BenefitCode", new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Download data with header", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("WriteHeader", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", id = "WriteHeader" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12 text-right">
                        <a href="@Url.Action("Index")" class="btn btn-cancel mr-1" title="Clear">CLEAR</a>
                        <button type="submit" class="btn btn-submit">SEARCH</button>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Search Result", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12">
                        <div class="btn-group float-right">
                            <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" disabled="@disableDownload">
                                DOWNLOAD AS
                            </button>
                            <div class="dropdown-menu">
                                <button type="button" class="dropdown-item" onclick="downloadAllButton()">All</button>
                                <button type="button" class="dropdown-item" onclick="downloadFilteredButton()">Filtered</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortTreatyCodeFilter;
                                        @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortMlreBenefitCodeFilter;
                                        @Shared.Html.Sorter(ViewBag, "MLRe Benefit Code", "MlreBenefitCodeFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReinsBasisCode;
                                        @Shared.Html.Sorter(ViewBag, "Reinsurance Basis Code", "ReinsBasisCode", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortFundsAccountingTypeCode;
                                        @Shared.Html.Sorter(ViewBag, "Funds Accounting Type Code", "FundsAccountingTypeCode", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortPremiumFrequencyCode;
                                        @Shared.Html.Sorter(ViewBag, "Premium Frequency Code", "PremiumFrequencyCode", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReportPeriodMonth;
                                        @Shared.Html.Sorter(ViewBag, "Report Period Month", "ReportPeriodMonth", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReportPeriodYear;
                                        @Shared.Html.Sorter(ViewBag, "Report Period Year", "ReportPeriodYear", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortTransactionTypeCode;
                                        @Shared.Html.Sorter(ViewBag, "Transaction Type Code", "TransactionTypeCode", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortPolicyNumberFilter;
                                        @Shared.Html.Sorter(ViewBag, "Policy Number", "PolicyNumberFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortIssueDatePol;
                                        @Shared.Html.Sorter(ViewBag, "Issue Date Policy", "IssueDatePol", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortIssueDateBen;
                                        @Shared.Html.Sorter(ViewBag, "Issue Date Benefit", "IssueDateBen", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReinsEffDatePol;
                                        @Shared.Html.Sorter(ViewBag, "Reinsurance Effective Date Policy", "ReinsEffDatePol", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="text-center w-5">
                                    Action
                                </th>
                            </tr>

                            <tr>
                                @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                                <th>
                                    @Html.DropDownList("TreatyCodeFilter", (List<SelectListItem>)ViewBag.DropDownTreatyCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.DropDownList("BenefitCodeFilter", (List<SelectListItem>)ViewBag.DropDownBenefits, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.DropDownList("ReinsBasisCode", (List<SelectListItem>)ViewBag.DropDownReinsBasisCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.DropDownList("FundsAccountingTypeCode", (List<SelectListItem>)ViewBag.DropDownFundsAccountingTypeCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.DropDownList("PremiumFrequencyCode", (List<SelectListItem>)ViewBag.DropDownPremiumFrequencyCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.DropDownList("ReportPeriodMonth", (List<SelectListItem>)ViewBag.DropDownMonths, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.TextBox("ReportPeriodYear", null, new { @class = "form-control", placeholder = "YYYY", autocomplete = "off" })
                                </th>
                                <th>
                                    @Html.DropDownList("TransactionTypeCode", (List<SelectListItem>)ViewBag.DropDownTransactionTypeCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.TextBox("PolicyNumberFilter", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.TextBox("IssueDatePol", null, new { id = "IssueDatePol", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('IssueDatePol')" />
                                </th>
                                <th>
                                    @Html.TextBox("IssueDateBen", null, new { id = "IssueDateBen", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('IssueDateBen')" />
                                </th>
                                <th>
                                    @Html.TextBox("ReinsEffDatePol", null, new { id = "ReinsEffDatePol", @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('ReinsEffDatePol')" />
                                </th>
                                <th class="text-center align-middle">
                                    <div class="btn-row-action">
                                        <a href="@Url.Action("Index", new {
                                            IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                                            CutOffId = routeValue["CutOffId"],
                                            CedantId = routeValue["CedantId"],
                                            TreatyCode = routeValue["TreatyCode"],
                                            SoaQuarter = routeValue["SoaQuarter"],
                                            RiskPeriodStartDate = routeValue["RiskPeriodStartDate"],
                                            RiskPeriodEndDate = routeValue["RiskPeriodEndDate"],
                                            InsuredName = routeValue["InsuredName"],
                                            PolicyNumber = routeValue["PolicyNumber"],
                                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                                            CedingPlanCode = routeValue["CedingPlanCode"],
                                            BenefitCode = routeValue["BenefitCode"],
                                            })" class="btn btn-circle" title="Clear">
                                            <span class="fas fa-backspace" />
                                        </a>
                                        <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                    </div>
                                </th>
                            </tr>
                        </thead>

                        @if (Model.Count > 0)
                        {
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TreatyCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.MlreBenefitCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ReinsBasisCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.FundsAccountingTypeCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PremiumFrequencyCode)
                                    </td>
                                    <td class="text-right">
                                        @Html.DisplayFor(modelItem => item.ReportPeriodMonth)
                                    </td>
                                    <td class="text-right">
                                        @Html.DisplayFor(modelItem => item.ReportPeriodYear)
                                    </td>
                                    <td class="text-right">
                                        @Html.DisplayFor(modelItem => item.TransactionTypeCode)
                                    </td>
                                    <td class="text-right">
                                        @Html.DisplayFor(modelItem => item.PolicyNumber)
                                    </td>
                                    <td class="text-right">
                                        @if (item.IssueDatePol.HasValue)
                                        {
                                            @item.IssueDatePol.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td class="text-right">
                                        @if (item.IssueDateBen.HasValue)
                                        {
                                            @item.IssueDateBen.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td class="text-right">
                                        @if (item.ReinsEffDatePol.HasValue)
                                        {
                                            @item.ReinsEffDatePol.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td class="text-center">
                                        <a href="@Url.Action("Edit", new {
                                            id = item.Id,
                                            IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                                            CutOffId = routeValue["CutOffId"],
                                            CedantId = routeValue["CedantId"],
                                            TreatyCode = routeValue["TreatyCode"],
                                            SoaQuarter = routeValue["SoaQuarter"],
                                            RiskPeriodStartDate = routeValue["RiskPeriodStartDate"],
                                            RiskPeriodEndDate = routeValue["RiskPeriodEndDate"],
                                            InsuredName = routeValue["InsuredName"],
                                            PolicyNumber = routeValue["PolicyNumber"],
                                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                                            CedingPlanCode = routeValue["CedingPlanCode"],
                                            BenefitCode = routeValue["BenefitCode"],
                                            TreatyCodeFilter = routeValue["TreatyCodeFilter"],
                                            BenefitCodeFilter = routeValue["BenefitCodeFilter"],
                                            ReinsBasisCode = routeValue["ReinsBasisCode"],
                                            FundsAccountingTypeCode = routeValue["FundsAccountingTypeCode"],
                                            PremiumFrequencyCode = routeValue["PremiumFrequencyCode"],
                                            ReportPeriodMonth = routeValue["ReportPeriodMonth"],
                                            ReportPeriodYear = routeValue["ReportPeriodYear"],
                                            TransactionTypeCode = routeValue["TransactionTypeCode"],
                                            PolicyNumberFilter = routeValue["PolicyNumberFilter"],
                                            IssueDatePol = routeValue["IssueDatePol"],
                                            IssueDateBen = routeValue["IssueDateBen"],
                                            ReinsEffDatePol = routeValue["ReinsEffDatePol"],
                                        })" class="bg-transparent linkbtn"><span class="fas fa-eye"></span></a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="12" class="no-data">No available data found.</td>
                            </tr>
                        }

                    </table>
                </div>
            </div>
        }

        <div class="pagination-footer btn-row">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                        CutOffId = routeValue["CutOffId"],
                        CedantId = routeValue["CedantId"],
                        TreatyCode = routeValue["TreatyCode"],
                        SoaQuarter = routeValue["SoaQuarter"],
                        RiskPeriodStartDate = routeValue["RiskPeriodStartDate"],
                        RiskPeriodEndDate = routeValue["RiskPeriodEndDate"],
                        InsuredName = routeValue["InsuredName"],
                        PolicyNumber = routeValue["PolicyNumber"],
                        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                        CedingPlanCode = routeValue["CedingPlanCode"],
                        BenefitCode = routeValue["BenefitCode"],
                        TreatyCodeFilter = routeValue["TreatyCodeFilter"],
                        BenefitCodeFilter = routeValue["BenefitCodeFilter"],
                        ReinsBasisCode = routeValue["ReinsBasisCode"],
                        FundsAccountingTypeCode = routeValue["FundsAccountingTypeCode"],
                        PremiumFrequencyCode = routeValue["PremiumFrequencyCode"],
                        ReportPeriodMonth = routeValue["ReportPeriodMonth"],
                        ReportPeriodYear = routeValue["ReportPeriodYear"],
                        TransactionTypeCode = routeValue["TransactionTypeCode"],
                        PolicyNumberFilter = routeValue["PolicyNumberFilter"],
                        IssueDatePol = routeValue["IssueDatePol"],
                        IssueDateBen = routeValue["IssueDateBen"],
                        ReinsEffDatePol = routeValue["ReinsEffDatePol"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        var TreatyCodes = @Html.Raw(Json.Encode(ViewBag.TreatyCodes));
        var BenefitCodes = @Html.Raw(Json.Encode(ViewBag.BenefitCodes));
        var benefitCodeCount = 0;
        var treatyCodeCount = 0;
        var routeValue = @Html.Raw(Json.Encode(@routeValue));
        var DownloadUrl = "@(Url.Action("Download"))";
        var getTreatyCodeByCedantUrl = '@Url.Action("CodeValue", "TreatyCode")';

        $(document).ready(function () {
            dateOffAutoComplete();

            initializeTokenField('#TreatyCode', TreatyCodes, 'treatyCodeCount');
            initializeTokenField('#BenefitCode', BenefitCodes, 'benefitCodeCount');

            isSnapshotOnChange($('#IsSnapshotVersion').val());

            if (routeValue) {
                var cedantList = routeValue.find(function (list) { return list.Key == "CedantId"; })
                if (cedantList && cedantList.Value)
                    refreshTreatyCode(cedantList.Value, false);
            }
        });

        function validateQuarter(qtr) {
            if (qtr == null || qtr == "")
                return;
            if (!/[0-9]{4} Q{1}([1-4]){1}/.test(qtr)) {
                $("#SoaQuarter").val(null);
                alert("SOA Quarter format is incorrect");
            }
        }

        function downloadAllButton() {
            var url = DownloadUrl;
            var writeHeaderVal = $('#WriteHeader').val();
            url = url + "?" + "WriteHeader" + "=" + writeHeaderVal;

            var isLastHeaderParam = false;
            routeValue.forEach(function (entry, index) {
                if (!isLastHeaderParam) {
                    if (entry.Value) {
                        url = url + "&" + entry.Key + "=" + entry.Value;
                    }
                    isLastHeaderParam = entry.Key == "BenefitCode";
                }
            });
            return window.open(url, '_blank');
        }

        function downloadFilteredButton() {
            var url = DownloadUrl;
            var writeHeaderVal = $('#WriteHeader').val();
            url = url + "?" + "WriteHeader" + "=" + writeHeaderVal;

            var count = routeValue.length;
            routeValue.forEach(function (entry, index) {
                if (index < count - 1) {
                    if (entry.Value) {
                        url = url + "&" + entry.Key + "=" + entry.Value;
                    }
                }
            });
            return window.open(url, '_blank');
        }

        function refreshTreatyCode(cedantId, isReset = true) {
            $.ajax({
                url: getTreatyCodeByCedantUrl,
                type: "POST",
                data: {
                    CedantId: cedantId,
                },
                cache: false,
                async: false,
                success: function (data) {
                    if (isReset)
                        $('#TreatyCode').val(null);

                    TreatyCodes = data.TreatyCodes;
                    if (typeof $('#TreatyCode').data('bs.tokenfield') != "undefined") {
                        if (isReset)
                            $('#TreatyCode').tokenfield('setTokens', []);
                        $('#TreatyCode').data('bs.tokenfield').$input.autocomplete({ source: TreatyCodes });
                    }
                }
            });
        }

        function isSnapshotOnChange(bl) {
            $('#CutOffIdDiv').hide();
            if (bl == "true") {
                $('#CutOffIdDiv').show();
                if (!$('#CutOffId').val()) {
                    if ($("#CutOffId option:eq(1)") != null) {
                        $("#CutOffId option:eq(1)").attr('selected', 'selected');
                    }
                }
                $('#CutOffId').selectpicker('refresh');
            }
        }
    </script>
}