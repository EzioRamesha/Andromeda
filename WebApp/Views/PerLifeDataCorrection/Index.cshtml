@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.PerLifeDataCorrectionViewModel>

@{
    ViewBag.Title = "Per Life Data Correction";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
    {
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="file btn btn-upload" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                    <label>UPLOAD</label>
                    @using (Html.BeginForm("Upload", "PerLifeDataCorrection", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="file" id="dataFile" name="upload" accept=".csv" onchange="this.form.submit()" />
                    }
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                        {
                            type = 2,
                            TreatyCodeId = routeValue["TreatyCodeId"],
                            InsuredName = routeValue["InsuredName"],
                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                            PolicyNumber = routeValue["PolicyNumber"],
                            InsuredGenderCodePickListDetailId = routeValue["InsuredGenderCodePickListDetailId"],
                            TerritoryOfIssueCodePickListDetailId = routeValue["TerritoryOfIssueCodePickListDetailId"],
                            PerLifeRetroGenderId = routeValue["PerLifeRetroGenderId"],
                            PerLifeRetroCountryId = routeValue["PerLifeRetroCountryId"],
                            DateOfExceptionDetected = routeValue["DateOfExceptionDetected"],
                            DateOfPolicyExist = routeValue["DateOfPolicyExist"],
                            IsProceedToAggregate = routeValue["IsProceedToAggregate"],
                            DateUpdated = routeValue["DateUpdated"],
                            ExceptionStatusPickListDetailId = routeValue["ExceptionStatusPickListDetailId"],
                        }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Template", "Download", new { type = 3 }, new { @class = "dropdown-item" })
                    </div>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-add">
                    ADD NEW
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyCodeId;
                                @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredName;
                                @Shared.Html.Sorter(ViewBag, "Insured Name", "InsuredName", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredDateOfBirth;
                                @Shared.Html.Sorter(ViewBag, "Insured Date of Birth", "InsuredDateOfBirth", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPolicyNumber;
                                @Shared.Html.Sorter(ViewBag, "Policy Number", "PolicyNumber", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredGenderCodePickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Org Gender Code", "InsuredGenderCodePickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTerritoryOfIssueCodePickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Org Territory of Issue ID", "TerritoryOfIssueCodePickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPerLifeRetroGenderId;
                                @Shared.Html.Sorter(ViewBag, "Expected Gender Code", "PerLifeRetroGenderId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPerLifeRetroCountryId;
                                @Shared.Html.Sorter(ViewBag, "Expected Territory of Issue ID", "PerLifeRetroCountryId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfExceptionDetected;
                                @Shared.Html.Sorter(ViewBag, "Date of Exception Detected", "DateOfExceptionDetected", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfPolicyExist;
                                @Shared.Html.Sorter(ViewBag, "1st Date of The Policy Exist In The System", "DateOfPolicyExist", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsProceedToAggregate;
                                @Shared.Html.Sorter(ViewBag, "Proceed to Aggregate", "IsProceedToAggregate", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateUpdated;
                                @Shared.Html.Sorter(ViewBag, "Date Updated", "DateUpdated", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortExceptionStatusPickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Exception Status", "ExceptionStatusPickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().Remark)
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "PerLifeDataCorrection", FormMethod.Get))
                        {
                            string sortOrder = ViewBag.SortOrder;

                            @Html.Hidden("SortOrder", sortOrder)
                            <th>
                                @Html.DropDownList("TreatyCodeId", (List<SelectListItem>)ViewBag.DropDownTreatyCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredDateOfBirth", null, new { id = "InsuredDateOfBirth", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                            </th>
                            <th>
                                @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("InsuredGenderCodePickListDetailId", (List<SelectListItem>)ViewBag.DropDownInsuredGenderCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("TerritoryOfIssueCodePickListDetailId", (List<SelectListItem>)ViewBag.DropDownTerritoryOfIssueCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PerLifeRetroGenderId", (List<SelectListItem>)ViewBag.DropDownPerLifeRetroGenders, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PerLifeRetroCountryId", (List<SelectListItem>)ViewBag.DropDownPerLifeRetroCountries, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("DateOfExceptionDetected", null, new { id = "DateOfExceptionDetected", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfExceptionDetected')" />
                            </th>
                            <th>
                                @Html.TextBox("DateOfPolicyExist", null, new { id = "DateOfPolicyExist", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfPolicyExist')" />
                            </th>
                            <th>
                                @Html.DropDownList("IsProceedToAggregate", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("DateUpdated", null, new { id = "DateUpdated", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateUpdated')" />
                            </th>
                            <th>
                                @Html.DropDownList("ExceptionStatusPickListDetailId", (List<SelectListItem>)ViewBag.DropDownExceptionStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>

                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @if (item.TreatyCode != null)
                                {
                                    @item.TreatyCode.ToString()
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.InsuredName)
                            </td>
                            <td>
                                @if (item.InsuredDateOfBirth.HasValue)
                                {
                                    @item.InsuredDateOfBirth.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PolicyNumber)
                            </td>
                            <td>
                                @if (item.InsuredGenderCodePickListDetail != null)
                                {
                                    @item.InsuredGenderCodePickListDetail.ToString()
                                }
                            </td>
                            <td>
                                @if (item.TerritoryOfIssueCodePickListDetail != null)
                                {
                                    @item.TerritoryOfIssueCodePickListDetail.ToString()
                                }
                            </td>
                            <td>
                                @if (item.PerLifeRetroGender != null)
                                {
                                    @item.PerLifeRetroGender.ToString()
                                }
                            </td>
                            <td>
                                @if (item.PerLifeRetroCountry != null)
                                {
                                    @item.PerLifeRetroCountry.ToString()
                                }
                            </td>
                            <td>
                                @if (item.DateOfExceptionDetected.HasValue)
                                {
                                    @item.DateOfExceptionDetected.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.DateOfPolicyExist.HasValue)
                                {
                                    @item.DateOfPolicyExist.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.IsProceedToAggregate)
                                {
                                    @Html.Raw("Yes")
                                }
                                else
                                {
                                    @Html.Raw("No")
                                }
                            </td>
                            <td>
                                @if (item.DateUpdated.HasValue)
                                {
                                    @item.DateUpdated.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.ExceptionStatusPickListDetail != null)
                                {
                                    @item.ExceptionStatusPickListDetail.ToString()
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Remark)
                            </td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="fas fa-ellipsis-v dropbtn" />
                                    </button>
                                    <div class="dropdown-menu">
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                        @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "dropdown-item" })
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="15" class="no-data">No available data found.</td>
                    </tr>
                }

            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        TreatyCodeId = routeValue["TreatyCodeId"],
                        InsuredName = routeValue["InsuredName"],
                        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                        PolicyNumber = routeValue["PolicyNumber"],
                        InsuredGenderCodePickListDetailId = routeValue["InsuredGenderCodePickListDetailId"],
                        TerritoryOfIssueCodePickListDetailId = routeValue["TerritoryOfIssueCodePickListDetailId"],
                        PerLifeRetroGenderId = routeValue["PerLifeRetroGenderId"],
                        PerLifeRetroCountryId = routeValue["PerLifeRetroCountryId"],
                        DateOfExceptionDetected = routeValue["DateOfExceptionDetected"],
                        DateOfPolicyExist = routeValue["DateOfPolicyExist"],
                        IsProceedToAggregate = routeValue["IsProceedToAggregate"],
                        DateUpdated = routeValue["DateUpdated"],
                        ExceptionStatusPickListDetailId = routeValue["ExceptionStatusPickListDetailId"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        $(document).ready(function () {
            dateOffAutoComplete();

            $('#InsuredDateOfBirth, #DateOfExceptionDetected, #DateOfPolicyExist, #DateUpdated').datepicker({
                format: DateFormatDatePickerJs,
            });
        });

        function focusOnDate(val) {
            $('#' + val).focus();
        }
    </script>
}

