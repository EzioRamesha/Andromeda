@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.ClaimRegisterViewModel>

@{
    ViewBag.Title = "Claim Register";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
    bool readOnly = ViewBag.ReadOnly == null ? false : ViewBag.ReadOnly;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                @if (readOnly)
                {
                    <div class="file btn btn-upload disabled" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                         <label>UPLOAD</label>
                    </div>
                }
                else
                {
                    <div class="file btn btn-upload" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                        <label>UPLOAD</label>
                        @using (Html.BeginForm("Upload", "ClaimRegister", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            <input type="file" id="dataFile" name="upload" accept=".csv" onchange="this.form.submit()" />
                        }
                    </div>
                }
                <div class="btn-group">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                       {
                           Type = 2,
                           EntryNo = routeValue["EntryNo"],
                           SoaQuarter = routeValue["SoaQuarter"],
                           ClaimId = routeValue["ClaimId"],
                           ClaimTransactionType = routeValue["ClaimTransactionType"],
                           IsReferralCase = routeValue["IsReferralCase"],
                           RiDataWarehouseId = routeValue["RiDataWarehouseId"],
                           RecordType = routeValue["RecordType"],
                           TreatyCodeId = routeValue["TreatyCodeId"],
                           PolicyNumber = routeValue["PolicyNumber"],
                           CedantId = routeValue["CedantId"],
                           InsuredName = routeValue["InsuredName"],
                           InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                           LastTransactionDate = routeValue["LastTransactionDate"],
                           DateOfReported = routeValue["DateOfReported"],
                           CedantDateOfNotification = routeValue["CedantDateOfNotification"],
                           DateOfRegister = routeValue["DateOfRegister"],
                           DateOfCommencement = routeValue["DateOfCommencement"],
                           DateOfEvent = routeValue["DateOfEvent"],
                           PolicyDuration = routeValue["PolicyDuration"],
                           TargetDateToIssueInvoice = routeValue["TargetDateToIssueInvoice"],
                           ClaimRecoveryAmt = routeValue["ClaimRecoveryAmt"],
                           CauseOfEvent = routeValue["CauseOfEvent"],
                           PicClaimId = routeValue["PicClaimId"],
                           PicDaaId = routeValue["PicDaaId"],
                           ClaimStatus = routeValue["ClaimStatus"],
                           DuplicationCheckStatus = routeValue["DuplicationCheckStatus"],
                           ProvisionStatus = routeValue["ProvisionStatus"],
                           OffsetStatus = routeValue["OffsetStatus"],
                       }, new { @class = "dropdown-item" })
                    </div>
                </div>
                @if (readOnly)
                {
                    <span class="btn btn-add disabled">ADD NEW</span>
                }
                else
                {
                    <a href="@Url.Action("Create")" class="btn btn-add">ADD NEW</a>
                }
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-5">Red Flag</th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortEntryNo;
                                @Shared.Html.Sorter(ViewBag, "Entry No", "EntryNo", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortSoaQuarter;
                                @Shared.Html.Sorter(ViewBag, "SOA Quarter", "SoaQuarter", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortClaimId;
                                @Shared.Html.Sorter(ViewBag, "Claim ID", "ClaimId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortClaimTransactionType;
                                @Shared.Html.Sorter(ViewBag, "Claim Transaction Type", "ClaimTransactionType", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsReferralCase;
                                @Shared.Html.Sorter(ViewBag, "Referral Case Indicator", "IsReferralCase", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortRiDataWarehouseId;
                                @Shared.Html.Sorter(ViewBag, "RI Data ID", "RiDataWarehouseId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortRecordType;
                                @Shared.Html.Sorter(ViewBag, "Record Type", "RecordType", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyCodeId;
                                @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPolicyNumber;
                                @Shared.Html.Sorter(ViewBag, "Policy Number", "PolicyNumber", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedantId;
                                @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedantId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredName;
                                @Shared.Html.Sorter(ViewBag, "Insured Name", "InsuredName", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredDateOfBirth;
                                @Shared.Html.Sorter(ViewBag, "Insured Date of Birth", "InsuredDateOfBirth", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortLastTransactionDate;
                                @Shared.Html.Sorter(ViewBag, "Last Transaction Date", "LastTransactionDate", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfReported;
                                @Shared.Html.Sorter(ViewBag, "Date of Reported", "DateOfReported", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedantDateOfNotification;
                                @Shared.Html.Sorter(ViewBag, "Cedant Date of Notification", "CedantDateOfNotification", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfRegister;
                                @Shared.Html.Sorter(ViewBag, "Date of Register", "DateOfRegister", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfCommencement;
                                @Shared.Html.Sorter(ViewBag, "Date of Commencement", "DateOfCommencement", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDateOfEvent;
                                @Shared.Html.Sorter(ViewBag, "Date of Event", "DateOfEvent", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPolicyDuration;
                                @Shared.Html.Sorter(ViewBag, "Policy Duration", "PolicyDuration", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTargetDateToIssueInvoice;
                                @Shared.Html.Sorter(ViewBag, "Target Date to Issue Invoice", "TargetDateToIssueInvoice", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortClaimRecoveryAmt;
                                @Shared.Html.Sorter(ViewBag, "Claim Recovery Amount (MYR)", "ClaimRecoveryAmt", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCauseOfEvent;
                                @Shared.Html.Sorter(ViewBag, "Cause of Event", "CauseOfEvent", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPicClaimId;
                                @Shared.Html.Sorter(ViewBag, "Person In-Charge (Claims)", "PicClaimId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPicDaaId;
                                @Shared.Html.Sorter(ViewBag, "Person In-Charge (DA&A)", "PicDaaId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortClaimStatus;
                                @Shared.Html.Sorter(ViewBag, "Claim Status", "ClaimStatus", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDuplicationCheckStatus;
                                @Shared.Html.Sorter(ViewBag, "Duplication Check Status", "DuplicationCheckStatus", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortProvisionStatus;
                                @Shared.Html.Sorter(ViewBag, "Provision Status", "ProvisionStatus", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortOffsetStatus;
                                @Shared.Html.Sorter(ViewBag, "Offset Status", "OffsetStatus", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "ClaimRegister", FormMethod.Get))
                        {
                            string sortOrder = ViewBag.SortOrder;

                            @Html.Hidden("SortOrder", sortOrder)
                            <th>
                            </th>
                            <th>
                                @Html.TextBox("EntryNo", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("SoaQuarter", null, new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off", @onclick = "openQuarterPicker(this.id)" })
                            </th>
                            <th>
                                @Html.TextBox("ClaimId", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("ClaimTransactionType", (List<SelectListItem>)ViewBag.DropDownClaimTransactionTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("IsReferralCase", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("RiDataWarehouseId", null, new { @class = "form-control", placeholder = "Type here", @type = "number", min = "0" })
                            </th>
                            <th>
                                @Html.TextBox("RecordType", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("TreatyCodeId", (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @onchange = "getTreatyCodeByCedant(this.value)" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredDateOfBirth", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                            </th>
                            <th>
                                @Html.TextBox("LastTransactionDate", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('LastTransactionDate')" />
                            </th>
                            <th>
                                @Html.TextBox("DateOfReported", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfReported')" />
                            </th>
                            <th>
                                @Html.TextBox("CedantDateOfNotification", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('CedantDateOfNotification')" />
                            </th>
                            <th>
                                @Html.TextBox("DateOfRegister", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfRegister')" />
                            </th>
                            <th>
                                @Html.TextBox("DateOfCommencement", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfCommencement')" />
                            </th>
                            <th>
                                @Html.TextBox("DateOfEvent", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfEvent')" />
                            </th>
                            <th>
                                @Html.TextBox("PolicyDuration", null, new { @class = "form-control", placeholder = "Type here", @type = "number", min = "0" })
                            </th>
                            <th>
                                @Html.TextBox("TargetDateToIssueInvoice", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('TargetDateToIssueInvoice')" />
                            </th>
                            <th>
                                @Html.TextBox("ClaimRecoveryAmt", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("CauseOfEvent", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("PicClaimId", (List<SelectListItem>)ViewBag.DropDownPicClaims, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PicDaaId", (List<SelectListItem>)ViewBag.DropDownPicDaas, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("ClaimStatus", (List<SelectListItem>)ViewBag.DropDownClaimStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("DuplicationCheckStatus", (List<SelectListItem>)ViewBag.DropDownDuplicationCheckStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("ProvisionStatus", (List<SelectListItem>)ViewBag.DropDownProvisionStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("OffsetStatus", (List<SelectListItem>)ViewBag.DropDownOffsetStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @if (item.HasRedFlag)
                                {
                                    <i class="fas fa-flag"></i>
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.EntryNo)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SoaQuarter)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ClaimId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ClaimTransactionType)
                            </td>
                            <td>
                                @if (item.IsReferralCase)
                                {
                                    @Html.Raw("Yes");
                                }
                                else
                                {
                                    @Html.Raw("No");
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RiDataWarehouseId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.RecordType)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TreatyCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PolicyNumber)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CedingCompany)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.InsuredName)
                            </td>
                            <td>
                                @if (item.InsuredDateOfBirth.HasValue)
                                {
                                    @item.InsuredDateOfBirth.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.LastTransactionDate.HasValue)
                                {
                                    @item.LastTransactionDate.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.DateOfReported.HasValue)
                                {
                                    @item.DateOfReported.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.CedantDateOfNotification.HasValue)
                                {
                                    @item.CedantDateOfNotification.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.DateOfRegister.HasValue)
                                {
                                    @item.DateOfRegister.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.ReinsEffDatePol.HasValue)
                                {
                                    @item.ReinsEffDatePol.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @if (item.DateOfEvent.HasValue)
                                {
                                    @item.DateOfEvent.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PolicyDuration)
                            </td>
                            <td>
                                @if (item.TargetDateToIssueInvoice.HasValue)
                                {
                                    @item.TargetDateToIssueInvoice.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @Shared.Util.DoubleToString(item.ClaimRecoveryAmt, 2)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CauseOfEvent)
                            </td>
                            <td>
                                @if (item.PicClaim != null)
                                {
                                    @Html.DisplayFor(modelItem => item.PicClaim.FullName)
                                }
                            </td>
                            <td>
                                @if (item.PicDaa != null)
                                {
                                    @Html.DisplayFor(modelItem => item.PicDaa.FullName)
                                }
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.ClaimRegisterBo.GetStatusClass(item.ClaimStatus)">
                                    @BusinessObject.ClaimRegisterBo.GetStatusName(item.ClaimStatus)
                                </span>
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.ClaimRegisterBo.GetDuplicationCheckStatusClass(item.DuplicationCheckStatus)">
                                    @BusinessObject.ClaimRegisterBo.GetDuplicationCheckStatusName(item.DuplicationCheckStatus)
                                </span>
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.ClaimRegisterBo.GetProvisionStatusClass(item.ProvisionStatus)">
                                    @BusinessObject.ClaimRegisterBo.GetProvisionStatusName(item.ProvisionStatus)
                                </span>
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.ClaimRegisterBo.GetOffsetStatusClass(item.OffsetStatus)">
                                    @BusinessObject.ClaimRegisterBo.GetOffsetStatusName(item.OffsetStatus)
                                </span>
                            </td>
                            <td class="text-center">
                                <a href="@Url.Action("Edit", new { id = item.Id })">
                                    <span class="fas fa-pencil-alt"></span>
                                </a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="29" class="no-data">No available data found.</td>
                    </tr>
                }
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                   {
                       EntryNo = routeValue["EntryNo"],
                       SoaQuarter = routeValue["SoaQuarter"],
                       ClaimId = routeValue["ClaimId"],
                       ClaimTransactionType = routeValue["ClaimTransactionType"],
                       IsReferralCase = routeValue["IsReferralCase"],
                       RiDataWarehouseId = routeValue["RiDataWarehouseId"],
                       RecordType = routeValue["RecordType"],
                       TreatyCodeId = routeValue["TreatyCodeId"],
                       PolicyNumber = routeValue["PolicyNumber"],
                       CedantId = routeValue["CedantId"],
                       InsuredName = routeValue["InsuredName"],
                       InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                       LastTransactionDate = routeValue["LastTransactionDate"],
                       DateOfReported = routeValue["DateOfReported"],
                       CedantDateOfNotification = routeValue["CedantDateOfNotification"],
                       DateOfRegister = routeValue["DateOfRegister"],
                       DateOfCommencement = routeValue["DateOfCommencement"],
                       DateOfEvent = routeValue["DateOfEvent"],
                       PolicyDuration = routeValue["PolicyDuration"],
                       TargetDateToIssueInvoice = routeValue["TargetDateToIssueInvoice"],
                       ClaimRecoveryAmt = routeValue["ClaimRecoveryAmt"],
                       CauseOfEvent = routeValue["CauseOfEvent"],
                       PicClaimId = routeValue["PicClaimId"],
                       PicDaaId = routeValue["PicDaaId"],
                       ClaimStatus = routeValue["ClaimStatus"],
                       DuplicationCheckStatus = routeValue["DuplicationCheckStatus"],
                       ProvisionStatus = routeValue["ProvisionStatus"],
                       OffsetStatus = routeValue["OffsetStatus"],
                       SortOrder = ViewBag.SortOrder,
                       Page,
                   }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        var TreatyCodes = @Html.Raw(Json.Encode(ViewBag.TreatyCodes));
        var GetTreatyCodeByCedantUrl = '@Url.Action("Index", "TreatyCode")';

        $(document).ready(function () {
            dateOffAutoComplete();

            var treatyCodeId = '@routeValue["TreatyCodeId"]';
            getTreatyCodeByCedant($('#CedantId').val(), treatyCodeId);
        });

        function getTreatyCodeByCedant(cedantId, treatyCodeId = null) {
            if (cedantId == null || cedantId == 'Please select') {
                refreshDropDownItems('TreatyCodeId', TreatyCodes, treatyCodeId, 'Code', 'Description');
                return;
            }

            $.ajax({
                url: GetTreatyCodeByCedantUrl,
                type: "POST",
                data: {
                    CedantId: cedantId,
                    SelectedId: treatyCodeId
                },
                cache: false,
                async: false,
                success: function (data) {
                    var treatyCodes = data.TreatyCodes;
                    refreshDropDownItems('TreatyCodeId', treatyCodes, treatyCodeId, 'Code', 'Description');
                }
            });
        }
    </script>
}