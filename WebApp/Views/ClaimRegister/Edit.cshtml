@model WebApp.Models.ClaimRegisterViewModel

@{
    ViewBag.Title = "Claim Register";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");
    bool readOnly = ViewBag.ReadOnly == null ? false : ViewBag.ReadOnly;
    bool enableSaveOnly = ViewBag.EnableSaveOnly == null ? false : ViewBag.EnableSaveOnly;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")
@Html.Partial("_LoadingSpinner")

<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.ClaimRegisterBo.GetOffsetStatusClass(Model.OffsetStatus) mr-2">
                    @BusinessObject.ClaimRegisterBo.GetOffsetStatusName(Model.OffsetStatus)
                </span>
                <span class="@BusinessObject.ClaimRegisterBo.GetProvisionStatusClass(Model.ProvisionStatus) mr-2">
                    @BusinessObject.ClaimRegisterBo.GetProvisionStatusName(Model.ProvisionStatus)
                </span>
                <span class="@BusinessObject.ClaimRegisterBo.GetStatusClass(Model.ClaimStatus)">
                    @BusinessObject.ClaimRegisterBo.GetStatusName(Model.ClaimStatus)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.ClaimStatus)
            @Html.HiddenFor(model => model.ProvisionStatus)
            @Html.HiddenFor(model => model.DrProvisionStatus)
            @Html.HiddenFor(model => model.OffsetStatus)
            @Html.HiddenFor(model => model.DuplicationCheckStatus)
            @Html.HiddenFor(model => model.IsReferralCase)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.SoaQuarter, htmlAttributes: new { @class = "col-form-label" })
                        @if (Model.IsReferralCase)
                        {
                            @Html.TextBoxFor(model => model.SoaQuarter, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "YYYY MM" }, { "readonly", true }, { @"v-model.lazy", @"ClaimRegister.SoaQuarter" } })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.SoaQuarter, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "YYYY MM" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('SoaQuarter')" }, { @"v-model.lazy", @"ClaimRegister.SoaQuarter" } })
                        }
                        @Html.ValidationMessageFor(model => model.SoaQuarter, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.CedingCompany, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CedingCompany, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getRelatedDropDown(this.value)", @v_model = "ClaimRegister.CedingCompany" })
                        @Html.ValidationMessageFor(model => model.CedingCompany, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.IsReferralCase, htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch  pl-2">
                                @Html.EditorFor(model => model.IsReferralCase, new { htmlAttributes = new { @class = "custom-control-input", @id = "IsReferralCase", @v_model = "ClaimRegister.IsReferralCase", @disabled = "disabled" } })
                                <label class="custom-control-label" for="IsReferralCase">Yes</label>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.IsReferralCase, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.TreatyCode, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "ClaimRegister.TreatyCode" })
                        @Html.ValidationMessageFor(model => model.TreatyCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ClaimDataConfigId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ClaimDataConfigId, (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "ClaimRegister.ClaimDataConfigId" })
                        @Html.ValidationMessageFor(model => model.ClaimDataConfigId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ClaimTransactionType, htmlAttributes: new { @class = "col-form-label" })
                        @if (Model.ClaimTransactionType == BusinessObject.PickListDetailBo.ClaimTransactionTypeBulk)
                        {
                            @Html.EditorFor(model => model.ClaimTransactionType, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.ClaimTransactionType, (List<SelectListItem>)ViewBag.DropDownClaimTransactionTypes, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "ClaimRegister.ClaimTransactionType" })
                        }
                        @Html.ValidationMessageFor(model => model.ClaimTransactionType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedingClaimType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.CedingClaimType, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here", @v_model = "ClaimRegister.CedingClaimType" } })
                        @Html.ValidationMessageFor(model => model.CedingClaimType, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.CedingEventCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.CedingEventCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here", @v_model = "ClaimRegister.CedingEventCode" } })
                        @Html.ValidationMessageFor(model => model.CedingEventCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PicClaimId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.PicClaimBo.FullName, new { htmlAttributes = new { @class = "form-control", placeholder = "Type Here", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.PicClaimId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PicDaaId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.PicDaaId, (List<SelectListItem>)ViewBag.DropDownPicDaas, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.PicDaaId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.MlreEventCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.MlreEventCode, (List<SelectListItem>)ViewBag.DropDownEventCodes, htmlAttributes: new { @class = "form-control selectpicker", @v_model = "ClaimRegister.MlreEventCode" })
                        @Html.ValidationMessageFor(model => model.MlreEventCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ProcessingStatus, htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.ClaimRegisterBo.GetProcessingStatusName(Model.ProcessingStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.DuplicationCheckStatus, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            <input type="text" readonly class="form-control" value="@BusinessObject.ClaimRegisterBo.GetDuplicationCheckStatusName(Model.DuplicationCheckStatus)">
                            @if (Model.DuplicationCheckStatus == BusinessObject.ClaimRegisterBo.DuplicationCheckStatusHasDuplicate)
                            {
                                <div class="input-group-prepend">
                                    <button type="button" class="input-group-text prevent-disable" data-toggle="modal" data-target="#duplicateClaimsDataModal">VIEW DUPLICATE</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PostComputationStatus, htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.ClaimRegisterBo.GetPostComputationStatusName(Model.PostComputationStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PostValidationStatus, htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.ClaimRegisterBo.GetPostValidationStatusName(Model.PostValidationStatus)">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ProcessingErrors, htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="3" readonly style="resize: none;">@Model.ProcessingErrors</textarea>
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PostComputationErrors, htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="3" readonly style="resize: none;">@Model.PostComputationErrors</textarea>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PostValidationErrors, htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="3" readonly style="resize: none;">@Model.PostValidationErrors</textarea>
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        <div class="col-form-label pb-0 font-weight-bold">Claims Data</div>
                        @Html.Label("Claims Data Mapping Status", htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.OriginalClaimRegisterId)
                        <div class="input-group">
                            <input class="form-control" id="ClaimRegisterStr" readonly value="" />
                            <div class="input-group-prepend">
                                <button type="button" class="input-group-text" data-toggle="modal" data-target="#matchClaimsDataModal" v-on:click="resetMatchClaimData()">MATCH CLAIMS DATA</button>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.OriginalClaimRegisterId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        <div class="col-form-label pb-0 font-weight-bold">SOA Data</div>
                        @Html.Label("SOA Data Mapping Status", htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.SoaDataBatchId)
                        <div class="input-group">
                            <input class="form-control" id="SoaDataStr" readonly value="" />
                            @if (!Model.IsReferralCase)
                            {
                                <div class="input-group-prepend">
                                    <button class="btn btn-generate prevent-disable" type="button" v-on:click="viewSoaDataBatch()" :disabled="!ClaimRegister.SoaDataBatchId"><i class="fas fa-search"></i></button>
                                    <input type="button" class="btn btn-generate" id="matchSoaData" data-toggle="modal" data-target="#matchSoaDataModal" value="Match SOA Data" v-on:click="searchSoaDataBatch()" />
                                </div>
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.SoaDataBatchId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.OriginalClaimRegisterError, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.OriginalClaimRegisterError, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    </div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        @if (enableSaveOnly)
                        {
                            <button type="submit" class="btn btn-submit float-right prevent-disable">SAVE</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-submit float-right">SAVE</button>
                        }

                        @{
                            var actionUrls = (Dictionary<string, object>)ViewBag.ActionUrls;
                            foreach (var item in actionUrls)
                            {
                                if (item.Key.ToString() == "Create Adjustment")
                                {
                                    if (readOnly || enableSaveOnly)
                                    {
                                        <span class="btn btn-submit disabled mr-2">@item.Key</span>
                                    }
                                    else
                                    {
                                        <a type="button" href="@item.Value" value="@item.Key" target="_blank" class="btn btn-submit float-right prevent-disable mr-2">@item.Key</a>
                                    }
                                }
                                else
                                {
                                    if (readOnly || enableSaveOnly)
                                    {
                                        <button type="submit" class="btn btn-submit float-right mr-2" formaction=@item.Value disabled>@item.Key</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-submit float-right mr-2" formaction=@item.Value>@item.Key</button>
                                    }
                                }

                                @*string url = Url.Action("UpdateStatus", new { id = Model.Id, status = item.Value });*@
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var LoadingDiv = $("#loadingSpinner");
        $(document).ready(function () {
            if ('@ViewBag.CanEdit' == 'True') {
                disableFields();
            }
            LoadingDiv.addClass('hide-loading-spinner');

            @*$('button[type="submit"]').click(function () {

                console.log(window.location.href);
                return false;
            });*@
        });
    </script>
    @Scripts.Render("~/Scripts/models/ClaimRegister.js")
}
