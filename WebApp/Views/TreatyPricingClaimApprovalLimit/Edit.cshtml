@using Shared.Forms.Helpers
@model WebApp.Models.TreatyPricingClaimApprovalLimitViewModel

@{
    ViewBag.Title = "Claim Approval Limit";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index", "TreatyPricingCedant");

    ViewBag.PrevTitle = "Cedant";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexClaimApprovalLimit });

    var disableVersionSelect = ViewBag.IsHideSideBar != null ? bool.Parse(ViewBag.IsHideSideBar.ToString().ToLower()) : false;

    string cancelController = "TreatyPricingCedant";
    object cancelRouteValues = new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexClaimApprovalLimit };

    if (ViewBag.IsCalledFromWorkflow)
    {
        cancelRouteValues = new { id = Model.WorkflowId };
        cancelController = ViewBag.IsQuotationWorkflow ? "TreatyPricingQuotationWorkflow" : "TreatyPricingTreatyWorkflow";
    }
}

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @section breadcrumb
    {
        @Html.Partial("_Breadcrumb")
    }

    @Html.Partial("_BackToList")
}

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingClaimApprovalLimitBo.GetStatusClass(Model.Status)">
                    @BusinessObject.TreatyPricing.TreatyPricingClaimApprovalLimitBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body" id="app">
        @Html.Partial("_ObjectLockEditButton")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TreatyPricingCedantId)
            @Html.HiddenFor(model => model.Errors)
            @Html.HiddenFor(model => model.EditableVersion)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Status, new List<SelectListItem> {
                                                                                    new SelectListItem { Text = "Nothing selected", Value = "", Selected = true},
                                                                                    new SelectListItem { Text = "Active", Value = "1" },
                                                                                    new SelectListItem { Text = "Inactive", Value = "2" } }, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Type Here" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.BenefitCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.BenefitCode, new { htmlAttributes = new { id = "BenefitCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.BenefitCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1" })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @if (ViewBag.IsCalledFromWorkflow == false)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexClaimApprovalLimit }, new { @class = "btn btn-cancel" })
                        }
                        else if (ViewBag.IsQuotationWorkflow == true)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingQuotationWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        else
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingTreatyWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @Html.Partial("_BackToList")
}


@section Scripts {
    @Scripts.Render("~/Scripts/textarea-autoresize.js")
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Model
        var Model = @Html.Raw(Json.Encode(Model));

        // Url
        var CreateVersionUrl = "@(Url.Action("CreateVersion", "TreatyPricingClaimApprovalLimit"))";

        //Remarks
        var Remarks = @Html.Raw(Json.Encode(ViewBag.RemarkBos));
        var RemarkSubjects = @Html.Raw(Json.Encode(ViewBag.RemarkSubjects));

        // Others
        var AuthUserId = "@ViewBag.PersonInChargeId";
        var AuthUserName = "@ViewBag.PersonInChargeName";
        var Products = @Html.Raw(Json.Encode(ViewBag.Products));
        var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingClaimApprovalLimit.ToString()';
        var Changelogs = @Html.Raw(Json.Encode(ViewBag.ObjectVersionChangelogs));
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");

        var distributionChannelCount = 0;

        // Benefit Code
        var BenefitCodes = @Html.Raw(Json.Encode(ViewBag.BenefitCodes));
        var benefitCodeCount = 0;
        var loadingDiv = $("#loadingSpinner");
    </script>
    @Scripts.Render("~/Scripts/models/TreatyPricingClaimApprovalLimit.js")
    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}