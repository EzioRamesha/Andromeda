@model WebApp.Models.UserViewModel

@{
    ViewBag.Title = "User";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")
<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.Identity.UserBo.GetStatusClass(Model.Status)">
                    @BusinessObject.Identity.UserBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Edit", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Status)

            <div class="form-horizontal">
                <ul class="nav nav-tabs">
                    <li class="nav-item"><a data-toggle="tab" href="#general" class="active underline-tab">General</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#documents">Documents</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#status">Status History</a></li>
                </ul>

                <div class="tab-content underline-tab-content">
                    <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "col-form-label" })
                                <div class="input-group">
                                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control", @id = "usernameInput", placeholder = "Type here" } })
                                    <div class="input-group-append" id="findAdDiv" style="display:none;">
                                        <input type="button" class="btn btn-generate" id="findInAD" v-on:click="findInAD" value="Find in AD" />
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.LoginMethod, htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.LoginMethod, (List<SelectListItem>)ViewBag.DropDownLoginMethods, htmlAttributes: new { @class = "form-control selectpicker", onchange = "changeLoginMethod(this.value)" })
                                @Html.ValidationMessageFor(model => model.LoginMethod, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @id = "nameInput" } })
                                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "emailInput", placeholder = "Type here" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row" id="passwordDiv" style="display:none;">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "col-form-label" })
                                @if (@ViewBag.PasswordRequirement != null)
                                {
                                    <a href="javascript:void()"
                                       data-toggle="tooltip"
                                       data-placement="top"
                                       title="@ViewBag.PasswordRequirement"
                                       class="tooltip-link">
                                        <span class="fa fa-question-circle" />
                                    </a>
                                }
                                <div class="input-group">
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @id = "passwordInput", placeholder = "••••••••••", autocomplete = "off" } })
                                    <div class="input-group-append">
                                        <input type="button" class="btn btn-generate" id="generatePassword" v-on:click="generatePassword" value="Generate" />
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "col-form-label" })
                                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", placeholder = "••••••••••", autocomplete = "off", @id = "confirmPasswordInput" } })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.LabelFor(model => model.DepartmentId, "Department", htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.DepartmentId, (List<SelectListItem>)ViewBag.DropDownDepartments, htmlAttributes: new { @class = "form-control selectpicker", onchange = "getAccessGroups(this.value)" })
                                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">
                                @Html.LabelFor(model => model.AccessGroupId, "Access Group", htmlAttributes: new { @class = "col-form-label" })
                                @Html.DropDownListFor(model => model.AccessGroupId, (List<SelectListItem>)ViewBag.DropDownAccessGroups, htmlAttributes: new { @class = "form-control selectpicker", @id = "accessGroupId" })
                                @Html.ValidationMessageFor(model => model.AccessGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="documents" role="tabpanel" aria-labelledby="documents-tab">
                        @Html.Partial("_Document")
                    </div>
                    <div class="tab-pane fade" id="status" role="tabpanel" aria-labelledby="status-tab">
                        <div class="table-responsive">
                            <table class="table table-hover table-sm my-3">
                                <thead>
                                    <tr>
                                        <th class="w-35">Status</th>
                                        <th class="w-35">Update Date & time</th>
                                        <th class="w-30">Updated By</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-if="!StatusHistories.length">
                                        <td colspan="3" class="no-data">No available data found.</td>
                                    </tr>
                                    <tr v-for="(statusHistory, index) in StatusHistories">
                                        <td>
                                            <span class="status-badge">
                                                {{ statusHistory.StatusName }}
                                            </span>
                                        </td>
                                        <td>{{ statusHistory.CreatedAtStr }}</td>
                                        <td>{{ statusHistory.CreatedByName }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        @Html.ActionLink("DELETE", "Delete", new { id = Model.Id }, new { @class = "btn btn-del" })
                        <div class="row m-0 p-0 float-right">
                            <div class="dropdown">
                                <button type="button" class="btn btn-submit dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Action</button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <input class="dropdown-item" type="submit" href="#" value="Save" />
                                    <input class="dropdown-item" type="submit" href="#" formaction="@(Url.Action("Suspend"))" v-if="User.Status == @BusinessObject.Identity.UserBo.StatusActive" value="Suspend User" />
                                    <input class="dropdown-item" type="submit" href="#" formaction="@(Url.Action("Activate"))" v-if="User.Status == @BusinessObject.Identity.UserBo.StatusSuspend" value="Activate User" />
                                    <input class="dropdown-item" type="submit" href="#" formaction="@(Url.Action("SendNewPassword"))"
                                           v-if="User.LoginMethod == @BusinessObject.Identity.UserBo.LoginMethodPassword && User.Status == @BusinessObject.Identity.UserBo.StatusActive" value="Save & Send New Password to User" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

<script type="text/javascript">
        var UserModel = @Html.Raw(Json.Encode(Model));
        var DocumentBos = @Html.Raw(Json.Encode(ViewBag.DocumentBos));
        var StatusHistoryBos = @Html.Raw(Json.Encode(ViewBag.StatusHistoryBos));
        var LoginMethodItems = @Html.Raw(Json.Encode(ViewBag.LoginMethodItems));
        var DocumentTypeItems = @Html.Raw(Json.Encode(ViewBag.DropDownDocumentTypes));
        var StatusItems = @Html.Raw(Json.Encode(ViewBag.StatusItems));
        var StatusClassList = @Html.Raw(Json.Encode(ViewBag.StatusClassList));
        var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
        var LoginMethodAD = @BusinessObject.Identity.UserBo.LoginMethodAD;
        var LoginMethodPassword = @BusinessObject.Identity.UserBo.LoginMethodPassword;
        var AccessGroupId = '@Model.AccessGroupId';
        var AuthUserName = "@ViewBag.AuthUserName";
        var GeneratePasswordUrl = "@(Url.Action("GeneratePassword"))";
        var ActiveDirectoryUrl = "@(Url.Action("GetActiveDirectoryDetails"))";
        var GetAccessGroupsUrl = "@(Url.Action("GetList", "AccessGroup"))";

        var OriginalUserName = UserModel.UserName;
        var OriginalFullName = UserModel.FullName;
        var OriginalEmail = UserModel.Email;
        var OriginalLoginMethod = '@Model.LoginMethod';

        var SaveTempFileUrl = "@(Url.Action("Upload", "Document"))";
        var DeleteTempFileUrl = "@(Url.Action("Remove", "Document"))";

        $(document).ready(function () {
            if ('@ViewBag.ReadOnly' == 'True') {
                $("input").prop("disabled", true);
                $("select").prop("disabled", true);
                $('button').prop("disabled", true);
            }
        });
</script>
    @Scripts.Render("~/Scripts/models/User.js")
}
