@model WebApp.Models.TreatyPricingCampaignViewModel

@{
    ViewBag.Title = "Campaign";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index", "TreatyPricingCedant");

    ViewBag.PrevTitle = "Cedant";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexCampaign });
}

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @section breadcrumb
    {
        @Html.Partial("_Breadcrumb")
    }

    @Html.Partial("_BackToList")
}

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingCampaignBo.GetStatusClass(Model.Status)">
                    @BusinessObject.TreatyPricing.TreatyPricingCampaignBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body" id="app">
        @*@Html.Partial("_LoadingSpinner")*@

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TreatyPricingCedantId)
            @Html.HiddenFor(model => model.Code)
            @Html.HiddenFor(model => model.EditableVersion)

            @Html.Partial("_ObjectLockEditButton")

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Status, (List<SelectListItem>)ViewBag.DropDownStatus, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CedantId, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        <label class="col-form-label">Campaign Type <span class="sub-label">(Separated by Comma)</span></label>
                        @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", id = "campaignTypeTokenField" } })
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.PeriodStartDate, htmlAttributes: new { @class = "col-form-label" })
                                <div class="input-w-icon">
                                    @Html.TextBoxFor(model => model.PeriodStartDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('PeriodStartDateStr')" } })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('PeriodStartDateStr')" />
                                </div>
                                @Html.ValidationMessageFor(model => model.PeriodStartDateStr, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.PeriodEndDate, htmlAttributes: new { @class = "col-form-label" })
                                <div class="input-w-icon">
                                    @Html.TextBoxFor(model => model.PeriodEndDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('PeriodEndDateStr')" } })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('PeriodEndDateStr')" />
                                </div>
                                @Html.ValidationMessageFor(model => model.PeriodEndDateStr, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.TargetTakeUpRate, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TargetTakeUpRate, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.TargetTakeUpRate, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.AverageSumAssured, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text">MYR</div>
                            </div>
                            @Html.TextBoxFor(model => model.AverageSumAssured, new { @class = "form-control", placeholder = "0.00" })
                        </div>
                        @Html.ValidationMessageFor(model => model.AverageSumAssured, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.NoOfPolicy, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.NoOfPolicy, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.NoOfPolicy, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RiPremiumReceivable, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text">MYR</div>
                            </div>
                            @Html.TextBoxFor(model => model.RiPremiumReceivable, new { @class = "form-control", placeholder = "0.00" })
                        </div>
                        @Html.ValidationMessageFor(model => model.RiPremiumReceivable, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.RemarkMaxLength })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @if (ViewBag.IsCalledFromWorkflow == false)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexCampaign }, new { @class = "btn btn-cancel" })
                        }
                        else if (ViewBag.IsQuotationWorkflow == true)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingQuotationWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        else
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingTreatyWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @Html.Partial("_BackToList")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var CampaignTypes = @Html.Raw(Json.Encode(ViewBag.CampaignTypes));
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");
        $(document).ready(function () {
            $('#Description').autoResize();
            $('#Description').trigger('keyup');

            $('#Remarks').autoResize();
            $('#Remarks').trigger('keyup');
        });
    </script>

    @Scripts.Render("~/Scripts/models/TreatyPricingCampaign.js")
    @Scripts.Render("~/Scripts/models/LinkTreatyPricingProduct.js")
    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
