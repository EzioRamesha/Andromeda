@model WebApp.Models.RiDataBatchViewModel

@{
    ViewBag.Title = "RI Data Batch";
    ViewBag.Action = "Create";
    ViewBag.ListPageUrl = Url.Action("Index");
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Create", "RiData", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.ModuleId)
            @Html.HiddenFor(model => model.TreatyId)
            @Html.HiddenFor(model => model.Status)
            @Html.HiddenFor(model => model.FileType)
            @Html.HiddenFor(model => model.SoaDataBatchId)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CedantId, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getConfigListByCedant(this.value)" })
                        @Html.ValidationMessageFor(model => model.CedantId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyId, htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" id="TreatyName">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Quarter, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Quarter, new { htmlAttributes = new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Quarter, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RecordType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.RecordType, (List<SelectListItem>)ViewBag.DropDownRecordTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.RecordType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ConfigId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.ConfigId, new SelectList(Enumerable.Empty<SelectListItem>()), "Please select", htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getConfigData(this.value)" })
                        @Html.ValidationMessageFor(model => model.ConfigId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ReceivedAtStr, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.ReceivedAtStr, new { id = "ReceivedDate", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReceivedDate')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.ReceivedAtStr, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.PersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.HiddenFor(model => model.PersonInChargeId)
                        <input type="text" readonly class="form-control" value="@Model.PersonInChargeBo.FullName">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>

                <div class="form-row mt-4" id="app">
                    <div class="form-group col-md-12" style="padding-bottom: 0;">
                        <span class="font-weight-bold">@Html.Label("SOA Data", htmlAttributes: new { @class = "col-form-label" })</span>
                        <div class="form-row">
                            <div class="form-group col-md-6 mid-line-1">
                                @Html.Label("SOA Data Matching Status", htmlAttributes: new { @class = "col-form-label" })
                                <div class="input-group">
                                    <input class="form-control" id="SoaRiDataMatchStr" v-model="SoaDataMatchStatus" readonly />
                                    <div class="input-group-append">
                                        <button class="btn btn-generate" type="button" v-on:click="viewSoaDataBatch()" :disabled="!RiDataBatchModel.SoaDataBatchId"><i class="fas fa-search"></i></button>
                                        <input type="button" class="btn btn-generate" id="matchSoaData" data-toggle="modal" data-target="#matchSoaDataModal" value="Match SOA Data" v-on:click="searchSoaDataBatch()" />
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(model => model.SoaDataBatchId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                        </div>

                        <div class="modal fade" id="matchSoaDataModal" tabindex="-1" role="dialog" aria-labelledby="matchSoaDataModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Match SOA Data</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <div v-if="MatchSoaDataBatchesValidation.length" class="alert alert-danger" role="alert">
                                            <ul>
                                                <li v-for="(validation, index) in MatchSoaDataBatchesValidation">{{validation}}</li>
                                            </ul>
                                        </div>
                                        <div class="table-responsive" v-if="SoaDataBatches.length != 0">
                                            <table class="table table-hover">
                                                <thead style="width: unset">
                                                    <tr>
                                                        <th class="w-40">Ceding Company</th>
                                                        <th class="w-40">Treaty ID</th>
                                                        <th class="w-15">Quarter</th>
                                                        <th class="w-5">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr v-if="SoaDataBatches.length == 0">
                                                        <td colspan="4" class="no-data">No available data found.</td>
                                                    </tr>
                                                    <tr v-for="(soaData, index) in SoaDataBatches">
                                                        <td>{{ soaData.CedantBo.Name }}</td>
                                                        <td>{{ soaData.TreatyBo.TreatyIdCode }}</td>
                                                        <td>{{ soaData.Quarter }}</td>
                                                        <td><input type="radio" name="checkedSoadata" :value="index" :checked="soaData.Id == RiDataBatchModel.SoaDataBatchId"></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-cancel" data-dismiss="modal">CANCEL</button>
                                        <button type="button" class="btn btn-submit" v-on:click="createSoaDataBatch()">AUTO CREATE</button>
                                        <button type="button" class="btn btn-submit" v-on:click="selectSoaDataBatch()" :disabled="SoaDataBatches.length == 0">SELECT</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-12" style="padding-bottom: 0;">
                        <span class="font-weight-bold">@Html.Label("Data File Configuration Upload", htmlAttributes: new { @class = "col-form-label" })</span>
                        <div id="ConfigDetail">
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.Label("File Type", htmlAttributes: new { @class = "col-form-label" })
                                    <input type="text" readonly class="form-control" id="FileTypeName" value="">
                                </div>
                                <div class="form-group col-md-6 mid-line-2" id="FileType1">
                                    @Html.LabelFor(model => model.Worksheet, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.Worksheet, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.Worksheet, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2" id="FileType2">
                                    @Html.LabelFor(model => model.Delimiter, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.Delimiter, (List<SelectListItem>)ViewBag.DelimiterItems, htmlAttributes: new { @class = "form-control selectpicker" })
                                    @Html.ValidationMessageFor(model => model.Delimiter, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.HasHeader, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.DropDownListFor(model => model.HasHeader, (List<SelectListItem>)ViewBag.HasHeaderItems, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "showHeader(this.value)" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2" id="HeaderYes">
                                    @Html.LabelFor(model => model.HeaderRow, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.HeaderRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.HeaderRow, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.StartRow, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.StartRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.StartRow, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2">
                                    @Html.LabelFor(model => model.EndRow, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.EndRow, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.EndRow, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.StartColumn, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.StartColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.StartColumn, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2">
                                    @Html.LabelFor(model => model.EndColumn, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.EndColumn, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.EndColumn, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.IsColumnToRowMapping, htmlAttributes: new { @class = "col-form-label" })
                                    <div class="row m-0 p-0">
                                        <div> <p style="color: #004BA2;">Disable</p> </div>
                                        <div class="custom-control custom-switch" style="padding-left:1rem;">
                                            @Html.CheckBoxFor(model => model.IsColumnToRowMapping, new { @class = "custom-control-input", id = "IsColumnToRowMappingSwitch", @disabled = "disabled" })
                                            <label class="custom-control-label" for="IsColumnToRowMappingSwitch" style="color: #004BA2;">Enable</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group col-md-6 mid-line-2">
                                    @Html.LabelFor(model => model.IsDataCorrection, htmlAttributes: new { @class = "col-form-label" })
                                    <div class="row m-0 p-0">
                                        <div> <p style="color: #004BA2;">Disable</p> </div>
                                        <div class="custom-control custom-switch" style="padding-left:1rem;">
                                            @Html.CheckBoxFor(model => model.IsDataCorrection, new { @class = "custom-control-input", id = "IsDataCorrectionSwitch", @disabled = "disabled" })
                                            <label class="custom-control-label" for="IsDataCorrectionSwitch" style="color: #004BA2;">Enable</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-row" id="RowMapping">
                                <div class="form-group col-md-6 mid-line-1">
                                    @Html.LabelFor(model => model.NumberOfRowMapping, htmlAttributes: new { @class = "col-form-label" })
                                    @Html.EditorFor(model => model.NumberOfRowMapping, new { htmlAttributes = new { @readonly = "readonly", @class = "form-control", placeholder = "Type here" } })
                                    @Html.ValidationMessageFor(model => model.NumberOfRowMapping, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Upload File", htmlAttributes: new { @class = "col-form-label" })
                        <div class="file is-boxed">
                            <label class="file-label">
                                <input class="form-control-file" type="file" id="files" name="upload" multiple>
                                Drag and Drop File Here or <u>Browse your file</u>
                                <br />
                                <span class="file-desc">
                                    Allowed file format: .csv, .txt, .xls, .xlsx, .pro, .rpt, .xlsb, .xlsm
                                </span>
                                <br />
                                <span class="file-desc">
                                    File size is up to 2GB
                                </span>
                            </label>
                        </div>
                        <div id="selectedFiles" class="file-list-display"></div>
                        <div class="field-validation-error text-danger" id="errorSizeExceeds" style="display: none;"></div>
                        @Html.ValidationMessageFor(model => model.Upload, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-12">
                        <span class="font-weight-bold">@Html.LabelFor(model => model.OverrideProperties, htmlAttributes: new { @class = "col-form-label" })</span>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th class="w-50">
                                            Label
                                        </th>
                                        <th class="w-50">
                                            Value
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        foreach (var item in ViewBag.OverridePropertiesList)
                                        {
                                            string FieldName = BusinessObject.StandardOutputBo.GetCodeByType(int.Parse(item.Key));
                                            int DataType = BusinessObject.StandardOutputBo.GetDataTypeByType(int.Parse(item.Key));
                                            <tr>
                                                <td>
                                                    @BusinessObject.StandardOutputBo.GetTypeName(int.Parse(item.Key))
                                                </td>
                                                <td>
                                                    @{
                                                        switch (DataType)
                                                        {
                                                            case BusinessObject.StandardOutputBo.DataTypeDate:
                                                                @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control", placeholder = "DD MM YYYY", @Value = item.Value } })
                                                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('@FieldName')" />
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeString:
                                                                @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", @Value = item.Value } })
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeAmount:
                                                                if (int.Parse(item.Key) == BusinessObject.StandardOutputBo.TypeCurrencyRate)
                                                                {
                                                                    @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "0.00", @Value = item.Value } })
                                                                }
                                                                else
                                                                {
                                                                    <div class="input-group mb-2">
                                                                        <div class="input-group-prepend">
                                                                            <div class="input-group-text">MYR</div>
                                                                        </div>
                                                                        @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "0.00", @Value = item.Value } })
                                                                    </div>
                                                                }
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypePercentage:
                                                                <div class="input-group mb-2">
                                                                    <div class="input-group-prepend">
                                                                        <div class="input-group-text">%</div>
                                                                    </div>
                                                                    @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })
                                                                </div>
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeInteger:
                                                                if (item.Key == BusinessObject.StandardOutputBo.TypeRecordType.ToString())
                                                                {
                                                                    var recordTypes = new List<SelectListItem> { };
                                                                    recordTypes.Add(new SelectListItem { Text = "Please select", Value = "" });
                                                                    for (int i = 1; i <= BusinessObject.RiDatas.RiDataBatchBo.RecordTypeMax; i++)
                                                                    {
                                                                        recordTypes.Add(new SelectListItem { Text = BusinessObject.RiDatas.RiDataBatchBo.GetRecordTypeName(i), Value = i.ToString(), Selected = i.ToString() == item.Value });
                                                                    }
                                                                    @Html.DropDownList(FieldName, recordTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                                                }
                                                                else
                                                                {
                                                                    @Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", type = "number", @Value = item.Value } })
                                                                }
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeDropDown:
                                                                IList<BusinessObject.PickListDetailBo> pickListDetails = Services.PickListDetailService.GetByStandardOutputId(int.Parse(item.Key));
                                                                var listItems = pickListDetails.Select(i => new SelectListItem
                                                                {
                                                                    Value = i.Code,
                                                                    Text = string.Format("{0} - {1}", i.Code, i.Description),
                                                                    Selected = i.Code == item.Value
                                                                });

                                                                @Html.DropDownList(FieldName, listItems, "Please select", htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                                                break;
                                                            case BusinessObject.StandardOutputBo.DataTypeBoolean:
                                                                var items = new List<SelectListItem> { };
                                                                items.Add(new SelectListItem { Text = "Please select", Value = "" });
                                                                items.Add(new SelectListItem { Text = "False", Value = "false", Selected = "false" == item.Value });
                                                                items.Add(new SelectListItem { Text = "True", Value = "true", Selected = "true" == item.Value });
                                                                @Html.DropDownList(FieldName, items, "Please select", htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                                                break;
                                                            default:
                                                                break;
                                                        }
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        <button type="submit" class="btn btn-submit float-right">SAVE</button>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

<script type="text/javascript">
        var Model = @Html.Raw(Json.Encode(Model));
        var GetConfigCodeUrl = "@(Url.Action("GetConfigByCedant"))";
        var GetConfigUrl = "@(Url.Action("GetConfigDetails"))";
        var SearchSoaDataUrl = "@(Url.Action("SearchSoaDataBatch"))";
        var CreateSoaDataUrl = "@(Url.Action("CreateSoaDataBatch"))";
        var ViewSoaDataBatchUrl = "@(Url.Action("Edit", "SoaData"))";

        getConfigListByCedant('@Model.CedantId');
        getConfigData('@Model.ConfigId');
        showHeader('@Model.HasHeader');
        showRowMapping('@Model.IsColumnToRowMapping');

        $(document).ready(function () {
            dateOffAutoComplete();
        });

        $('#IsColumnToRowMappingSwitch').on('change.bootstrapSwitch', function (e) {
            //console.log(e.target.checked);
            showRowMapping(e.target.checked);
        });

        $('#Quarter').datepicker({
            format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
            minViewMode: 1,
            autoclose: true,
            language: "qtrs",
            forceParse: false,
        }).on('show', function (e) {
            var datepickerDropDown = $('.datepicker');
            datepickerDropDown.addClass('quarterpicker');
        })
        .on('changeDate', function () {
            Model.Quarter = $('#Quarter').val();
        });

        $('#ReceivedDate').datepicker({
            format: DateFormatDatePickerJs,
        });

        function getConfigListByCedant(Id) {
            $('#ConfigId option').remove();
            getConfigData('');

            $('#ConfigId').append(new Option("Please select", ""));
            if (Id !== '' && Id !== '0' && Id !== 'Please select') {
                var ConfigLists = [];
                $.ajax({
                    url: GetConfigCodeUrl,
                    type: "POST",
                    data: { cedantId: Id },
                    cache: false,
                    async: false,
                    success: function (data) {
                        ConfigLists = data.riDataConfigBos;
                    }
                });

                ConfigLists.forEach(function (entry) {
                    $('#ConfigId').append(new Option((entry.Code + ' - ' + entry.Name), entry.Id, false, entry.Id == '@Model.ConfigId'));
                });
            }
            $('#ConfigId').selectpicker('refresh');
            Model.CedantId = Id;
        }

        function getConfigData(Id) {

            if (Id === '' || Id === '0' || Id === 'Please select') {
                $('#TreatyCodeId').val('');
                $('#TreatyName').val('');
                Model.TreatyId = 0;

                $('#ConfigDetail').hide();
                $('#FileType').val('');
                $('#FileTypeName').val('');
                $('#Worksheet').val('');
                $('#DelimiterName').val('');
                $('#HasHeader').val('false');
                $('#HeaderRow').val('');
                $('#StartRow').val('');
                $('#EndRow').val('');
                $('#StartColumn').val('');
                $('#EndColumn').val('');
                checkColumnToRowMapping(false);
                $('#NumberOfRowMapping').val('');
                checkDataCorrection(false);
            }
            else {
                var ConfigData;
                $.ajax({
                    url: GetConfigUrl,
                    type: "POST",
                    data: { id: Id },
                    cache: false,
                    async: false,
                    success: function (data) {
                        ConfigData = data.riDataConfigBo;
                    }
                });

                $('#TreatyId').val(ConfigData.TreatyId);
                if (ConfigData.TreatyBo)
                    $('#TreatyName').val(ConfigData.TreatyBo.TreatyIdCode + ' - ' + ConfigData.TreatyBo.Description);
                else
                    $('#TreatyName').val('');
                Model.TreatyId = ConfigData.TreatyId;

                $('#ConfigDetail').show();
                $('#FileType').val(ConfigData.FileType);
                $('#FileTypeName').val(ConfigData.FileTypeName);
                showType(ConfigData.FileType);

                if (Id == '@Model.ConfigId') {

                    $('#Worksheet').val('@Model.Worksheet');
                    $('#Delimiter').val('@Model.Delimiter');
                    var hasHeader = '@Model.HasHeader';
                    $('#HasHeader').val(hasHeader.toLowerCase());
                    $('#HeaderRow').val('@Model.HeaderRow');
                    $('#StartRow').val('@Model.StartRow');
                    $('#EndRow').val('@Model.EndRow');
                    $('#StartColumn').val('@Model.StartColumn');
                    $('#EndColumn').val('@Model.EndColumn');
                    checkColumnToRowMapping('@Model.IsColumnToRowMapping');
                    $('#NumberOfRowMapping').val('@Model.NumberOfRowMapping');
                    checkDataCorrection('@Model.IsDataCorrection');

                    showHeader('@Model.HasHeader');
                    showRowMapping('@Model.IsColumnToRowMapping');
                }
                else {
                    $('#Worksheet').val(ConfigData.RiDataFileConfig.Worksheet);
                    $('#Delimiter').val(ConfigData.RiDataFileConfig.Delimiter);
                    $('#HasHeader').val(ConfigData.RiDataFileConfig.HasHeader == true ? 'true' : 'false');
                    $('#HeaderRow').val(ConfigData.RiDataFileConfig.HeaderRow);
                    $('#StartRow').val(ConfigData.RiDataFileConfig.StartRow);
                    $('#EndRow').val(ConfigData.RiDataFileConfig.EndRow);
                    $('#StartColumn').val(ConfigData.RiDataFileConfig.StartColumn);
                    $('#EndColumn').val(ConfigData.RiDataFileConfig.EndColumn);
                    checkColumnToRowMapping(ConfigData.RiDataFileConfig.IsColumnToRowMapping);
                    $('#NumberOfRowMapping').val(ConfigData.RiDataFileConfig.NumberOfRowMapping);
                    checkDataCorrection(ConfigData.RiDataFileConfig.IsDataCorrection);

                    showHeader(ConfigData.RiDataFileConfig.HasHeader);
                    showRowMapping(ConfigData.RiDataFileConfig.IsColumnToRowMapping);
                }
            }

            $('#Delimiter').selectpicker('refresh');
            $('#HasHeader').selectpicker('refresh');
        }

        function showType(val) {
            switch (val) {
                case @BusinessObject.RiDatas.RiDataConfigBo.FileTypeExcel:
                    $('#FileType1').show();
                    $('#FileType2').hide();
                    break;
                case @BusinessObject.RiDatas.RiDataConfigBo.FileTypePlainText:
                    $('#FileType2').show();
                    $('#FileType1').hide();
                    break;
                default:
                    $('#FileType1').hide();
                    $('#FileType2').hide();
                    break;
            }
        }

        function showHeader(val) {
            if (val === "true" || val === true || val === "True") {
                $('#HeaderRow').prop("readonly", false);
            }
            else { $('#HeaderRow').prop("readonly", true); }
        }

        function showRowMapping(val) {
            if (val === "true" || val === true || val === "True") {
                $('#RowMapping').show();
            }
            else {
                $('#NumberOfRowMapping').val('');
                $('#RowMapping').hide();
            }
        }

        function checkColumnToRowMapping(val) {
            $('#IsColumnToRowMappingSwitch').prop('checked', false);
            if (val === "true" || val === true || val === "True") {
                $('#IsColumnToRowMappingSwitch').prop('checked', true);
            }
        }

        function checkDataCorrection(val) {
            $('#IsDataCorrectionSwitch').prop('checked', false);
            if (val === "true" || val === true || val === "True") {
                $('#IsDataCorrectionSwitch').prop('checked', true);
            }
        }

        var selDiv = "";
        document.addEventListener("DOMContentLoaded", init, false);

        function init() {
            document.querySelector('#files').addEventListener('change', handleFileSelect, false);
            selDiv = document.querySelector("#selectedFiles");
        }

        function handleFileSelect(e) {

            if (!e.target.files) return;
            selDiv.innerHTML = "";
            var files = e.target.files;
            var list = "";
            for (var i = 0; i < files.length; i++) {
                var f = files[i];

                // Prevent exceeds file size from uploading
                var fileSize = f.size / 1024 / 1024 / 1024; // in GB
                if (fileSize >= 2) {
                    $("#errorSizeExceeds").css("display", "block");
                    $("#errorSizeExceeds").text('Maximum allowed size is : 2 GB');
                    //reset file upload control
                    e.target.value = null;
                    return;
                } else {
                    $("#errorSizeExceeds").css("display", "none");
                }

                list += "<li>" + f.name + "</li>";
            }
            selDiv.innerHTML = "<ul>" + list + "</ul>";
        }

        function focusOnDate(val) {
            $('#' + val).focus();
        }


        var app = new Vue({
            el: '#app',
            data: {
                RiDataBatchModel: Model,
                SoaDataBatches: [],
                MatchSoaDataBatchesValidation: [],
                SoaDataMatchStatus: "",
            },
            methods: {
                validateSoaDataMatchData: function () {
                    var validation = new Array();

                    if (this.RiDataBatchModel.CedantId == null || this.RiDataBatchModel.CedantId == "" || this.RiDataBatchModel.CedantId == 0)
                        validation.push("Ceding Company is required");
                    if (this.RiDataBatchModel.TreatyId == null || this.RiDataBatchModel.TreatyId == "" || this.RiDataBatchModel.TreatyId == 0)
                        validation.push("Treaty ID is required");
                    if (this.RiDataBatchModel.Quarter == null || this.RiDataBatchModel.Quarter == "")
                        validation.push("Quarter is required");
                    else if (!/[0-9]{4} Q{1}([1-4]){1}/.test(this.RiDataBatchModel.Quarter))
                        validation.push("Quarter format is incorrect");

                    this.MatchSoaDataBatchesValidation = validation;

                    return this.MatchSoaDataBatchesValidation.length == 0;
                },
                searchSoaDataBatch: function () {
                    if (!this.validateSoaDataMatchData())
                        return;

                    var obj = {
                        Id: this.RiDataBatchModel.Id,
                        CedantId: this.RiDataBatchModel.CedantId,
                        TreatyId: this.RiDataBatchModel.TreatyId,
                        Quarter: this.RiDataBatchModel.Quarter,
                    };
                    
                    var soaDataBatchBos = [];
                    $.ajax({
                        url: SearchSoaDataUrl ? SearchSoaDataUrl : null,
                        type: "POST",
                        data: obj,
                        cache: false,
                        async: false,
                        success: function (data) {
                            soaDataBatchBos = data.soaDataBatchBos;
                        }
                    });

                    this.SoaDataBatches = soaDataBatchBos;
                    if (this.SoaDataBatches == null || !this.SoaDataBatches.length)
                        this.MatchSoaDataBatchesValidation.push("No match found");
                },
                selectSoaDataBatch: function () {
                    var index = $('input[name="checkedSoadata"]:checked').val();
                    if (typeof index == 'undefined') {
                        this.MatchSoaDataBatchesValidation.push("No RI Data selected.");
                        return;
                    }

                    var item = this.SoaDataBatches[index];
                    $('#SoaDataBatchId').val(item.Id);
                    this.RiDataBatchModel.SoaDataBatchId = item.Id;
                    this.SoaDataMatchStatus = 'Matched - ' + item.Id;

                    $('#matchSoaDataModal').modal('toggle');
                },
                createSoaDataBatch: function () {
                    if (!this.validateSoaDataMatchData())
                        return;

                    var obj = {
                        Id: this.RiDataBatchModel.Id,
                        CedantId: this.RiDataBatchModel.CedantId,
                        TreatyId: this.RiDataBatchModel.TreatyId,
                        Quarter: this.RiDataBatchModel.Quarter,
                    };

                    var batchId = null;
                    var result = null;
                    var message = null;
                    $.ajax({
                        url: CreateSoaDataUrl ? CreateSoaDataUrl : null,
                        type: "POST",
                        data: obj,
                        cache: false,
                        async: false,
                        success: function (data) {
                            console.log(data)
                            result = data.success;
                            batchId = data.resultId;
                            message = data.message;
                        }
                    });

                    if (result == false) {
                        this.MatchSoaDataBatchesValidation.push(message);
                        return;
                    }

                    $('#SoaDataBatchId').val(batchId);
                    this.RiDataBatchModel.SoaDataBatchId = batchId;
                    this.SoaDataMatchStatus = 'Matched - ' + batchId;

                    $('#matchSoaDataModal').modal('toggle');
                },
                viewSoaDataBatch: function () {
                    var url = ViewSoaDataBatchUrl + '/' + this.RiDataBatchModel.SoaDataBatchId;
                    return window.open(url, "_blank");
                },
            },
            created: function () {
                this.SoaDataMatchStatus = (this.RiDataBatchModel.SoaDataBatchId) ? 'Matched - ' + this.RiDataBatchModel.SoaDataBatchId : '';
            },
        });
</script>
}
