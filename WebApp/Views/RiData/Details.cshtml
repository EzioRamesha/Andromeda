@using WebApp.Models
@model WebApp.Models.RiDataViewModel

@{
    ViewBag.Title = "RI Data Details";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    ViewBag.PrevTitle = "RI Data Batch";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", new { id = Model.RiDataBatchId });
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card" id="app">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Details", "RiData", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.RiDataBatchId)
            @Html.HiddenFor(model => model.RiDataFileId)
            @Html.HiddenFor(model => model.OriginalEntryId)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Ceding Company", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@(Model.RiDataBatchBo != null ? string.Format("{0} - {1}", Model.RiDataBatchBo.CedantBo.Code, Model.RiDataBatchBo.CedantBo.Name) : "")">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Number", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" v-model="RIData.PolicyNumber" value="@Model.PolicyNumber">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Treaty Code", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" v-model="RIData.TreatyCode" value="@Model.TreatyCode">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Issue Date", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" v-model="RIData.IssueDatePolStr" value="@Model.IssueDatePolStr">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Reinsurance Effective Date", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" v-model="RIData.ReinsEffDatePolStr" value="@Model.ReinsEffDatePolStr">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Term", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="">Month</span>
                            </div>
                            <input type="text" readonly class="form-control" v-model="RIData.PolicyTerm" value="@Model.PolicyTerm">
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Policy Expiry Date", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" v-model="RIData.PolicyExpiryDateStr" value="@Model.PolicyExpiryDateStr">
                    </div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Mapping Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetMappingStatusName(Model.MappingStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Pre-Computation Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetPreComputation1StatusName(Model.PreComputation1Status)">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Pre-Validation Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetPreValidationStatusName(Model.PreValidationStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Conflict", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetConflictTypeName(Model.ConflictType)">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Post-Computation Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetPostComputationStatusName(Model.PostComputationStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Post-Validation Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetPostValidationStatusName(Model.PostValidationStatus)">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Finalise Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetFinaliseStatusName(Model.FinaliseStatus)">
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Ignore Finalise", htmlAttributes: new { @class = "col-form-label" })
                        <div class="row m-0 p-0">
                            <div> <p style="color: #004BA2;">Off</p> </div>
                            <div class="custom-control custom-switch" style="padding-left:1rem;">
                                @Html.CheckBoxFor(model => model.IgnoreFinalise, (ViewBag.EditRiData == true ? (object)new { @class = "custom-control-input", id = "IgnoreFinaliseSwitch" } : new { @class = "custom-control-input", id = "IgnoreFinaliseSwitch", @disabled = "disabled" }))
                                <label class="custom-control-label" for="IgnoreFinaliseSwitch">On</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Process Warehouse Status", htmlAttributes: new { @class = "col-form-label" })
                        <input type="text" readonly class="form-control" value="@BusinessObject.RiDatas.RiDataBo.GetProcessWarehouseStatusName(Model.ProcessWarehouseStatus)">
                    </div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Pre-Validation Error", htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="5" readonly style="resize: none;">@(ViewBag.PreValidationError)</textarea>
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Finalise Error", htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="5" readonly style="resize: none;">@(ViewBag.FinaliseError)</textarea>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Post-Validation Error", htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="5" readonly style="resize: none;">@(ViewBag.PostValidationError)</textarea>
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Process Warehouse Error", htmlAttributes: new { @class = "col-form-label" })
                        <textarea class="form-control" rows="5" readonly style="resize: none;">@(ViewBag.ProcessWarehouseError)</textarea>
                    </div>
                </div>

                <div class="form-row mt-4">
                    <div class="form-group col-md-12">

                        <ul class="nav nav-tabs">
                            <li class="nav-item"><a data-toggle="tab" href="#standardOutput" class="active underline-tab">Standard Output</a></li>
                            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#reference">Reference</a></li>
                        </ul>

                        <div class="tab-content underline-tab-content">
                            <div class="tab-pane fade show active" id="standardOutput" role="tabpanel" aria-labelledby="standardOutput-tab">

                                <div class="text-right" style="margin-bottom: 20px;">
                                    <button id="editBtn" class="btn btn-edit" type="button" onclick="ToggleStandardOutput();" @(ViewBag.EditRiData == true ? "" : "disabled")>EDIT</button>
                                </div>
                                <div class="table-responsive">
                                    <table class="table table-hover tableBodyScroll">
                                        <thead>
                                            <tr>
                                                <th class="w-30">
                                                    Label
                                                </th>
                                                <th class="w-30">
                                                    Value
                                                </th>
                                                <th class="w-35">
                                                    Error
                                                </th>
                                                <th class="w-5">&nbsp;</th>
                                            </tr>
                                            <tr>
                                                <th>
                                                    @Html.TextBox("Label", null, new { @class = "form-control form-control-sm", @placeholder = "Type here" })
                                                </th>
                                                <th>
                                                    @Html.CheckBox("DataValue") @Html.Label("Has Value Only", htmlAttributes: new { @class = "col-form-label" })
                                                </th>
                                                <th>
                                                    @Html.CheckBox("Error") @Html.Label("Has Error Only", htmlAttributes: new { @class = "col-form-label" })
                                                </th>
                                                <th class="text-center">
                                                    <div class="btn-row-action">
                                                        <button title="Clear" class="btn-circle" onclick="SearchClear(); return false;"><span class="fas fa-backspace" /></button>
                                                        <button title="Search" class="btn-circle" onclick="SearchFilter(); return false;"><span class="fas fa-search" /></button>
                                                    </div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                foreach (var item in ViewBag.StandardOutputList)
                                                {
                                                    string FieldName = "";
                                                    if (item.Type == BusinessObject.StandardOutputBo.TypeCustomField)
                                                    {
                                                        continue;
                                                    }
                                                    string propertyName = BusinessObject.StandardOutputBo.GetPropertyNameByType(item.Type);
                                                    if (item.DataType == BusinessObject.StandardOutputBo.DataTypeDate || item.DataType == BusinessObject.StandardOutputBo.DataTypeAmount || item.DataType == BusinessObject.StandardOutputBo.DataTypePercentage)
                                                    {
                                                        FieldName = propertyName + "Str";
                                                    }
                                                    else { FieldName = propertyName; }
                                                    var propertyValue = Model.GetType().GetProperty(FieldName).GetValue(Model);

                                                    <tr>
                                                        <td class="w-30">@item.Code</td>
                                                        <td class="w-30">
                                                            <div class="ToggleStandardOutput">
                                                                @if (item.Type == BusinessObject.StandardOutputBo.TypeRecordType)
                                                                {
                                                                    var recordType = Shared.Util.GetParseInt(propertyValue.ToString());
                                                                    @BusinessObject.RiDatas.RiDataBatchBo.GetRecordTypeName(recordType.HasValue ? recordType.Value : 0)
                                                                }
                                                                else
                                                                {
                                                                    @propertyValue
                                                                }
                                                            </div>
                                                            <div class="ToggleStandardOutput" style="display: none;">
                                                                @{
                                                                    switch (item.DataType)
                                                                    {
                                                                        case BusinessObject.StandardOutputBo.DataTypeDate:
                                                                            <input type="text" class="form-control" v-model="RIData.@(FieldName)" id="@(FieldName)" name="@(FieldName)" placeholder="DD MM YYYY" v-on:focus="openDatePicker('@(FieldName)')">
                                                                            @*@Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control", placeholder = "DD MM YYYY" } })*@
                                                                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('@FieldName')" />
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypeString:
                                                                            <input type="text" class="form-control" v-model="RIData.@(FieldName)" id="@(FieldName)" name="@(FieldName)" placeholder="Type here">
                                                                            @*@Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })*@
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypeInteger:
                                                                            if (item.Type == BusinessObject.StandardOutputBo.TypeRecordType)
                                                                            {
                                                                                var recordTypes = new List<SelectListItem> { };
                                                                                recordTypes.Add(new SelectListItem { Text = "Please select", Value = "" });
                                                                                for (int i = 1; i <= BusinessObject.RiDatas.RiDataBatchBo.RecordTypeMax; i++)
                                                                                {
                                                                                    recordTypes.Add(new SelectListItem { Text = BusinessObject.RiDatas.RiDataBatchBo.GetRecordTypeName(i), Value = i.ToString() });
                                                                                }
                                                                                @Html.DropDownList(FieldName, recordTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @ref = "select", @v_model = string.Format("RIData.{0}", FieldName) })
                                                                            }
                                                                            else
                                                                            {
                                                                                <input type="number" class="form-control" v-model="RIData.@(FieldName)" id="@(FieldName)" name="@(FieldName)" placeholder="Type here">
                                                                            }
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypeAmount:
                                                                            <div class="input-group mb-2">
                                                                                <div class="input-group-prepend">
                                                                                    <div class="input-group-text">MYR</div>
                                                                                </div>
                                                                                <input type="text" class="form-control text-right" v-model="RIData.@(FieldName)" id="@(FieldName)" name="@(FieldName)" placeholder="0.00">
                                                                                @*@Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })*@
                                                                            </div>
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypePercentage:
                                                                            <div class="input-group mb-2">
                                                                                <div class="input-group-prepend">
                                                                                    <div class="input-group-text">%</div>
                                                                                </div>
                                                                                <input type="text" class="form-control text-right" v-model="RIData.@(FieldName)" id="@(FieldName)" name="@(FieldName)" placeholder="Type here">
                                                                                @*@Html.Editor(FieldName, new { htmlAttributes = new { @class = "form-control text-right", placeholder = "Type here" } })*@
                                                                            </div>
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypeDropDown:
                                                                            IList<BusinessObject.PickListDetailBo> pickListDetails = Services.PickListDetailService.GetByStandardOutputId(item.Id);
                                                                            var listItems = pickListDetails.Select(i => new SelectListItem
                                                                            {
                                                                                Value = i.Code,
                                                                                Text = string.Format("{0} - {1}", i.Code, i.Description)
                                                                            });

                                                                            @*<select v-model="RIData.@(FieldName)" class="form-control selectpicker" data-container="body" id="@(FieldName)" name="@(FieldName)" ref="select">
                                                                                    @{
                                                                                        foreach (var l in listItems)
                                                                                        {
                                                                                            <option value="@l.Value">@l.Text</option>
                                                                                        }
                                                                                    }
                                                                                </select>*@
                                                                            @Html.DropDownList(FieldName, listItems, "Please select", htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @ref = "select", @v_model = string.Format("RIData.{0}", FieldName) })
                                                                            break;
                                                                        case BusinessObject.StandardOutputBo.DataTypeBoolean:
                                                                            <select v-model="RIData.@(FieldName)" class="form-control selectpicker" data-container="body" id="@(FieldName)" name="@(FieldName)" ref="select">
                                                                                <option value="">Please Select</option>
                                                                                <option value="false">False</option>
                                                                                <option value="true">True</option>
                                                                            </select>
                                                                            break;
                                                                        default:
                                                                            break;
                                                                    }
                                                                }
                                                            </div>
                                                        </td>
                                                        <td class="w-35">
                                                            @{
                                                                if (!string.IsNullOrEmpty(Model.Errors) && ViewBag.Errors != null)
                                                                {
                                                                    foreach (var error in ViewBag.Errors)
                                                                    {
                                                                        if (error.Key == propertyName)
                                                                        {
                                                                            <ul>
                                                                                @{
                                                                                    if (error.Value is string)
                                                                                    {
                                                                                        <li>@(error.Value)</li>
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        foreach (var errorVal in error.Value)
                                                                                        {
                                                                                            <li>@(errorVal)</li>
                                                                                        }
                                                                                    }
                                                                                }
                                                                            </ul>
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        </td>
                                                        <td class="w-5"></td>
                                                    </tr>
                                                }
                                            }
                                            <tr>
                                                <td class="w-30">ORIGINAL_ENTRY</td>
                                                <td class="w-30">
                                                    <div class="ToggleStandardOutput">@Model.OriginalEntryId</div>
                                                    <div class="ToggleStandardOutput" style="display: none;">
                                                        <div class="input-group">
                                                            <input class="form-control" id="OriginalEntryMatchStr" readonly v-model="OriginalEntryMatchStatus" />
                                                            <div class="input-group-append">
                                                                <input type="button" class="btn btn-generate" id="matchOriEntry" data-toggle="modal" data-target="#matchOriEntryModal" v-on:click="resetMatchInfo()" value="Match" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="w-35">
                                                    @{
                                                        if (!string.IsNullOrEmpty(Model.Errors) && ViewBag.Errors != null && ViewBag.Errors.ContainsKey("OriginalEntryId"))
                                                        {
                                                            var error = ViewBag.Errors["OriginalEntryId"];
                                                            if (error != null)
                                                            {
                                                                <ul>
                                                                    @{
                                                                        if (error is string)
                                                                        {
                                                                            <li>@(error)</li>
                                                                        }
                                                                        else
                                                                        {
                                                                            foreach (var errorVal in error)
                                                                            {
                                                                                <li>@(errorVal)</li>
                                                                            }
                                                                        }
                                                                    }
                                                                </ul>
                                                            }
                                                        }
                                                    }
                                                </td>
                                                <td class="w-5"></td>
                                            </tr>
                                        </tbody>
                                    </table>

                                </div>
                            </div>
                            <div class="tab-pane fade" id="reference" role="tabpanel" aria-labelledby="reference-tab">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th class="w-50">
                                                    Label
                                                </th>
                                                <th class="w-50">
                                                    Value
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                if (!string.IsNullOrEmpty(Model.CustomField) && ViewBag.CustomFields != null)
                                                {
                                                    foreach (var item in ViewBag.CustomFields)
                                                    {
                                                        <tr>
                                                            <td>@item.Key</td>
                                                            <td>@item.Value</td>
                                                        </tr>
                                                    }
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td colspan="2" class="no-data">No available data found.</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Edit", new { id = Model.RiDataBatchId }, new { @class = "btn btn-cancel" })
                        @if (ViewBag.ReadOnly)
                        {
                            <span class="btn btn-del disabled">DELETE</span>
                        }
                        else
                        {
                            @Html.ActionLink("DELETE", "DeleteRiDataDetails", new { id = Model.Id }, new { @class = "btn btn-del" })
                        }
                        <button type="submit" class="btn btn-submit float-right" @(ViewBag.EditRiData == true && Model.FinishLoading == true ? "" : "disabled")>SAVE</button>
                    </div>
                </div>
            </div>
        }

        <div class="modal fade" id="matchOriEntryModal" tabindex="-1" role="dialog" aria-labelledby="matchOriEntryModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Match Original Entry</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div v-if="MatchOriginalDataValidation.length" class="alert alert-danger" role="alert">
                            <ul>
                                <li v-for="(validation, index) in MatchOriginalDataValidation">{{validation}}</li>
                            </ul>
                        </div>
                        <div class="form-horizontal">
                            <div class="form-row">
                                <div class="form-group col-md-12" style="padding-bottom: 0;">
                                    <span class="font-weight-bold">@Html.Label("Search", htmlAttributes: new { @class = "col-form-label" })</span>
                                    <div class="form-row">
                                        <div class="form-group col-md-6 mid-line-1">
                                            <label class="col-form-label">Policy No</label>
                                            <input type="text" class="form-control" placeholder="Type here" v-model="MatchOriEntryModal.PolicyNo" />
                                        </div>
                                        <div class="form-group col-md-6 mid-line-2">
                                            <label class="col-form-label">Plan Code</label>
                                            <input type="text" class="form-control" placeholder="Type here" v-model="MatchOriEntryModal.PlanCode" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6 mid-line-1">
                                            <label class="col-form-label">SOA Quarter</label>
                                            <input type="text" class="form-control" id="SOAQuarter" placeholder="YYYY MM" autocomplete="off" v-model="MatchOriEntryModal.SOAQuarter" v-on:focus="openQuarterPicker('SOAQuarter')" />
                                        </div>
                                        <div class="form-group col-md-6 mid-line-2">
                                            <label class="col-form-label">Risk Quarter</label>
                                            <input type="text" class="form-control" id="RiskQuarter" placeholder="YYYY MM" autocomplete="off" v-model="MatchOriEntryModal.RiskQuarter" v-on:focus="openQuarterPicker('RiskQuarter')" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6 mid-line-1">
                                            <label class="col-form-label">MLRe Benefit Code</label>
                                            <select v-model="MatchOriEntryModal.MlreBenefitCodes" class="form-control selectpicker" data-container="body" id="MlreBenefitCodes" name="MlreBenefitCodes" ref="select">
                                                <option v-for="benefit in Benefits" :value="benefit.Value">{{ benefit.Text }}</option>
                                            </select>
                                        </div>
                                        <div class="form-group col-md-6 mid-line-2">
                                            <label class="col-form-label">Ceding Benefit Type Code</label>
                                            <select v-model="MatchOriEntryModal.CedingBenefitTypeCodes" class="form-control selectpicker" data-container="body" id="CedingBenefitTypeCodes" name="CedingBenefitTypeCodes" ref="select">
                                                <option v-for="valuation in ValuationBenefitCode" :value="valuation.Value">{{ valuation.Text }}</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6 mid-line-1">
                                            <label class="col-form-label">Risk Period Year</label>
                                            <input type="text" class="form-control" id="RiskPeriodYears" placeholder="YYYY MM" autocomplete="off" v-model="MatchOriEntryModal.RiskPeriodYears" v-on:focus="openYearPicker('RiskPeriodYears')" />
                                        </div>
                                        <div class="form-group col-md-6 mid-line-2">
                                            <label class="col-form-label">Risk Period Month</label>
                                            <select v-model="MatchOriEntryModal.RiskPeriodMonths" class="form-control selectpicker" data-container="body" id="RiskPeriodMonths" name="RiskPeriodMonths" ref="select">
                                                <option v-for="period in PeriodMonth" :value="period.Value">{{ period.Text }}</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6 mid-line-1">
                                            <label class="col-form-label">Treaty Code</label>
                                            <select v-model="MatchOriEntryModal.TreatyCode" class="form-control selectpicker" data-container="body" id="TreatyCodes" name="TreatyCodes" ref="select">
                                                <option v-for="dropDownTreatyCode in DropDownTreatyCodes" :value="dropDownTreatyCode.Value">{{ dropDownTreatyCode.Text }}</option>
                                            </select>
                                        </div>
                                        <div class="form-group col-md-6 mid-line-2">
                                            <label class="col-form-label">Rider Number</label>
                                            <input type="number" class="form-control" id="RiderNumbers" name="RiderNumbers" placeholder="Type here" v-model="MatchOriEntryModal.RiderNumber" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-12 text-right">
                                            <button v-on:click="searchMatch()" type="button" class="btn btn-submit">SEARCH</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-row mt-4" v-if="RIDatas.length != 0">
                                <div class="form-group col-md-12" style="padding-bottom: 0;">
                                    <span class="font-weight-bold">@Html.Label("Copy and Overwrite Data", htmlAttributes: new { @class = "col-form-label" })</span>
                                    <div class="form-row">
                                        <div class="form-group col-md-12">
                                            <div class="row m-0 p-0">
                                                <div> <p style="color: #004BA2;">No</p> </div>
                                                <div class="custom-control custom-switch" style="padding-left:1rem;">
                                                    <input type="checkbox" class="custom-control-input" v-model="isCopyOverwriteData" id="CopyOverwriteDataSwitch" name="CopyOverwriteData" value="true">
                                                    <label class="custom-control-label" for="CopyOverwriteDataSwitch">Yes</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-hover" id="MatchRiData">
                                    <thead>
                                        <tr style="display: block;">
                                            <th class="w-10">SOA Quarter</th>
                                            <th class="w-15">Policy No</th>
                                            <th class="w-10">Policy Issue Date</th>
                                            <th class="w-10">Treaty</th>
                                            <th class="w-10">Reinsurance Effective Date</th>
                                            <th class="w-10">Policy Term</th>
                                            <th class="w-10">Policy Expiry Date</th>
                                            <th class="w-10">Risk Period Month</th>
                                            <th class="w-10">Risk Period Year</th>
                                            <th class="w-10">MLRe Benefit Code</th>
                                            <th class="w-10">Ceding Plan Code</th>
                                            <th class="w-10">Family Name</th>
                                            <th class="w-10">Gender Code</th>
                                            <th class="w-10">Date of Birth</th>
                                            <th class="w-5" :hidden="!isCopyOverwriteData">&nbsp;</th>
                                            <th class="w-5">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody style="display: block; overflow: auto; width: 100%;">
                                        <tr v-if="!RIDatas.length">
                                            <td colspan="14" class="no-data">No available data found.</td>
                                        </tr>
                                        <tr v-for="(riData, index) in RIDatas">
                                            <td class="w-10">{{ riData.Quarter }}</td>
                                            <td class="w-15">{{ riData.PolicyNumber }}</td>
                                            <td class="w-10">{{ setDateFormat(riData.IssueDatePol) }}</td>
                                            <td class="w-10">{{ riData.TreatyCode }}</td>
                                            <td class="w-10">{{ setDateFormat(riData.ReinsEffDatePol) }}</td>
                                            <td class="w-10">{{ riData.PolicyTerm }}</td>
                                            <td class="w-10">{{ setDateFormat(riData.PolicyExpiryDate) }}</td>
                                            <td class="w-10">{{ riData.RiskPeriodMonth }}</td>
                                            <td class="w-10">{{ riData.RiskPeriodYear }}</td>
                                            <td class="w-10">{{ riData.MlreBenefitCode }}</td>
                                            <td class="w-10">{{ riData.CedingPlanCode }}</td>
                                            <td class="w-10">{{ riData.InsuredName }}</td>
                                            <td class="w-10">{{ riData.InsuredGenderCode }}</td>
                                            <td class="w-10">{{ setDateFormat(riData.InsuredDateOfBirth) }}</td>
                                            <td class="w-5" :hidden="!isCopyOverwriteData">
                                                <a v-bind:href="viewRiDataLink(index)" title="View" target="_blank">
                                                    <span class="fas fa-eye" />
                                                </a>
                                            </td>
                                            <td class="w-5">
                                                <input type="radio" name="checkedRidata" :value="index" @*v-model="checkedSelect"*@ />
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-cancel float-left" data-dismiss="modal">CANCEL</button>
                        <button type="button" class="btn btn-submit" id="submit" v-on:click="selectMatch()" :disabled="RIDatas.length == 0">SELECT</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@Html.Partial("_BackToList")


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script type="text/javascript">
        var RIDataModel = @Html.Raw(Json.Encode(Model));
        var RIDataRecordTypeList = @Html.Raw(Json.Encode(ViewBag.RecordTypeList));
        var PreComputation1StatusList = @Html.Raw(Json.Encode(ViewBag.PreComputation1StatusList));
        var PreValidationStatusList = @Html.Raw(Json.Encode(ViewBag.PreValidationStatusList));
        var RIDataItems = [];
        var GetRIDataMatchUrl = "@(Url.Action("GetRiDataByMatchCombination"))";
        var GetOriginalRiDataUrl = "@(Url.Action("GetOriginalRiDataById"))";
        var BenefitList = @Html.Raw(Json.Encode(ViewBag.DropDownBenefits));
        var DropDownTreatyCodes = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyCodes));
        var PeriodMonthList = @Html.Raw(Json.Encode(ViewBag.PeriodMonthItems));
        var DropDownYears = @Html.Raw(Json.Encode(ViewBag.DropDownYears));
        var ValuationBenefitCodeList = @Html.Raw(Json.Encode(ViewBag.ValuationBenefitCodeItems));
        var ViewWarehouseUrl = "@(Url.Action("Edit", "RiDataWarehouse"))";

        $(document).ready(function () {
            dateOffAutoComplete();

            $('#Label').on("keypress", function (e) {
                if (e.keyCode == 13) {
                    SearchFilter();
                    return false;
                }
            });

            if ('@Model.Id' == '0') {
                ToggleStandardOutput();
            }
        });

        function ToggleStandardOutput() {
            $('#editBtn').prop("disabled", true);
            $(".ToggleStandardOutput").toggle();
        }

        function SearchFilter() {
            var searchVal = $("#Label").val().toUpperCase();

            $("table tbody tr").each(function (index) {
                $row = $(this);
                //if (index !== 0) { }

                var codeVal = $row.find("td:first").text();
                var dataVal = $row.find("td:nth-last-child(3)").find("div:first").text();
                var errorVal = $row.find("td:nth-last-child(2)").text();

                if ($('#Error').prop("checked") == true) {
                    if (errorVal.trim() === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else if ($('#DataValue').prop("checked") == true) {
                    if (dataVal.trim() === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else if (searchVal !== '') {
                    if (codeVal.indexOf(searchVal) === -1) {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else {
                    if (codeVal.indexOf(searchVal) === -1 && dataVal.trim() === '' && errorVal === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
            });
        }

        function SearchClear() {
            $("#Label").val('');
            $('#DataValue').prop('checked', false)
            $('#Error').prop('checked', false)

            var rows = $('table tbody tr');
            rows.show();
        }

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        var app = new Vue({
            el: '#app',
            data: {
                RIData: RIDataModel,
                MatchOriEntryModal: {
                    PolicyNo: null,
                    PlanCode: null,
                    SOAQuarter: null,
                    RiskQuarter: null,
                    MlreBenefitCodes: "",
                    CedingBenefitTypeCodes: "",
                    RiskPeriodMonths: "",
                    RiskPeriodYears: "",
                    TreatyCode: "",
                    RiderNumber: null,
                },
                RIDatas: RIDataItems,
                RecordTypes: RIDataRecordTypeList,
                PreComputation1Status: PreComputation1StatusList,
                PreValidationStatus: PreValidationStatusList,
                isCopyOverwriteData: false,
                checkedSelect: null,
                MatchOriginalDataValidation: [],
                OriginalEntryMatchStatus: '',
                Benefits: BenefitList,
                DropDownTreatyCodes: DropDownTreatyCodes,
                ValuationBenefitCode: ValuationBenefitCodeList,
                PeriodMonth: PeriodMonthList,
                DropDownYears: DropDownYears,
            },
            methods: {
                setDateFormat: function (date) {
                    return moment(date).format('DD MMM YYYY');
                },
                openDatePicker: function (field) {
                    var id = '#' + field;

                    if (typeof $(id).data("datepicker") === 'undefined') {
                        var config = {
                            format: DateFormatDatePickerJs,
                            autoclose: true,
                        };

                        var ids = ['#ReinsEffDatePolStr', '#InsuredDateOfBirthStr', '#InsuredDateOfBirth2ndStr'];
                        if (ids.includes(id))
                            config.endDate = '-1d';

                        if (id.includes("Quarter")) {
                            var config = {
                                format: QuarterDateFormat,
                                minViewMode: 1,
                                autoclose: true,
                                language: "qtrs",
                                forceParse: false
                            };
                        }

                        $(id).datepicker(config);

                        if (id.includes("Quarter")) {
                            $(id).on('show', function (e) {
                                $('.datepicker').addClass('quarterpicker');
                            });
                        }

                        var setMatchValue = this.setMatchValue;
                        $(id).on('changeDate', function () {
                            setMatchValue(field, $(id).val());
                        });
                    }

                    $(id).focus();
                },
                setMatchValue: function (id, value) {
                    this.RIData[id] = value;
                },
                openQuarterPicker: function (currentId) {
                    var idStr = currentId;

                    var id = "#" + currentId;
                    if ($(id).data("datepicker") != null) {
                        $(id).datepicker("destroy");
                    }

                    $(id).datepicker({
                        format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
                        minViewMode: 1,
                        autoclose: true,
                        language: "qtrs",
                        forceParse: false,
                    }).on('show', function (e) {
                        var datepickerDropDown = $('.datepicker');
                        datepickerDropDown.addClass('quarterpicker');
                    });

                    var updateDateValue = this.updateDateValue;
                    $(id).on('changeDate', function () {
                        updateDateValue(idStr, $(id).val());
                    });

                    $(id).focus();
                },
                openYearPicker: function (currentId) {
                    var idStr = currentId;

                    var id = "#" + currentId;
                    if ($(id).data("datepicker") != null) {
                        $(id).datepicker("destroy");
                    }

                    $(id).datepicker({
                        format: 'yyyy',
                        viewMode: "years",
                        minViewMode: "years",
                        autoclose: true,
                    }).on('show', function (e) {
                        var datepickerDropDown = $('.datepicker');
                        datepickerDropDown.addClass('quarterpicker');
                    });

                    var updateDateValue = this.updateDateValue;
                    $(id).on('changeDate', function () {
                        updateDateValue(idStr, $(id).val());
                    });

                    $(id).focus();
                },
                updateDateValue: function (field, value) {
                    var typeStr = "MatchOriEntryModal";
                    this[typeStr][field] = value;
                },
                validateOriginalMatchData: function () {
                    this.MatchOriginalDataValidation = [];
                    var validation = new Array();

                    if (this.MatchOriEntryModal.PolicyNo == null && this.MatchOriEntryModal.PlanCode == null && this.MatchOriEntryModal.SOAQuarter == null
                        && this.MatchOriEntryModal.RiskQuarter == null && this.MatchOriEntryModal.MlreBenefitCodes == "" && this.MatchOriEntryModal.CedingBenefitTypeCodes == ""
                        && this.MatchOriEntryModal.RiskPeriodMonths == "" && this.MatchOriEntryModal.RiskPeriodYears == "" && this.MatchOriEntryModal.TreatyCode == "" && this.MatchOriEntryModal.RiderNumber == null) {
                        validation.push("Please key-in information for searching");
                    }

                    if (validation.length !== 0) {
                        this.MatchOriginalDataValidation = validation;
                    }

                    return this.MatchOriginalDataValidation.length == 0;
                },
                resetMatchInfo: function () {
                    this.MatchOriEntryModal.PolicyNo = this.RIData.PolicyNumber;
                    this.MatchOriEntryModal.PlanCode = this.RIData.CedingPlanCode;
                    this.MatchOriEntryModal.MlreBenefitCodes = this.RIData.MlreBenefitCode;
                    this.MatchOriEntryModal.CedingBenefitTypeCodes = this.RIData.CedingBenefitTypeCode;
                    this.MatchOriEntryModal.RiskPeriodMonths = this.RIData.RiskPeriodMonth;
                    this.MatchOriEntryModal.RiskPeriodYears = this.RIData.RiskPeriodYear;
                    this.MatchOriEntryModal.TreatyCode = this.RIData.TreatyCode;
                    this.MatchOriEntryModal.RiderNumber = this.RIData.RiderNumber;
                    if (this.RIData.RiDataBatchBo != null) {
                        this.MatchOriEntryModal.SOAQuarter = this.RIData.RiDataBatchBo.Quarter;
                        this.MatchOriEntryModal.RiskQuarter = this.RIData.RiDataBatchBo.Quarter;
                    }
                    else {
                        this.MatchOriEntryModal.SOAQuarter = null;
                        this.MatchOriEntryModal.RiskQuarter = null;
                    }

                    this.$nextTick(function () {
                        $('#MlreBenefitCodes').selectpicker('refresh');
                        $('#CedingBenefitTypeCodes').selectpicker('refresh');
                        $('#TreatyCodes').selectpicker('refresh');
                        $('#RiskPeriodMonths').selectpicker('refresh');
                        $('#RiskPeriodYears').selectpicker('refresh');
                    });

                    this.MatchOriginalDataValidation = [];
                    this.isCopyOverwriteData = false;

                    this.searchMatch();
                },
                searchMatch: function () {
                    if (!this.validateOriginalMatchData()) {
                        return;
                    }

                    var obj = {
                        policyNo: this.MatchOriEntryModal.PolicyNo,
                        planCode: this.MatchOriEntryModal.PlanCode,
                        quarter: this.MatchOriEntryModal.SOAQuarter,
                        riskQuarter: this.MatchOriEntryModal.RiskQuarter,
                        mlreBenefitCode: this.MatchOriEntryModal.MlreBenefitCodes,
                        cedingBenefitTypeCode: this.MatchOriEntryModal.CedingBenefitTypeCodes,
                        riskPeriodMonth: this.MatchOriEntryModal.RiskPeriodMonths,
                        riskPeriodYear: this.MatchOriEntryModal.RiskPeriodYears,
                        treatyCode: this.MatchOriEntryModal.TreatyCode,
                        riderNumber: this.MatchOriEntryModal.RiderNumber,
                    };

                    var riDatas = [];
                    $.ajax({
                        url: GetRIDataMatchUrl ? GetRIDataMatchUrl : null,
                        type: "POST",
                        data: obj,
                        cache: false,
                        async: false,
                        success: function (data) {
                            riDatas = data.riDataBos;
                        }
                    });
                    this.RIDatas = riDatas;
                    if (typeof this.RIDatas !== 'undefined' && (this.RIDatas == null || !this.RIDatas.length)) {
                        this.MatchOriginalDataValidation.push("No match found");
                        $('#MatchRiData tbody').css('height', 'unset');
                    }

                    if (typeof this.RIDatas !== 'undefined' && this.RIDatas != null && this.RIDatas.length > 0) {
                        if (this.RIDatas.length > 10)
                            $('#MatchRiData tbody').css('height', '300px');
                        this.MatchOriginalDataValidation = [];
                    }
                },
                selectMatch: function () {
                    var index = $('input[name="checkedRidata"]:checked').val();
                    if (typeof index == 'undefined') {
                        this.MatchOriginalDataValidation.push("No RI Data selected.");
                        return;
                    }

                    var checkedCopyOverwrite = this.isCopyOverwriteData;
                    var item = null;
                    item = this.RIDatas[index];

                    var obj = {
                        id: this.RIData.Id,
                        ridataBatchId: this.RIData.RiDataBatchId,
                        bo: item,
                    };

                    var riData = null;
                    if (checkedCopyOverwrite == true) {
                        $.ajax({
                            url: GetOriginalRiDataUrl ? GetOriginalRiDataUrl : null,
                            type: "POST",
                            data: obj,
                            cache: false,
                            async: false,
                            success: function (data) {
                                riData = data.model;
                            }
                        });
                        this.RIData = riData;
                    }
                    $("#OriginalEntryId").val(item.Id);
                    this.OriginalEntryMatchStatus = 'Matched';

                    $('#matchOriEntryModal').modal('toggle');
                },
                viewRiDataLink: function (index) {
                    var item = this.RIDatas[index];
                    if (item != null && item.Id != '') {
                        var url = ViewWarehouseUrl + '/' + item.Id;
                        return url;
                    }
                },
            },
            watch: {
                checkedSelect(value) {
                    //console.log(value)
                },
                isCopyOverwriteData(value) {
                    //console.log(value)
                }
            },
            created: function () {
                this.OriginalEntryMatchStatus = (this.RIData.OriginalEntryId) ? 'Matched' : '';
            },
            updated() {
                //this.$nextTick(function () { $('.selectpicker').selectpicker('refresh'); });
                $(this.$refs.select).selectpicker('refresh');
            }
        });
    </script>
}

