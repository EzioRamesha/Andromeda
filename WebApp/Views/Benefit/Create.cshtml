@model WebApp.Models.BenefitViewModel

@{
    ViewBag.Title = "Benefit Code";
    ViewBag.Action = "Create";
    ViewBag.ListPageUrl = Url.Action("Index");
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="form-row">
                <div class="form-group col-md-6 mid-line-1">
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here", maxlength = @ViewBag.CodeMaxLength } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 mid-line-2">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-form-label" })
                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6 mid-line-1">
                    @Html.LabelFor(model => model.EffectiveStartDateStr, htmlAttributes: new { @class = "col-form-label" })
                    <div class="input-w-icon">
                        @Html.TextBoxFor(model => model.EffectiveStartDateStr, new { id = "EffectiveStartDate", @class = "form-control", placeholder = "DD MM YYYY" })
                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('EffectiveStartDate')" />
                    </div>
                    @Html.ValidationMessageFor(model => model.EffectiveStartDateStr, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 mid-line-2">
                    @Html.LabelFor(model => model.EffectiveEndDateStr, htmlAttributes: new { @class = "col-form-label" })
                    <div class="input-w-icon">
                        @Html.TextBoxFor(model => model.EffectiveEndDateStr, new { id = "EffectiveEndDate", @class = "form-control", placeholder = "DD MM YYYY" })
                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('EffectiveEndDate')" />
                    </div>
                    @Html.ValidationMessageFor(model => model.EffectiveEndDateStr, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6 mid-line-1">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 mid-line-2">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                    @Html.DropDownListFor(model => model.Status, (List<SelectListItem>)ViewBag.StatusList, htmlAttributes: new { @class = "form-control selectpicker" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-row mt-4">
                <div class="form-group col-md-6 mid-line-1">
                    @Html.LabelFor(model => model.ValuationBenefitCodePickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                    @Html.DropDownListFor(model => model.ValuationBenefitCodePickListDetailId, (List<SelectListItem>)ViewBag.ValuationBenefitCodeItems, htmlAttributes: new { @class = "form-control selectpicker" })
                    @Html.ValidationMessageFor(model => model.ValuationBenefitCodePickListDetailId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 mid-line-2">
                    @Html.LabelFor(model => model.GST, htmlAttributes: new { @class = "col-form-label" })
                    <div class="row m-0 p-0">
                        <div> <p style="color: #004BA2;">No</p> </div>
                        <div class="custom-control custom-switch" style="padding-left:1rem;">
                            @Html.CheckBoxFor(model => model.GST, new { @class = "custom-control-input", id = "GSTSwitch" })
                            <label class="custom-control-label" for="GSTSwitch">Yes</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-md-6 mid-line-1">
                    @Html.LabelFor(model => model.BenefitCategoryPickListDetailId, htmlAttributes: new { @class = "col-form-label" })
                    @Html.DropDownListFor(model => model.BenefitCategoryPickListDetailId, (List<SelectListItem>)ViewBag.BenefitCategoryItems, htmlAttributes: new { @class = "form-control selectpicker" })
                    @Html.ValidationMessageFor(model => model.BenefitCategoryPickListDetailId, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
            </div>
            <div class="form-row" id="app">
                <div class="form-group col-md-12">
                    <div class="text-right">
                        <button type="button" v-on:click="addNew" class="btn btn-add-sub mt-4">ADD NEW</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-hover my-3">
                            <thead>
                                <tr>
                                    <th style="display:none"></th>
                                    <th class="w-50">MLRe Event Code</th>
                                    <th class="w-45">Claim Code</th>
                                    <th class="text-center w-5">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-if="!BenefitDetails.length">
                                    <td colspan="3" class="no-data">No available data found.</td>
                                </tr>
                                <tr v-for="(benefitDetail, index) in BenefitDetails">
                                    <td style="display:none">
                                        <input type="hidden" :name="'benefitDetailId[' + index + ']'" class="form-control" :value="benefitDetail.Id">
                                    </td>
                                    <td>
                                        <select v-model="benefitDetail.EventCodeId" class="form-control selectpicker" ref="select" :id="'eventCode[' + index + ']'" :name="'eventCode[' + index + ']'" data-container="body">
                                            <option v-for="mlreEventCode in filterEventCodes(index)" :value="mlreEventCode.Value">{{ mlreEventCode.Text }}</option>
                                        </select>
                                    </td>
                                    <td>
                                        <select v-model="benefitDetail.ClaimCodeId" class="form-control selectpicker" ref="select" :id="'claimCode[' + index + ']'" :name="'claimCode[' + index + ']'" data-container="body">
                                            <option v-for="claimCode in filterClaimCodes(index)" :value="claimCode.Value">{{ claimCode.Text }}</option>
                                        </select>
                                    </td>
                                    <td class="text-center">
                                        <a href="javascript:void(0);" v-on:click="removeBenefitDetail(index)"><span class="fas fa-trash-alt" /></a>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="form-row form-row-btn">
                <div class="form-group col-md-12 btn-row">
                    @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                    <button type="submit" class="btn btn-submit float-right">SAVE</button>
                </div>
            </div>
        </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var BenefitModel = @Html.Raw(Json.Encode(Model));
        var BenefitDetails = @Html.Raw(Json.Encode(ViewBag.BenefitDetailBos));
        var MLReEventCodes = @Html.Raw(Json.Encode(ViewBag.DropDownEventCodes));
        var ClaimCodes = @Html.Raw(Json.Encode(ViewBag.DropDownClaimCodes));
        var GetClaimCodesUrl = "@(Url.Action("GetClaimCodes"))";
        var GetEventCodesUrl = "@(Url.Action("GetEventCodes"))";

        $(document).ready(function () {
            $('#Description').autoResize();
        });
    </script>
    @Scripts.Render("~/Scripts/models/Benefit.js")
}
