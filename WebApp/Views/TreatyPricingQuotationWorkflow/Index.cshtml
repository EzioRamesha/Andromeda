@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.TreatyPricingQuotationWorkflowViewModel>

@{
    ViewBag.Title = "Quotation Workflow";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card" id="app">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="btn btn-group" style="display:inline-flex;">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                        {
                            type = 2,
                            QuotationId = routeValue["QuotationId"],
                            CreatedAt = routeValue["CreatedAt"],
                            CedantId = routeValue["CedantId"],
                            ReinsuranceTypePickListDetailId = routeValue["ReinsuranceTypePickListDetailId"],
                            Name = routeValue["Name"],
                            Description = routeValue["Description"],
                            LatestVersion = routeValue["LatestVersion"],
                            Status = routeValue["Status"],
                            PricingStatus = routeValue["PricingStatus"],
                            PricingTeamPickListDetailId = routeValue["PricingTeamPickListDetailId"],
                            BDPersonInChargeId = routeValue["BDPersonInChargeId"],
                            PersonInChargeId = routeValue["PersonInChargeId"],
                            InternalTeam = routeValue["InternalTeam"],
                            IdList = routeValue["IdList"],
                            FromQuotationDashboard = routeValue["FromQuotationDashboard"],
                        }, new { @class = "dropdown-item" })
                    </div>
                </div>
                <button class="btn btn-add" v-on:click="resetQuotationWorkflowModal()" data-toggle="modal" data-target="#addQuotationWorkflowModal">ADD NEW</button>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortQuotationId;
                                @Shared.Html.Sorter(ViewBag, "Quotation ID", "QuotationId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCreatedAt;
                                @Shared.Html.Sorter(ViewBag, "Date Created", "CreatedAt", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedantId;
                                @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedantId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortReinsuranceTypePickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Reinsurance Type", "ReinsuranceTypePickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortName;
                                @Shared.Html.Sorter(ViewBag, "Quotation Name", "Name", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDescription;
                                @Shared.Html.Sorter(ViewBag, "Description", "Description", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortLatestVersion;
                                @Shared.Html.Sorter(ViewBag, "Latest Version", "LatestVersion", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortStatus;
                                @Shared.Html.Sorter(ViewBag, "Status", "Status", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPricingStatus;
                                @Shared.Html.Sorter(ViewBag, "Pricing Status", "PricingStatus", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPricingTeamPickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Pricing Team", "PricingTeamPickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortBDPersonInChargeId;
                                @Shared.Html.Sorter(ViewBag, "BD Person In-Charge", "BDPersonInChargeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPersonInChargeId;
                                @Shared.Html.Sorter(ViewBag, "Person In-Charge", "PersonInChargeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            Checklist Status
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "TreatyPricingQuotationWorkflow", FormMethod.Get))
                        {
                            string sortOrder = ViewBag.SortOrder;

                            @Html.Hidden("SortOrder", sortOrder)
                            <th>
                                @Html.TextBox("QuotationId", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("CreatedAt", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('CreatedAt')" />
                            </th>
                            <th>
                                @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("ReinsuranceTypePickListDetailId", (List<SelectListItem>)ViewBag.DropDownReinsuranceTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("Name", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("Description", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("LatestVersion", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("Status", (List<SelectListItem>)ViewBag.StatusItems, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PricingStatus", (List<SelectListItem>)ViewBag.PricingStatusItems, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PricingTeamPickListDetailId", (List<SelectListItem>)ViewBag.DropDownPricingTeam, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("BDPersonInChargeId", (List<SelectListItem>)ViewBag.UsersBD, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("PersonInChargeId", (List<SelectListItem>)ViewBag.UsersPricing, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("InternalTeam", (List<SelectListItem>)ViewBag.DropDownQuotationPendingChecklists, htmlAttributes: new { @class = "form-control selectpicker prevent-disable", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="button" title="Search" class="btn-circle" id="searchBtn"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.QuotationId)
                            </td>
                            <td>
                                @if (item.CreatedAt.HasValue)
                                {
                                    @item.CreatedAt.Value.ToString(Shared.Util.GetDateFormat())
                                }
                            </td>
                            <td>
                                @item.Cedant.ToString()
                            </td>
                            <td>
                                @item.ReinsuranceTypePickListDetail.ToString()
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Description)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.LatestVersion)
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.TreatyPricing.TreatyPricingQuotationWorkflowBo.GetStatusClass(item.Status)">
                                    @BusinessObject.TreatyPricing.TreatyPricingQuotationWorkflowBo.GetStatusName(item.Status)
                                </span>
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.TreatyPricing.TreatyPricingQuotationWorkflowBo.GetPricingStatusClass(item.PricingStatus)">
                                    @BusinessObject.TreatyPricing.TreatyPricingQuotationWorkflowBo.GetPricingStatusName(item.PricingStatus)
                                </span>
                            </td>
                            <td>
                                @item.PricingTeamPickListDetail.ToString()
                            </td>
                            <td>
                                @if (item.BDPersonInCharge != null)
                                {
                                    @Html.DisplayFor(modelItem => item.BDPersonInCharge.FullName)
                                }
                            </td>
                            <td>
                                @if (item.PersonInCharge != null)
                                {
                                    @Html.DisplayFor(modelItem => item.PersonInCharge.FullName)
                                }
                            </td>
                            <td>
                                @{
                                    int count = 0;
                                    int statusApproved = ViewBag.StatusApproved;

                                    if (ViewBag.FromQuotationDashboard == 1)
                                    {
                                        if (item.CEOPending > 1) { count++; }
                                        if (item.PricingPending > 1) { count++; }
                                        if (item.UnderwritingPending > 1) { count++; }
                                        if (item.HealthPending > 1) { count++; }
                                        if (item.ClaimsPending > 1) { count++; }
                                        if (item.BDPending > 1) { count++; }
                                        if (item.TGPending > 1) { count++; }
                                    }
                                    else
                                    {
                                        if (item.CEOPending > 1 && item.CEOPending != statusApproved) { count++; }
                                        if (item.PricingPending > 1 && item.PricingPending != statusApproved) { count++; }
                                        if (item.UnderwritingPending > 1 && item.UnderwritingPending != statusApproved) { count++; }
                                        if (item.HealthPending > 1 && item.HealthPending != statusApproved) { count++; }
                                        if (item.ClaimsPending > 1 && item.ClaimsPending != statusApproved) { count++; }
                                        if (item.BDPending > 1 && item.BDPending != statusApproved) { count++; }
                                        if (item.TGPending > 1 && item.TGPending != statusApproved) { count++; }
                                    }

                                    @(string.Format("{0} Pending(s)", count))
                                }
                            </td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="fas fa-ellipsis-v dropbtn" />
                                    </button>
                                    <div class="dropdown-menu">
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                        @if (item.PricingStatus.HasValue && item.PricingStatus.Value == BusinessObject.TreatyPricing.TreatyPricingQuotationWorkflowBo.PricingStatusUnassigned)
                                        {
                                            <a style="color: #004BA2;" class="dropdown-item" v-on:click="resetQuotationWorkflowAssignModal(@item.Id)" data-toggle="modal" data-target="#assignModal">Assign</a>
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="14" class="no-data">No available data found.</td>
                    </tr>
                }
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        QuotationId = routeValue["QuotationId"],
                        CreatedAt = routeValue["CreatedAt"],
                        CedantId = routeValue["CedantId"],
                        ReinsuranceTypePickListDetailId = routeValue["ReinsuranceTypePickListDetailId"],
                        Name = routeValue["Name"],
                        Description = routeValue["Description"],
                        LatestVersion = routeValue["LatestVersion"],
                        Status = routeValue["Status"],
                        PricingStatus = routeValue["PricingStatus"],
                        BDPersonInChargeId = routeValue["BDPersonInChargeId"],
                        PersonInChargeId = routeValue["PersonInChargeId"],
                        InternalTeam = routeValue["InternalTeam"],
                        IdList = routeValue["IdList"],
                        FromQuotationDashboard = routeValue["FromQuotationDashboard"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="addQuotationWorkflowModal" tabindex="-1" role="dialog" aria-labelledby="addQuotationWorkflowModal" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" id="newQuotationError" style="display:none;"></div>

                    <div class="form">
                        <div class="form-group">
                            <label class="col-form-label">Ceding Company</label>
                            <select v-model="QuotationWorkflowModal.CedantId" id="dropDownCedant" class="form-control selectpicker">
                                <option v-for="cedant in DropDownCedant" :value="cedant.Value">
                                    {{ cedant.Text }}
                                </option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="col-form-label">Reinsurance Type</label>
                            <select v-model="QuotationWorkflowModal.ReinsuranceTypePickListDetailId" id="dropDownReinsuranceType" class="form-control selectpicker">
                                <option v-for="reinsuranceType in DropDownReinsuranceType" :value="reinsuranceType.Value">
                                    {{ reinsuranceType.Text }}
                                </option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="col-form-label">Quotation Name</label>
                            <input type="text" class="form-control" v-model="QuotationWorkflowModal.Name">
                        </div>

                        <div class="form-group">
                            <label class="col-form-label">Description</label>
                            <input type="text" class="form-control" v-model="QuotationWorkflowModal.Description">
                        </div>

                        <div class="form-group">
                            <label class="col-form-label">Pricing Team</label>
                            <select v-model="QuotationWorkflowModal.PricingTeamPickListDetailId" id="dropDownPricingTeam" class="form-control selectpicker">
                                <option v-for="pricingTeam in DropDownPricingTeam" :value="pricingTeam.Value">
                                    {{ pricingTeam.Text }}
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-add" v-on:click="resetLinkObjectModal()" data-toggle="modal" data-target="#addLinkedObjectModal">LINK OBJECT</button>
                </div>

                <div class="modal-body">
                    <div class="form">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th class="w-10">Object</th>
                                        <th class="w-10">Object ID</th>
                                        <th class="w-15">Object Name</th>
                                        <th class="w-5">Version</th>
                                        <th class="w-5 text-center">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-if="!WorkflowObjects.length">
                                        <td colspan="4" class="no-data">No available data found.</td>
                                    </tr>
                                    <tr v-for="(objects, index) in WorkflowObjects">
                                        <td>{{ objects.ObjectTypeName }}</td>
                                        <td>{{ objects.ObjectCode }}</td>
                                        <td>{{ objects.ObjectName }}</td>
                                        <td>{{ objects.ObjectVersion }}</td>
                                        <td class="text-center">
                                            <a href="#" v-on:click="removeWorkflowObject(index);">
                                                <span class="fas fa-trash-alt" />
                                            </a>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-cancel" data-dismiss="modal">CANCEL</button>
                    <button v-on:click="saveQuotationWorkflow()" type="button" class="btn btn-submit">CONFIRM</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="assignModal" tabindex="-1" role="dialog" aria-labelledby="assignModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignModalTitle">Assign</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" id="assignQuotationError" style="display:none;"></div>

                    <div class="form-horizontal">
                        <div class="form-group">
                            <label class="col-form-label">Pricing Person In-Charge</label>
                            <select v-model="QuotationWorkflowAssignModal.PricingPersonInChargeId" id="dropDownAssignPricingPersonInCharge" class="form-control selectpicker">
                                <option v-for="dropDownUsers in DropDownUsers" :value="dropDownUsers.Value">
                                    {{ dropDownUsers.Text }}
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-cancel" data-dismiss="modal">CANCEL</button>
                    <button v-on:click="saveAssign()" type="button" class="btn btn-submit">CONFIRM</button>
                </div>
            </div>
        </div>
    </div>

    @Html.Partial("_TreatyPricingWorkflowObject")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Empty
        var Model = "";

        var TreatyPricingQuotationWorkflows = @Html.Raw(Json.Encode(ViewBag.TreatyPricingQuotationWorkflows));
        var TreatyPricingWorkflowObjectBos = [];

        //Url
        var AddQuotationWorkflowUrl = "@Url.Action("Add", "TreatyPricingQuotationWorkflow")";
        var EditQuotationWorkflowUrl = "@Url.Action("Edit", "TreatyPricingQuotationWorkflow")?Id=";
        var IndexUrl = "@Url.Action("Index")";
        var routeValue = @Html.Raw(Json.Encode(@routeValue));
        var AssignPricingPersonInChargeUrl = "@Url.Action("AssignPricingPersonInCharge", "TreatyPricingQuotationWorkflow")";
        var GetTreatyPricingCedantIdUrl = "@Url.Action("GetTreatyPricingCedantId", "TreatyPricingQuotationWorkflow") ";

        //Dropdowns
        var DropDownCedant = @Html.Raw(Json.Encode(ViewBag.DropDownCedants));
        var DropDownReinsuranceType = @Html.Raw(Json.Encode(ViewBag.DropDownReinsuranceTypes));
        var DropDownPricingTeam = @Html.Raw(Json.Encode(ViewBag.DropDownPricingTeam));
        var DropDownObjectModules = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingObjectModules));
        var DropDownUsers = @Html.Raw(Json.Encode(ViewBag.DropDownUsers));

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        var app = new Vue({
            el: '#app',
            data: {
                TreatyPricingQuotationWorkflows: TreatyPricingQuotationWorkflows ? TreatyPricingQuotationWorkflows : [],
                QuotationWorkflow: Model,
                QuotationWorkflowModal: {
                    CedantId: "",
                    ReinsuranceTypePickListDetailId: "",
                    Name: "",
                    Description: "",
                    PricingTeamPickListDetailId: "",
                    TreatyPricingQuotationWorkflowObjectBos: [{
                        ObjectType: "",
                        ObjectId: "",
                        ObjectVersionId: "",
                    }],
                },
                LinkObjectModal: {
                    ObjectType: "",
                    ObjectId: "",
                    ObjectVersionId: "",
                    ObjectTypeName: "",
                    ObjectCode: "",
                    ObjectName: "",
                    ObjectVersion: "",
                },
                WorkflowObjects: TreatyPricingWorkflowObjectBos,

                DropDownObjects: [],
                DropDownObjectVersions: [],

                QuotationWorkflowAssignModal: {},
            },
            methods: {
                resetQuotationWorkflowModal() {
                    $('#dropDownCedant').selectpicker('val', '');
                    $('#dropDownReinsuranceType').selectpicker('val', '');
                    $('#dropDownPricingTeam').selectpicker('val', '');
                    this.QuotationWorkflowModal.CedantId = "";
                    this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId = "";
                    this.QuotationWorkflowModal.Name = "";
                    this.QuotationWorkflowModal.Description = "";
                    this.QuotationWorkflowModal.PricingTeamPickListDetailId = "";
                    this.QuotationWorkflowModal.TreatyPricingQuotationWorkflowObjectBos.length = 0;

                    this.WorkflowObjects = [];

                    $('#newQuotationError').empty();
                    $('#newQuotationError').hide();
                },
                resetLinkObjectModal() {
                    $('#dropDownObjectType').selectpicker('val', '');
                    $('#dropDownObjectId').selectpicker('val', '');
                    $('#dropDownObjectVersionId').selectpicker('val', '');
                    this.LinkObjectModal.ObjectType = "";
                    this.LinkObjectModal.ObjectId = "";
                    this.LinkObjectModal.ObjectVersionId = "";
                    this.LinkObjectModal.ObjectTypeName = "";
                    this.LinkObjectModal.ObjectCode = "";
                    this.LinkObjectModal.ObjectName = "";
                    this.LinkObjectModal.ObjectVersion = "";

                    $('#linkObjectError').empty();
                    $('#linkObjectError').hide();

                    var objectEmpty = [];
                    refreshDropDownItems("dropDownObjectId", objectEmpty, null, "Text");
                    refreshDropDownItems("dropDownObjectVersionId", objectEmpty, null, "Text");
                },
                updateDropDownObjects() {
                    var treatyPricingCedantId = 0;
                    var getTreatyPricingCedantId = true;

                    if (this.QuotationWorkflowModal.CedantId == null || this.QuotationWorkflowModal.CedantId == "")
                        getTreatyPricingCedantId = false;
                    if (this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == null || this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == "" || this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == "0")
                        getTreatyPricingCedantId = false;
                    if (getTreatyPricingCedantId) {
                        $.ajax({
                            url: GetTreatyPricingCedantIdUrl,
                            type: "POST",
                            cache: false,
                            async: false,
                            data: {
                                cedantId: this.QuotationWorkflowModal.CedantId,
                                reinsuranceTypePickListDetailId: this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId,
                            },
                            success: function (data) {
                                treatyPricingCedantId = data.treatyPricingCedantId;
                            }
                        });
                    }

                    var items = [];
                    var objectTypeName = "";
                    $.ajax({
                        url: GetTreatyPricingObjectsUrl,
                        type: "POST",
                        cache: false,
                        async: false,
                        data: {
                            type: this.LinkObjectModal.ObjectType,
                            cedantId: treatyPricingCedantId,
                        },
                        success: function (data) {
                            items = data.items;
                            objectTypeName = data.objectTypeName;
                        }
                    });
                    this.LinkObjectModal.ObjectTypeName = objectTypeName;


                    this.LinkObjectModal.ObjectVersionId = "";
                    this.$nextTick(function () {
                        refreshDropDownItems("dropDownObjectId", items, null, "Text", "", true, "Value");
                        refreshDropDownItems("dropDownObjectVersionId", [], null, "Text");
                    });

                },
                updateDropDownObjectVersions() {
                    var items = [];
                    var objectCode = "";
                    var objectName = "";
                    var objectType = this.LinkObjectModal.ObjectType;
                    var objectId = this.LinkObjectModal.ObjectId;
                    var ids = [];
                    ids = this.WorkflowObjects.filter(function (o) { return o.ObjectType == objectType && o.ObjectId == objectId }).map(function (o) { return o.ObjectVersionId; });

                    $.ajax({
                        url: GetTreatyPricingObjectVersionsUrl,
                        type: "POST",
                        cache: false,
                        async: false,
                        data: {
                            type: objectType,
                            objectId: objectId,
                            existingVersionIds: ids,
                        },
                        success: function (data) {
                            items = data.items;
                            moduleName = data.moduleName;
                            objectCode = data.objectCode;
                            objectName = data.objectName;
                        }
                    });

                    this.LinkObjectModal.ObjectCode = objectCode;
                    this.LinkObjectModal.ObjectName = objectName;
                    refreshDropDownItems("dropDownObjectVersionId", items, null, "Text", "", true, "Value");
                },

                validateAddQuotationWorkflow() {
                    $('#linkObjectError').empty();
                    $('#linkObjectError').hide();

                    var errors = [];

                    if (this.QuotationWorkflowModal.CedantId == null || this.QuotationWorkflowModal.CedantId == "")
                        errors.push("Ceding Company is required");
                    if (this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == null || this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == "" || this.QuotationWorkflowModal.ReinsuranceTypePickListDetailId == "0")
                        errors.push("Reinsurance Type is required");
                    if (this.QuotationWorkflowModal.Name == null || this.QuotationWorkflowModal.Name == "")
                        errors.push("Quotation Name is required");
                    if (this.QuotationWorkflowModal.Description == null || this.QuotationWorkflowModal.Description == "")
                        errors.push("Description is required");
                    if (this.QuotationWorkflowModal.PricingTeamPickListDetailId == null || this.QuotationWorkflowModal.PricingTeamPickListDetailId == "" || this.QuotationWorkflowModal.PricingTeamPickListDetailId == "0")
                        errors.push("Pricing Team is required");
                    if (this.WorkflowObjects.length == 0)
                        errors.push("At least one object is required");

                    if (errors.length > 0) {
                        $('#newQuotationError').append(arrayToUnorderedList(errors));
                        $('#newQuotationError').show();
                    }

                    return errors.length == 0;
                },
                saveQuotationWorkflow() {
                    if (!this.validateAddQuotationWorkflow())
                        return;

                    var quotationWorkflowBo = $.extend({}, this.QuotationWorkflowModal);
                    quotationWorkflowBo.TreatyPricingWorkflowObjectBos = this.WorkflowObjects;

                    var errorList = [];
                    var resultBo = [];
                    $.ajax({
                        url: AddQuotationWorkflowUrl,
                        type: "POST",
                        data: quotationWorkflowBo,
                        cache: false,
                        async: false,
                        success: function (data) {
                            errorList = data.errors;
                            resultBo = data.quotationWorkflowBo;
                        }
                    });

                    if (errorList.length > 0) {
                        $('#newQuotationError').append(arrayToUnorderedList(errors));
                        $('#newQuotationError').show();
                    }
                    else {
                        window.location.href = EditQuotationWorkflowUrl + resultBo.Id;
                    }
                },
                validateAddObject() {
                    $('#linkObjectError').empty();
                    $('#linkObjectError').hide();

                    var errors = [];

                    if (this.LinkObjectModal.ObjectType == null || this.LinkObjectModal.ObjectType == "" || this.LinkObjectModal.ObjectType == "0")
                        errors.push("Object is required");
                    if (this.LinkObjectModal.ObjectId == null || this.LinkObjectModal.ObjectId == "" || this.LinkObjectModal.ObjectId == "0")
                        errors.push("Object ID is required");
                    if (this.LinkObjectModal.ObjectVersionId == null || this.LinkObjectModal.ObjectVersionId == "" || this.LinkObjectModal.ObjectVersionId == "0")
                        errors.push("Version is required");

                    for (var i = 0; i < this.WorkflowObjects.length; i++) {
                        if (this.WorkflowObjects[i].ObjectType == this.LinkObjectModal.ObjectType) {
                            errors.push("An object for this module type has been selected");
                        }
                    }

                    if (errors.length > 0) {
                        $('#linkObjectError').append(arrayToUnorderedList(errors));
                        $('#linkObjectError').show();
                    }

                    return errors.length == 0;
                },
                addWorkflowObject(save = false) {
                    if (!this.validateAddObject())
                        return;

                    this.LinkObjectModal.ObjectVersion = $('#dropDownObjectVersionId option:selected').text();

                    var workflowObjectBo = $.extend({}, this.LinkObjectModal);
                    var workflowObject = null;
                    if (save) {
                        workflowObjectBo.Type = DocumentType;
                        workflowObjectBo.WorkflowId = this.QuotationWorkflow.Id;

                        $.ajax({
                            url: CreateWorkflowObjectUrl,
                            type: "POST",
                            cache: false,
                            async: false,
                            data: workflowObjectBo,
                            success: function (data) {
                                workflowObject = data.bo;
                            }
                        });
                    } else {
                        workflowObject = workflowObjectBo;
                    }

                    if (workflowObject)
                        this.WorkflowObjects.push(workflowObject);

                    $('#addLinkedObjectModal').modal('hide');
                },
                removeWorkflowObject(index, save = false) {
                    if (save) {
                        var id = this.WorkflowObjects[index].Id;

                        $.ajax({
                            url: DeleteWorkflowObjectUrl,
                            type: "POST",
                            cache: false,
                            async: false,
                            data: { id },
                        });
                    }

                    this.WorkflowObjects.splice(index, 1);
                },
                resetQuotationWorkflowAssignModal(id) {
                    $('#dropDownAssignPricingPersonInCharge').selectpicker('val', '');
                    this.QuotationWorkflowAssignId = id;
                    this.QuotationWorkflowAssignModal.PricingPersonInCharge = "";
                },
                saveAssign() {
                    var error = "";
                    $.ajax({
                        url: AssignPricingPersonInChargeUrl,
                        type: "POST",
                        cache: false,
                        async: false,
                        data: {
                            id: this.QuotationWorkflowAssignId,
                            personInChargeId: this.QuotationWorkflowAssignModal.PricingPersonInChargeId
                        },
                        success: function (data) {
                            error = data
                        }
                    });

                    window.location.reload();
                },
            },
            created: function () {
            },
            updated() {
            }
        });

        $('#searchBtn').click(function (e) {
            var url = IndexUrl;

            routeValue.forEach(function (entry, index) {
                var inputValue = $('#' + entry.Key).val() ? $('#' + entry.Key).val() : "";

                if (index == 0) {
                    url = url + "?" + entry.Key + "=" + inputValue;
                }
                else {
                    url = url + "&" + entry.Key + "=" + inputValue;
                }
            });

            window.location.href = url;
        });
    </script>
}