@model WebApp.Models.TreatyPricingUwQuestionnaireViewModel
@using Shared.Forms.Helpers

@{
    ViewBag.Title = "Underwriting Questionnaire";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index", "TreatyPricingCedant");

    ViewBag.PrevTitle = "Cedant";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexUwQuestionnaire });
}

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @section breadcrumb
    {
        @Html.Partial("_Breadcrumb")
    }

    @Html.Partial("_BackToList")
}

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingUwQuestionnaireBo.GetStatusClass(Model.Status)">
                    @BusinessObject.TreatyPricing.TreatyPricingUwQuestionnaireBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @Html.Partial("_LoadingSpinner")

        @Html.Partial("_ObjectLockEditButton")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TreatyPricingCedantId)
            @Html.HiddenFor(model => model.Code)
            @Html.HiddenFor(model => model.EditableVersion)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Status, (List<SelectListItem>)ViewBag.StatusItems, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        <label class="col-form-label required">Benefit Code <span class="sub-label">(Separated by Comma)</span></label>
                        @Html.EditorFor(model => model.BenefitCode, new { htmlAttributes = new { id = "BenefitCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.BenefitCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        <label class="col-form-label">Distribution Channel <span class="sub-label">(Separated by Comma)</span></label>
                        @Html.EditorFor(model => model.DistributionChannel, new { htmlAttributes = new { id = "DistributionChannelTokenField", @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.DistributionChannel, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @if (ViewBag.IsCalledFromWorkflow == false)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexUwQuestionnaire }, new { @class = "btn btn-cancel" })
                        }
                        else if (ViewBag.IsQuotationWorkflow == true)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingQuotationWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        else
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingTreatyWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @Html.Partial("_BackToList")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

<script>
        $(document).ready(function () {
            $('#Description').autoResize();
            $('#Description').trigger('keyup');

            $('#Remarks').autoResize();
            $('#Remarks').trigger('keyup');
        });

        var BenefitCodes = @Html.Raw(Json.Encode(ViewBag.BenefitCodes));
        var DistributionChannels = @Html.Raw(Json.Encode(ViewBag.DistributionChannels));
        var DistributionChannelCodes = @Html.Raw(Json.Encode(ViewBag.DistributionChannelCodes));
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");
</script>

    @Scripts.Render("~/Scripts/models/TreatyPricingUwQuestionnaire.js")
    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
