@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.RiDataConfigViewModel>

@{
    ViewBag.Title = "RI Data Config";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-6 text-right" id="addNewBtnDiv">
                <a href="@Url.Action("Create")" class="btn btn-add" id="addNewBtn">
                    ADD RI DATA CONFIG
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCode;
                                @Shared.Html.Sorter(ViewBag, "Code", "Code", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-20">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortName;
                                @Shared.Html.Sorter(ViewBag, "Name", "Name", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedantId;
                                @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedantId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyId;
                                @Shared.Html.Sorter(ViewBag, "Treaty ID", "TreatyId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortFileType;
                                @Shared.Html.Sorter(ViewBag, "File Type", "FileType", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortStatus;
                                @Shared.Html.Sorter(ViewBag, "Status", "Status", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "RiDataConfig", FormMethod.Get))
                        {
                            string sortOrder = ViewBag.SortOrder;

                            @Html.Hidden("SortOrder", sortOrder)
                            @Html.Hidden("TreatyId", (string)routeValue["TreatyId"])
                            <th>
                                @Html.TextBox("Code", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("Name", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @onchange = "getTreaty(this.value)" })
                            </th>
                            <th>
                                @Html.DropDownList("TreatyIds", (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body", @multiple = "multiple", title = "Please select", @data_selected_text_format = "count > 1" })
                            </th>
                            <th>
                                @Html.DropDownList("FileType", (List<SelectListItem>)ViewBag.DropDownFileTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("Status", (List<SelectListItem>)ViewBag.DropDownStatus, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Code)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Name)
                            </td>
                            <td>
                                @string.Format("{0} - {1}", item.Cedant.Code, item.Cedant.Name)
                            </td>
                            <td>
                                @if (item.Treaty != null)
                                {
                                    @(string.Format("{0} - {1}", item.Treaty.TreatyIdCode, item.Treaty.Description))
                                }
                            </td>
                            <td>
                                @BusinessObject.RiDatas.RiDataConfigBo.GetFileTypeName(item.FileType)
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.RiDatas.RiDataConfigBo.GetStatusClass(item.Status)">
                                    @BusinessObject.RiDatas.RiDataConfigBo.GetStatusName(item.Status)
                                </span>
                            </td>
                            <td class="text-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="fas fa-ellipsis-v dropbtn" />
                                    </button>
                                    <div class="dropdown-menu">
                                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                        @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "dropdown-item" })
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="no-data">No available data found.</td>
                    </tr>
                }
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        Code = routeValue["Code"],
                        Name = routeValue["Name"],
                        CedantId = routeValue["CedantId"],
                        TreatyId = routeValue["TreatyId"],
                        FileType = routeValue["FileType"],
                        Status = routeValue["Status"],
                        Page,
                        SortOrder = ViewBag.SortOrder,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var GetTreatyUrl = "@(Url.Action("GetTreatyByCedant"))";
        var selectedTreaty = '@ViewBag.routeValue["TreatyId"]';
        var disabled = '@ViewBag.routeValue["TreatyId"]';

        $(document).ready(function () {

            var cedantId = 0;
            if ($('#CedantId')[0].selectedIndex != 0) {
                cedantId = $('#CedantId').val();
            }
            getTreaty(cedantId);

            $('#TreatyIds').on('change', function () {
                var arr = $(this).val().join(",");
                $('#TreatyId').val(arr);
            });

            var readOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");
            if (readOnly) {
                $('#addNewBtnDiv').addClass("wrapper-isDisabled");
                $('#addNewBtn').addClass("isDisabled");
            }
        });

        function getTreaty(cedantId) {
            $.ajax({
                url: GetTreatyUrl,
                type: "POST",
                data: { cedantId: cedantId },
                cache: false,
                async: false,
                success: function (data) {
                    var treatyList = data.treatyBos;
                    refreshDropDownTreatyItems('TreatyIds', treatyList, selectedTreaty, 'TreatyIdCode', 'Description')
                }
            });
        }

        function refreshDropDownTreatyItems(id, items, selectedId, first, second = "", style = true) {
            $(`#${id} option`).remove();
            items.forEach(function (obj) {
                var text = obj[first];
                if (second && obj[second])
                    text += ` - ${obj[second]}`;
                $(`#${id}`).append(new Option(text, obj.Id, false));
            });
            if (selectedId !== '') {
                var selectedIdArr = selectedId.split(',');
                $(`#${id}`).selectpicker('val', selectedIdArr)
            }
            if (style) {
                $(`#${id}`).selectpicker('refresh');
            }
        }
    </script>
}