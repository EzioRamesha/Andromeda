@model WebApp.Models.TreatyPricingProductViewModel
@using Shared.Forms.Helpers

@{
    ViewBag.Title = "Product";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index", "TreatyPricingCedant");

    ViewBag.PrevTitle = "Cedant";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexProduct });

    var disableVersionSelect = ViewBag.IsHideSideBar != null ? bool.Parse(ViewBag.IsHideSideBar.ToString().ToLower()) : false;

    string cancelController = "TreatyPricingCedant";
    object cancelRouteValues = new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexProduct };

    if (ViewBag.IsCalledFromWorkflow)
    {
        cancelRouteValues = new { id = Model.WorkflowId };
        cancelController = ViewBag.IsQuotationWorkflow ? "TreatyPricingQuotationWorkflow" : "TreatyPricingTreatyWorkflow";
    }

    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
}

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @section breadcrumb
    {
        @Html.Partial("_Breadcrumb")
    }

    @Html.Partial("_BackToList")
}

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Action @ViewBag.Title</h4>
    </div>
    <div class="card-body" id="app">
        @Html.Partial("_ObjectLockEditButton")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TreatyPricingCedantId)
            @Html.HiddenFor(model => model.EditableVersion)

            <div class="form-horizontal">

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Code, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.QuotationName, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.QuotationName, new { htmlAttributes = new { @class = "form-control", @placeholder = "Type Here" } })
                        @Html.ValidationMessageFor(model => model.QuotationName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        <label class="col-form-label">Ceding Company</label>
                        <input class="form-control" value="@Model.TreatyPricingCedantBo.CedantBo.ToString()" readonly />
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        <label class="col-form-label">Reinsurance Type</label>
                        <input class="form-control" value="@Model.TreatyPricingCedantBo.ReinsuranceTypePickListDetailBo.ToString()" readonly />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.UnderwritingMethod, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.UnderwritingMethod, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.UnderwritingMethod, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.EffectiveDateStr, htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.EffectiveDateStr, new Dictionary<string, object>() { { "class", "form-control" }, { "placeholder", "DD MM YYYY" }, { "autocomplete", "off" }, { @"v-on:click", @"openDatePicker('EffectiveDateStr')" }, { @"v-model.lazy", @"Product.EffectiveDateStr" } })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('EffectiveDateStr')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.EffectiveDateStr, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Type Here" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.Summary, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Summary, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1" })
                        @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.TargetSendDate, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TargetSendDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.LatestRevisionDate, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.LatestRevisionDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.QuotationStatus, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.QuotationStatus, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.QuotationStatusRemark, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.QuotationStatusRemark, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", @readonly = "true" })
                    </div>
                </div>

                <div class="form-row mt-5">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.HasPerLifeRetro, htmlAttributes: new { @class = "col-form-label" })
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch pl-2">
                                @Html.EditorFor(model => model.HasPerLifeRetro, new { htmlAttributes = new Dictionary<string, object>() { { "class", "custom-control-input" }, { @"onchange", "resetPerLifeRetro()" } } })
                                <label class="custom-control-label" for="HasPerLifeRetro">Yes</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.PerLifeRetroTreatyCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.PerLifeRetroTreatyCode, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.PerLifeRetroTreatyCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row mt-5">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Version", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-group">
                            @if (disableVersionSelect)
                            {
                                @Html.DropDownListFor(model => model.CurrentVersion, (List<SelectListItem>)ViewBag.DropDownVersions, htmlAttributes: new { @class = "form-control selectpicker", @disabled = true })
                                @Html.HiddenFor(model => model.CurrentVersion)
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.CurrentVersion, (List<SelectListItem>)ViewBag.DropDownVersions, htmlAttributes: new { @class = "form-control selectpicker" })
                            }
                            <div class="input-group-prepend">
                                <button type="button" class="input-group-text" data-toggle="modal" onclick="resetCreateVersionError()" data-target="#newVersionModal" disabled="@disableVersionSelect">CREATE NEW VERSION</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.PersonInChargeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.PersonInChargeId, (List<SelectListItem>)ViewBag.DropDownUsers, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.PersonInChargeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <ul class="nav nav-tabs mt-4">
                    <li class="nav-item"><a data-toggle="tab" href="#productTab" class="active underline-tab">Product Details</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#benefitTab" id="benefitTabBtn">Benefit</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#campaignTab">Campaign</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#groupTab">Group</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#finalDocumentTab">Final Document</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#remarkTab">Remarks</a></li>
                    <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#changelogTab">Changelog</a></li>
                </ul>

                <div class="tab-content underline-tab-content">
                    <div class="tab-pane fade show active" id="productTab" role="tabpanel" aria-labelledby="product-tab">
                        @Html.Partial("_ProductTab")
                    </div>
                    <div class="tab-pane fade" id="benefitTab" role="tabpanel" aria-labelledby="benefit-tab">
                        @Html.Partial("_BenefitTab")
                    </div>
                    <div class="tab-pane fade" id="campaignTab" role="tabpanel" aria-labelledby="campaign-tab">
                        <div class="table-responsive">
                            <table class="table table-hover table-sm my-3">
                                <thead>
                                    <tr>
                                        <th class="w-15">Campaign ID</th>
                                        <th class="w-15">Campaign Type</th>
                                        <th class="w-25">Campaign Name</th>
                                        <th class="w-15">Campaign Duration</th>
                                        <th class="w-15">Campaign Start Date</th>
                                        <th class="w-15">Campaign End Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-if="!Campaigns.length">
                                        <td colspan="6" class="no-data">No available data found.</td>
                                    </tr>
                                    <tr v-for="campaign in Campaigns">
                                        <td>
                                            <a v-bind:href="editCampaignLink(campaign.TreatyPricingCampaignId)" target="_blank" class="linkbtn">
                                                <u>{{ campaign.TreatyPricingCampaignBo.Code }}</u>
                                            </a>
                                        </td>
                                        <td>{{ campaign.TreatyPricingCampaignBo.Type }}</td>
                                        <td>{{ campaign.TreatyPricingCampaignBo.Name }}</td>
                                        <td>{{ campaign.TreatyPricingCampaignBo.Duration }}</td>
                                        <td>{{ campaign.TreatyPricingCampaignBo.PeriodStartDateStr }}</td>
                                        <td>{{ campaign.TreatyPricingCampaignBo.PeriodEndDateStr }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="groupTab" role="tabpanel" aria-labelledby="group-tab">
                        <div class="table-responsive">
                            <table class="table table-hover table-sm my-3">
                                <thead>
                                    <tr>
                                        <th class="w-15">Group Referral ID</th>
                                        <th class="w-20">Group Name</th>
                                        <th class="w-20">Group Description</th>
                                        <th class="w-15">Group RI Slip</th>
                                        <th class="w-15">Coverage Start Date</th>
                                        <th class="w-15">Coverage End Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-if="!Groups.length">
                                        <td colspan="5" class="no-data">No available data found.</td>
                                    </tr>
                                    <tr v-for="group in Groups">
                                        <td>
                                            <a v-bind:href="editGroupLink(group.Id)" target="_blank" class="linkbtn">
                                                <u>{{ group.Code }}</u>
                                            </a>
                                        </td>
                                        <td>{{ group.InsuredGroupNameBo.Name }}</td>
                                        <td>{{ group.Description }}</td>
                                        <td>{{ group.RiGroupSlipCode }}</td>
                                        <td>{{ group.CoverageStartDateStr }}</td>
                                        <td>{{ group.CoverageEndDateStr }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="finalDocumentTab" role="tabpanel" aria-labelledby="finalDocument-tab">
                        @Html.Partial("_Document", new ViewDataDictionary { { "hideDetail", true }, { "showName", true } })

                        <div class="modal fade" id="removeDocumentModal" tabindex="-1" role="dialog" aria-labelledby="removeDocumentModal" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Remove Final Document Confirmation</h5>
                                        <button type="button" class="close prevent-disable" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <span>Are you sure you want to remove the final document {{RemoveDocumentName}}?</span>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                                        <button type="button" v-on:click="confirmRemoveDocument()" class="btn btn-submit">CONFIRM</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="remarkTab" role="tabpanel" aria-labelledby="remark-tab">
                        @Html.Partial("_Remark", new ViewDataDictionary { { "showDocuments", true }, { "showStatus", false }, { "showVersion", true }, { "showSubject", true }, { "dropdownVersions", ViewBag.DropDownVersions } })
                    </div>
                    <div class="tab-pane fade" id="changelogTab" role="tabpanel" aria-labelledby="changelog-tab">
                        @Html.Partial("_Changelog")
                    </div>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Edit", cancelController, cancelRouteValues, new { @class = "btn btn-cancel" })
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right" v-on:click="saveProduct()">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_CkEditor")
@Html.Partial("_FieldTableModal")

<div class="modal fade" id="newVersionModal" tabindex="-1" role="dialog" aria-labelledby="newVersionModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Version</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger" id="createVersionError" style="display:none;"></div>
                <div class="form">
                    <div class="form-group">
                        <label class="col-form-label" for="userName">Person In-Charge (Business Development)</label>
                        <input type="text" readonly class="form-control" id="userName" value="@ViewBag.AuthUserName">
                    </div>

                    <div class="form-group">
                        <label class="col-form-label" for="duplicatePreviousVersion">Duplicate Previous Version</label>
                        <div class="row m-0 p-0">
                            <div class="mr-2"> <p style="color: #004BA2;">No</p> </div>
                            <div class="custom-control custom-switch pl-2">
                                <input class="custom-control-input" id="duplicatePreviousVersion" name="duplicatePreviousVersion" type="checkbox" />
                                <label class="custom-control-label" for="duplicatePreviousVersion">Yes</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal" style="width: auto;">CANCEL</button>
                <button type="button" onclick="createVersion()" class="btn btn-submit">CREATE</button>
            </div>
        </div>
    </div>
</div>

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @Html.Partial("_BackToList")
}

@section Scripts {
    <script>
        var Model = @Html.Raw(serializer.Serialize(Model));
        var AuthUserName = '@ViewBag.AuthUserName';
        var CreateVersionUrl = "@(Url.Action("CreateVersion", "TreatyPricingProduct"))";
        var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingProduct.ToString()';
        var EditCampaignUrl = "@(Url.Action("Edit", "TreatyPricingCampaign"))";
        var EditGroupReferralUrl = "@(Url.Action("Edit", "TreatyPricingGroupReferral"))";
        var GetWorkflowDataUrl = "@(Url.Action("GetWorkflowData", "TreatyPricingProduct"))";
        var DownloadBenefitPricingFileUrl = "@(Url.Action("DownloadPricingFile", "TreatyPricingProductBenefit"))";
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");

        var PerLifeRetroCodes = @Html.Raw(Json.Encode(ViewBag.PerLifeRetroCodes));
        var UnderwritingMethodCodes = @Html.Raw(Json.Encode(ViewBag.UnderwritingMethodCodes));
        var TargetSegmentCodes = @Html.Raw(Json.Encode(ViewBag.TargetSegmentCodes));
        var DistributionChannelCodes = @Html.Raw(Json.Encode(ViewBag.DistributionChannelCodes));
        var CessionTypeCodes = @Html.Raw(Json.Encode(ViewBag.CessionTypeCodes));
        var ProductLineCodes = @Html.Raw(Json.Encode(ViewBag.ProductLineCodes));
        var Benefits = @Html.Raw(Json.Encode(ViewBag.BenefitBos));
        var Mfrs17BasicRiders = @Html.Raw(Json.Encode(ViewBag.DropDownMfrs17BasicRiders));
        var PayoutTypes = @Html.Raw(Json.Encode(ViewBag.DropDownPayoutTypes));
        var AgeBasis = @Html.Raw(Json.Encode(ViewBag.DropDownAgeBasis));
        var ArrangementReinsuranceTypes = @Html.Raw(Json.Encode(ViewBag.DropDownArrangementReinsuranceTypes));
        var RiskPatternSums = @Html.Raw(Json.Encode(ViewBag.DropDownRiskPatternSums));
        var RetroParties = @Html.Raw(Json.Encode(ViewBag.RetroPartyBos));

        var UnderwritingLimits = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingUnderwritingLimits));
        var ClaimApprovalLimits = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingClaimApprovalLimits));
        var RateTables = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingRateTables));
        var DefinitionExclusions = @Html.Raw(Json.Encode(ViewBag.DropDownTreatyPricingDefinitionExclusions));

        var Campaigns = @Html.Raw(Json.Encode(ViewBag.TreatyPricingCampaignBos));
        var Groups = @Html.Raw(Json.Encode(ViewBag.TreatyPricingGroupReferralBos));
        var Remarks = @Html.Raw(Json.Encode(ViewBag.RemarkBos));
        var RemarkSubjects = @Html.Raw(Json.Encode(ViewBag.RemarkSubjects));
        var FinalDocuments = @Html.Raw(Json.Encode(ViewBag.FinalDocuments));
        var Changelogs = @Html.Raw(Json.Encode(ViewBag.ObjectVersionChangelogs));
    </script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")
    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/TreatyPricingProduct.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
