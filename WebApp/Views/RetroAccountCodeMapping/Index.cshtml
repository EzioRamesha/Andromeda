@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.AccountCodeMappingViewModel>

@{
    ViewBag.Title = "Account Code Mapping - Retro";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title Maintenance</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="file btn btn-upload" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                    <label>UPLOAD</label>
                    @using (Html.BeginForm("Upload", "RetroAccountCodeMapping", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <input type="file" id="dataFile" name="upload" accept=".csv" onchange="this.form.submit()" />
                    }
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { downloadType = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                        {
                            downloadType = 2,
                            Type = routeValue["Type"],
                            TreatyType = routeValue["TreatyType"],
                            TreatyCodeId = routeValue["TreatyCodeId"],
                            ClaimCode = routeValue["ClaimCode"],
                            BusinessOrigin = routeValue["BusinessOrigin"],
                            RetroRegisterFieldPickListDetailId = routeValue["RetroRegisterFieldPickListDetailId"],
                            TransTypeCodeId = routeValue["TransTypeCodeId"],
                            ModifiedContractCode = routeValue["ModifiedContractCode"],
                            ReportingType = routeValue["ReportingType"],
                            AccountCodeId = routeValue["AccountCodeId"],
                            IsBalanceSheet = routeValue["IsBalanceSheet"],
                            DebitCreditIndicatorPositive = routeValue["DebitCreditIndicatorPositive"],
                            DebitCreditIndicatorNegative = routeValue["DebitCreditIndicatorNegative"],
                        }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Template", "Download", new { downloadType = 3 }, new { @class = "dropdown-item" })
                    </div>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-add">
                    ADD NEW
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortType;
                                @Shared.Html.Sorter(ViewBag, "Type", "Type", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().TreatyType)
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyCode;
                                @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().ClaimCode)
                        </th>
                        <th class="w-15">
                            @Html.DisplayNameFor(model => model.FirstOrDefault().BusinessOrigin)
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTransTypeCode;
                                @Shared.Html.Sorter(ViewBag, "Transaction Type Code", "TransTypeCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortRetroRegisterFieldPickListDetailId;
                                @Shared.Html.Sorter(ViewBag, "Retro Register Field", "RetroRegisterFieldPickListDetailId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortModifiedContractCode;
                                @Shared.Html.Sorter(ViewBag, "Modified Contract Code", "ModifiedContractCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortReportingType;
                                @Shared.Html.Sorter(ViewBag, "Reporting Type", "ReportingType", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortAccountCode;
                                @Shared.Html.Sorter(ViewBag, "Account Code", "AccountCodeId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsBalanceSheet;
                                @Shared.Html.Sorter(ViewBag, "Grouping Indicator", "IsBalanceSheet", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-30">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDebitCreditIndicatorPositive;
                                @Shared.Html.Sorter(ViewBag, "Debit/Credit Indicator - Positive", "DebitCreditIndicatorPositive", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-30">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDebitCreditIndicatorNegative;
                                @Shared.Html.Sorter(ViewBag, "Debit/Credit Indicator - Negative", "DebitCreditIndicatorNegative", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>
                    <tr>
                        @using (Html.BeginForm("Index", "RetroAccountCodeMapping", FormMethod.Get))
                        {
                            @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                            <th>
                                @Html.DropDownList("Type", (List<SelectListItem>)ViewBag.DropDownTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("TreatyType", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("TreatyCodeId", (List<SelectListItem>)ViewBag.DropDownTreatyCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("ClaimCode", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("BusinessOrigin", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("TransTypeCodeId", (List<SelectListItem>)ViewBag.DropDownTransactionTypeCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("RetroRegisterFieldPickListDetailId", (List<SelectListItem>)ViewBag.DropDownRetroRegisterFields, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("ModifiedContractCodeId", (List<SelectListItem>)ViewBag.DropDownMfrs17ContractCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("ReportingType", (List<SelectListItem>)ViewBag.ReportingTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("AccountCodeId", (List<SelectListItem>)ViewBag.DropDownAccountCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("IsBalanceSheet", (List<SelectListItem>)ViewBag.DropDownPLBS, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("DebitCreditIndicatorPositive", (List<SelectListItem>)ViewBag.DropDownDebitCreditIndicator, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("DebitCreditIndicatorNegative", (List<SelectListItem>)ViewBag.DropDownDebitCreditIndicator, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Count > 0)
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (item.Type.HasValue)
                                    {
                                        @BusinessObject.AccountCodeMappingBo.GetTypeName(item.Type.Value)
                                    }
                                </td>
                                <td>
                                    @Shared.Util.GetTruncatedValue(item.TreatyType)
                                </td>
                                <td>
                                    @if (item.TreatyCode != null)
                                    {
                                        @item.TreatyCode.ToString()
                                    }
                                </td>
                                <td>
                                    @Shared.Util.GetTruncatedValue(item.ClaimCode)
                                </td>
                                <td>
                                    @Shared.Util.GetTruncatedValue(item.BusinessOrigin)
                                </td>
                                <td>
                                    @if (item.TransactionTypeCodePickListDetail != null)
                                    {
                                        @item.TransactionTypeCodePickListDetail.ToString()
                                    }
                                </td>
                                <td>
                                    @if (item.RetroRegisterFieldPickListDetail != null)
                                    {
                                        @item.RetroRegisterFieldPickListDetail.ToString()
                                    }
                                </td>
                                <td>
                                    @if (item.ModifiedContractCode != null)
                                    {
                                        @item.ModifiedContractCode.ToString()
                                    }
                                </td>
                                <td>
                                    @BusinessObject.AccountCodeBo.GetReportingTypeName(item.AccountCode.ReportingType)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.AccountCode.Code)
                                </td>
                                <td>
                                    @BusinessObject.AccountCodeMappingBo.GetPLBSName(item.IsBalanceSheet)
                                </td>
                                <td>
                                    @if (item.DebitCreditIndicatorPositive.HasValue)
                                    {
                                        @BusinessObject.AccountCodeMappingBo.GetDebitCreditIndicatorName(item.DebitCreditIndicatorPositive.Value)
                                    }
                                </td>
                                <td>
                                    @if (item.DebitCreditIndicatorNegative.HasValue)
                                    {
                                        @BusinessObject.AccountCodeMappingBo.GetDebitCreditIndicatorName(item.DebitCreditIndicatorNegative.Value)
                                    }
                                </td>
                                <td class="text-center">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <span class="fas fa-ellipsis-v dropbtn" />
                                        </button>
                                        <div class="dropdown-menu">
                                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                            @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "dropdown-item" })
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="10" class="no-data">No available data found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        Type = routeValue["Type"],
                        TreatyType = routeValue["TreatyType"],
                        TreatyCodeId = routeValue["TreatyCodeId"],
                        ClaimCode = routeValue["ClaimCode"],
                        BusinessOrigin = routeValue["BusinessOrigin"],
                        RetroRegisterFieldPickListDetailId = routeValue["RetroRegisterFieldPickListDetailId"],
                        TransTypeCodeId = routeValue["TransTypeCodeId"],
                        ModifiedContractCodeId = routeValue["ModifiedContractCodeId"],
                        ReportingType = routeValue["ReportingType"],
                        AccountCodeId = routeValue["AccountCodeId"],
                        IsBalanceSheet = routeValue["IsBalanceSheet"],
                        DebitCreditIndicatorPositive = routeValue["DebitCreditIndicatorPositive"],
                        DebitCreditIndicatorNegative = routeValue["DebitCreditIndicatorNegative"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>