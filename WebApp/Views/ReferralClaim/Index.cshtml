@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.ReferralClaimViewModel>

@{
    ViewBag.Title = "Referral Claim";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;

    PagedList.IPagedList<WebApp.Models.ReferralRiDataFileViewModel> ReferralRiDataFiles = ViewBag.ReferralRiDataFiles as PagedList.IPagedList<WebApp.Models.ReferralRiDataFileViewModel>;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="btn btn-group" style="display:inline-flex;">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                       {
                           type = 2,
                           ReferralId = routeValue["ReferralId"],
                           TurnAroundTime = routeValue["TurnAroundTime"],
                           PolicyNumber = routeValue["PolicyNumber"],
                           ReceivedAt = routeValue["ReceivedAt"],
                           RespondedAt = routeValue["RespondedAt"],
                           DateReceivedFullDocuments = routeValue["DateReceivedFullDocuments"],
                           DateOfCommencement = routeValue["DateOfCommencement"],
                           DateOfEvent = routeValue["DateOfEvent"],
                           TreatyCode = routeValue["TreatyCode"],
                           RecordType = routeValue["RecordType"],
                           InsuredName = routeValue["InsuredName"],
                           CedingCompany = routeValue["CedingCompany"],
                           ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
                           PersonInChargeId = routeValue["PersonInChargeId"],
                           Status = routeValue["Status"],
                           ClaimsDecision = routeValue["ClaimsDecision"],
                       }, new { @class = "dropdown-item" })
                    </div>
                </div>
                <a href="@Url.Action("Create")" class="btn btn-add">
                    ADD NEW
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <ul class="nav nav-tabs">
            <li class="nav-item"><a class="active underline-tab" data-toggle="tab" href="#listTab">List</a></li>
            <li class="nav-item"><a class="underline-tab" data-toggle="tab" href="#riDataUploadTab">RI Data Upload</a></li>
        </ul>

        <div class="tab-content underline-tab-content">
            <div class="tab-pane fade show active" id="listTab" role="tabpanel" aria-labelledby="data-tab">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReferralId;
                                        @Shared.Html.Sorter(ViewBag, "Referral ID", "ReferralId", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    Turn Around Time Flag
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortTurnAroundTime;
                                        @Shared.Html.Sorter(ViewBag, "Turn Around Time (Days)", "TurnAroundTime", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-15">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortPolicyNumber;
                                        @Shared.Html.Sorter(ViewBag, "Policy No", "PolicyNumber", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortReceivedAt;
                                        @Shared.Html.Sorter(ViewBag, "Date Received", "ReceivedAt", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortRespondedAt;
                                        @Shared.Html.Sorter(ViewBag, "Date Responded", "RespondedAt", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortDateReceivedFullDocuments;
                                        @Shared.Html.Sorter(ViewBag, "Date Received Full Documents", "DateReceivedFullDocuments", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortDateOfCommencement;
                                        @Shared.Html.Sorter(ViewBag, "Date Of Commencement", "DateOfCommencement", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortDateOfEvent;
                                        @Shared.Html.Sorter(ViewBag, "Date Of Event", "DateOfEvent", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortTreatyCode;
                                        @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCode", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortRecordType;
                                        @Shared.Html.Sorter(ViewBag, "Record Type", "RecordType", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortInsuredName;
                                        @Shared.Html.Sorter(ViewBag, "Insured Name", "InsuredName", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortCedingCompany;
                                        @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedingCompany", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortClaimRecoveryAmount;
                                        @Shared.Html.Sorter(ViewBag, "Claim Recovery Amount", "ClaimRecoveryAmount", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortPersonInChargeId;
                                        @Shared.Html.Sorter(ViewBag, "Person In-Charge", "PersonInChargeId", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortStatus;
                                        @Shared.Html.Sorter(ViewBag, "Status", "Status", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortStatus;
                                        @Shared.Html.Sorter(ViewBag, "Claims Decision", "ClaimsDecision", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="text-center w-5">
                                    Action
                                </th>
                            </tr>

                            <tr>
                                @using (Html.BeginForm("Index", "ReferralClaim", FormMethod.Get))
                                {
                                    string sortOrder = ViewBag.SortOrder;

                                    @Html.Hidden("SortOrder", sortOrder)
                                    <th>
                                        @Html.TextBox("ReferralId", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                    </th>
                                    <th>
                                        @Html.DropDownList("TurnAroundTime", (List<SelectListItem>)ViewBag.DropDownTurnAroundTime, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("ReceivedAt", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReceivedAt')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("RespondedAt", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('RespondedAt')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("DateReceivedFullDocuments", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateReceivedFullDocuments')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("DateOfCommencement", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfCommencement')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("DateOfEvent", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('DateOfEvent')" />
                                    </th>
                                    <th>
                                        @Html.DropDownList("TreatyCode", (List<SelectListItem>)ViewBag.DropDownTreatyCodes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("RecordType", (List<SelectListItem>)ViewBag.DropDownRecordTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("CedingCompany", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.TextBox("ClaimRecoveryAmount", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("PersonInChargeId", (List<SelectListItem>)ViewBag.DropDownPicClaims, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("Status", (List<SelectListItem>)ViewBag.DropDownStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("ClaimsDecision", (List<SelectListItem>)ViewBag.DropDownClaimsDecisions, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th class="text-center align-middle">
                                        <div class="btn-row-action">
                                            <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                                <span class="fas fa-backspace" />
                                            </a>
                                            <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                        </div>
                                    </th>
                                }
                            </tr>
                        </thead>

                        @if (Model.Count > 0)
                        {
                            TimeSpan expectedTimeSpan = new TimeSpan(Shared.Util.GetConfigInteger("ExpectedReferralTurnAroundTime"), 0, 0);
                            long expectedTicks = expectedTimeSpan.Ticks;
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ReferralId)
                                    </td>
                                    <td>
                                        @if (item.TurnAroundTime.HasValue && item.TurnAroundTime > expectedTicks)
                                        {
                                            <i class="fas fa-flag"></i>
                                        }
                                    </td>
                                    <td class="text-right">
                                        @if (item.TurnAroundTime.HasValue)
                                        {
                                            TimeSpan ts = new TimeSpan(item.TurnAroundTime.Value);
                                            @Shared.Util.DoubleToString(ts.TotalDays)
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PolicyNumber)
                                    </td>
                                    <td>
                                        @if (item.ReceivedAt.HasValue)
                                        {
                                            @item.ReceivedAt.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td>
                                        @if (item.RespondedAt.HasValue)
                                        {
                                            @item.RespondedAt.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td>
                                        @if (item.DateReceivedFullDocuments.HasValue)
                                        {
                                            @item.DateReceivedFullDocuments.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td>
                                        @if (item.DateOfCommencement.HasValue)
                                        {
                                            @item.DateOfCommencement.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td>
                                        @if (item.DateOfEvent.HasValue)
                                        {
                                            @item.DateOfEvent.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TreatyCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordType)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.InsuredName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CedingCompany)
                                    </td>
                                    <td>
                                        @Shared.Util.DoubleToString(item.ClaimRecoveryAmount, 2)
                                    </td>
                                    <td>
                                        @if (item.PersonInCharge != null)
                                        {
                                            @Html.DisplayFor(modelItem => item.PersonInCharge.FullName)
                                        }
                                    </td>
                                    <td class="va-middle">
                                        <span class="@BusinessObject.ReferralClaimBo.GetStatusClass(item.Status)">
                                            @BusinessObject.ReferralClaimBo.GetStatusName(item.Status)
                                        </span>
                                    </td>
                                    <td class="va-middle">
                                        @if (item.ClaimsDecision.HasValue)
                                        {
                                            <span class="@BusinessObject.ReferralClaimBo.GetClaimsDecisionClass(item.ClaimsDecision.Value)">
                                                @BusinessObject.ReferralClaimBo.GetClaimsDecisionName(item.ClaimsDecision.Value)
                                            </span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <a href="@Url.Action("Edit", new { id = item.Id })">
                                            <span class="fas fa-pencil-alt"></span>
                                        </a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="14" class="no-data">No available data found.</td>
                            </tr>
                        }
                    </table>
                </div>

                <div class="pagination-footer">
                    <div class="row">
                        <div class="col-md-4">
                            @Html.Partial("_PageInfo")
                        </div>
                        <div class="col-md-8">
                            @Html.PagedListPager(Model, Page => Url.Action("Index", new
                       {
                           ReferralId = routeValue["ReferralId"],
                           TurnAroundTime = routeValue["TurnAroundTime"],
                           PolicyNumber = routeValue["PolicyNumber"],
                           ReceivedAt = routeValue["ReceivedAt"],
                           RespondedAt = routeValue["RespondedAt"],
                           DateReceivedFullDocuments = routeValue["DateReceivedFullDocuments"],
                           DateOfCommencement = routeValue["DateOfCommencement"],
                           DateOfEvent = routeValue["DateOfEvent"],
                           TreatyCode = routeValue["TreatyCode"],
                           RecordType = routeValue["RecordType"],
                           InsuredName = routeValue["InsuredName"],
                           CedingCompany = routeValue["CedingCompany"],
                           ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
                           PersonInChargeId = routeValue["PersonInChargeId"],
                           Status = routeValue["Status"],
                           ClaimsDecision = routeValue["ClaimsDecision"],
                           SortOrder = ViewBag.SortOrder,
                           Page,
                       }), Shared.Html.GetPagedListRenderOptions())
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade show" id="riDataUploadTab" role="tabpanel" aria-labelledby="data-tab">
                @using (Html.BeginForm("Upload", "ReferralClaim", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="form-row mt-2">
                        <div class="form-group col-md-6">
                            @Html.Label("Upload File", new { @class = "col-form-label" })
                            <div class="file is-boxed ">
                                <label class="file-label">
                                    <input class="form-control-file" type="file" id="files" name="upload" accept=".csv, .xlsx">
                                    Drag and Drop File Here or <u>Browse your file</u>
                                    <br />
                                    <span class="file-desc">
                                        Allowed file format: .csv, .xlsx
                                    </span>
                                    <br />
                                </label>
                            </div>
                            <div id="selectedFiles" class="file-list-display"></div>
                            <div class="field-validation-error text-danger" id="errorSizeExceeds" style="display: none;"></div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            @Html.ActionLink("Download Template", "DownloadRiDataTemplate", new { }, new { @class = "btn btn-submit float-right" })
                            <button class="btn btn-upload float-right mr-2" type="submit">UPLOAD</button>
                        </div>
                    </div>
                }

                <div class="table-responsive mt-2">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th class="w-20">Filename</th>
                                <th class="w-15">Upload Date and Time</th>
                                <th class="w-15">Uploaded By</th>
                                <th class="w-15">No of Record(s)</th>
                                <th class="w-15">No of Updated Record(s)</th>
                                <th class="w-10">Status</th>
                                <th class="w-5 text-center">Errors</th>
                                <th class="w-5 text-center">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ReferralRiDataFiles != null && ReferralRiDataFiles.Count > 0)
                            {
                                foreach (var item in ReferralRiDataFiles)
                                {
                                    <tr>
                                        <td>
                                            @item.RawFile.FileName
                                        </td>
                                        <td>
                                            @item.CreatedAt.ToString(Shared.Util.GetDateTimeFormat())
                                        </td>
                                        <td>
                                            @item.CreatedBy.UserName
                                        </td>
                                        <td>
                                            @item.Records
                                        </td>
                                        <td>
                                            @item.UpdatedRecords
                                        </td>
                                        <td>
                                            @BusinessObject.RawFileBo.GetStatusName(item.RawFile.Status)
                                        </td>
                                        <td class="text-center">
                                            @if (!string.IsNullOrEmpty(item.Error))
                                            {
                                                <a href="#" onclick="showErrors(@item.Error)" data-toggle="modal" , data-target="#claimRegisterFileErrorModal">
                                                    <i class="fas fa-exclamation-triangle"></i>
                                                </a>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <a href="@Url.Action("DownloadRawFile", new { rawFileId = item.RawFileId })">
                                                <i class="fas fa-download"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="no-data">No available data found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (ReferralRiDataFiles != null)
                {
                    {
                        ViewBag.CurrentPageNumber = ReferralRiDataFiles.PageNumber;
                        ViewBag.CurrentPageItems = ReferralRiDataFiles.Count;
                        ViewBag.PageSize = ReferralRiDataFiles.PageSize;
                        ViewBag.Total = ViewBag.ReferralRiDataFilesTotal;
                    }
                    <div class="pagination-footer position-relative">
                        <div class="row">
                            <div class="col-md-4">
                                @Html.Partial("_PageInfo")
                            </div>
                            <div class="col-md-8">
                                @Html.PagedListPager(ReferralRiDataFiles, Page => Url.Action("Index", new
                               {
                                   ClaimRegisterFilePage = Page,
                               }), Shared.Html.GetPagedListRenderOptions())
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="claimRegisterFileErrorModal" tabindex="-1" role="dialog" aria-labelledby="claimRegisterFileErrorModal" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Errors</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul id="fileErrors"></ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel" data-dismiss="modal">CLOSE</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            dateOffAutoComplete();
        });

        function showErrors(errors) {
            var list = $('#fileErrors');
            list.empty();
            errors.forEach(function (error) {
                $("<li>" + error + "</li>").appendTo(list);
            });
        }

        function startDownload(download) {
            loadingDiv.removeClass('hide-loading-spinner');
            var downloadToken = (new Date()).getTime();

            if (download.href.includes("downloadToken=")) {
                download.href = download.href.replace(/(downloadToken=).*?/,'$1' + downloadToken + '$2')
            } else {
                download.href += "&downloadToken=" + downloadToken;
            }

            var cookiePattern = new RegExp( ( "downloadToken=" + downloadToken ), "i" );
            var cookieTimer = setInterval(checkCookies, 500);
            var refreshSession = setInterval(
                function () {
                    $.ajax({
                        url: "@(Url.Action("RefreshUserSession", "Account"))",
                        type: "POST",
                        cache: false,
                        async: false,
                        success: function (data) {
                            if (data.logout == true) {
                                window.location.href = "@(Url.Action("Login", "Account"))";
                            }
                        },
                    });
                }, 60 * 1000
            );

            function checkCookies() {
                if (document.cookie.search(cookiePattern) >= 0) {
                    loadingDiv.addClass('hide-loading-spinner');
                    clearInterval(cookieTimer);
                    clearInterval(refreshSession);
                }
            }
        }

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        var selDiv = "";
        document.addEventListener("DOMContentLoaded", init, false);

        function init() {
            document.querySelector('#files').addEventListener('change', handleFileSelect, false);
            selDiv = document.querySelector("#selectedFiles");
        }

        function handleFileSelect(e) {

            if (!e.target.files) return;
            selDiv.innerHTML = "";
            var files = e.target.files;
            var list = "";
            for (var i = 0; i < files.length; i++) {
                var f = files[i];

                // Prevent exceeds file size from uploading
                var fileSize = f.size / 1024 / 1024 / 1024; // in GB
                if (fileSize >= 2) {
                    $("#errorSizeExceeds").css("display", "block");
                    $("#errorSizeExceeds").text('Maximum allowed size is : 2 GB');
                    //reset file upload control
                    e.target.value = null;
                    return;
                } else {
                    $("#errorSizeExceeds").css("display", "none");
                }

                list += "<li>" + f.name + "</li>";
            }
            selDiv.innerHTML = "<ul>" + list + "</ul>";
        }
    </script>
}