@using Shared.Forms.Helpers
@model WebApp.Models.TreatyPricingUwLimitViewModel

@{
    ViewBag.Title = "Underwriting Limit";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index", "TreatyPricingCedant");

    ViewBag.PrevTitle = "Cedant";
    ViewBag.PrevAction = "Edit";
    ViewBag.EditPageUrl = Url.Action("Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexUwLimit });
}

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @section breadcrumb
    {
        @Html.Partial("_Breadcrumb")
    }

    @Html.Partial("_BackToList")
}

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-md-6 text-right">
                <span class="@BusinessObject.TreatyPricing.TreatyPricingUwLimitBo.GetStatusClass(Model.Status)">
                    @BusinessObject.TreatyPricing.TreatyPricingUwLimitBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @Html.Partial("_ObjectLockEditButton")

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.TreatyPricingCedantId)
            @Html.HiddenFor(model => model.EditableVersion)

            <div class="form-horizontal">

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.LimitId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.LimitId, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelForRequired(model => model.Status, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Status, (List<SelectListItem>)ViewBag.StatusItems, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelForRequired(model => model.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = @ViewBag.DescriptionMaxLength })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        <label class="col-form-label required">Benefit Code <span class="sub-label">(Separated by Comma)</span></label>
                        @Html.EditorFor(model => model.BenefitCode, new { htmlAttributes = new { id = "BenefitCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                        @Html.ValidationMessageFor(model => model.BenefitCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.Partial("_Details")

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @if (ViewBag.IsCalledFromWorkflow == false)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingCedant", new { id = Model.TreatyPricingCedantId, TabIndex = BusinessObject.TreatyPricing.TreatyPricingCedantBo.IndexUwLimit }, new { @class = "btn btn-cancel" })
                        }
                        else if (ViewBag.IsQuotationWorkflow == true)
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingQuotationWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        else
                        {
                            @Html.ActionLink("CANCEL", "Edit", "TreatyPricingTreatyWorkflow", new { id = Model.WorkflowId }, new { @class = "btn btn-cancel" })
                        }
                        @if (ViewBag.IsEditMode ?? false)
                        {
                            <button type="submit" class="btn btn-submit float-right">SAVE</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-submit prevent-disable float-right edit-mode-btn" onclick="enterEditMode()">EDIT</button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_AddRemarkModal", new ViewDataDictionary { { "showDocuments", true }, { "showSubject", true } })

@if (ViewBag.IsCalledFromWorkflow == false)
{
    @Html.Partial("_BackToList")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        // Model
        var Model = @Html.Raw(Json.Encode(Model));

        // Url
        var CreateVersionUrl = "@(Url.Action("CreateVersion", "TreatyPricingUwLimit"))";

        // Others
        var AuthUserId = "@ViewBag.PersonInChargeId";
        var AuthUserName = "@ViewBag.PersonInChargeName";
        var BenefitCodes = @Html.Raw(Json.Encode(ViewBag.BenefitCodes));
        var Products = @Html.Raw(Json.Encode(ViewBag.Products));
        var DateTimeFormat = "@Shared.Util.GetDateTimeFormatMomentJs()";
        var SubModuleController = '@BusinessObject.ModuleBo.ModuleController.TreatyPricingUwLimit.ToString()';
        var Changelogs = @Html.Raw(Json.Encode(ViewBag.ObjectVersionChangelogs));
        var ReadOnly = @(ViewBag.ReadOnly != null ? ViewBag.ReadOnly.ToString().ToLower() : "false");

        //Remarks
        var Remarks = @Html.Raw(Json.Encode(ViewBag.RemarkBos));
        var RemarkSubjects = @Html.Raw(Json.Encode(ViewBag.RemarkSubjects));

        var benefitCodeCount = 0;
        var distributionChannelCount = 0;

        var tokenfieldReady = {
            benefitCode: false,
        };

        var loadingDiv = $("#loadingSpinner");

        $(document).ready(function () {
            $('#Description').autoResize();
            $('#Description').trigger('keyup');

            $('#EffectiveAt').datepicker({
                format: DateFormatDatePickerJs,
                autoclose: true
            }).on('changeDate', function () {
                Model.EffectiveAtStr = $('#EffectiveAt').val();
            });

            $('#BenefitCodeTokenField')
                .on('tokenfield:createtoken', function (e) {
                    var existingTokens = $(this).tokenfield('getTokens');
                    $.each(existingTokens, function (index, token) {
                        if (benefitCodeCount != 0) {
                            if (token.value === e.attrs.value) {
                                e.preventDefault();
                            }
                        }
                    });
                })
                .on('tokenfield:createdtoken', function (e) {
                    var valid = BenefitCodes.includes(e.attrs.value)
                    if (!valid) {
                        $(e.relatedTarget).addClass('invalid');
                    }
                    benefitCodeCount += 1;
                    $('#BenefitCodeTokenField-tokenfield').removeAttr('placeholder');
                })
                .on('tokenfield:edittoken', function (e) {
                    var valid = BenefitCodes.includes(e.attrs.value)
                    if (valid) {
                        e.preventDefault();
                    }
                })
                .on('tokenfield:removedtoken', function (e) {
                    benefitCodeCount -= 1;
                    if (benefitCodeCount == 0) {
                        $("#BenefitCodeTokenField-tokenfield").attr("placeholder", "Type here");
                    }
                })
                .on('tokenfield:initialize', function (e) {
                    tokenfieldReady.benefitCode = true;
                    var isReady = true;
                    Object.keys(tokenfieldReady).forEach(function (key) {
                        if (tokenfieldReady[key] == false) {
                            isReady = false;
                        }
                    });
                    if (isReady && loadingDiv != null) {
                        loadingDiv.addClass('hide-loading-spinner');
                    }
                })
                .tokenfield({
                    autocomplete: {
                        source: BenefitCodes,
                        delay: 100
                    },
                    showAutocompleteOnFocus: true
                });

            if (ReadOnly) {
                $('#BenefitCodeTokenField').tokenfield('disable');
            }
        });

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        var app = new Vue({
            el: '#app',
            data: {
                UwLimit: Model,
                UwLimitVersion: Model.CurrentVersionObject,
                // Product
                Products: Products ? Products : [],
                ProductMaxIndex: 0,
                // Remark
                Remarks: Remarks,
                RemarkSubjects: RemarkSubjects,
                RemarkMaxIndex: 0,
                RemarkModal: {
                    CreatedByName: AuthUserName ? AuthUserName : null,
                    Status: null,
                    CreatedAtStr: null,
                    Content: null,
                    ShowSubjectSelect: true,
                },
                // Changelog
                Changelogs: Changelogs,
                Trails: [],
                VersionTrail: "",
            },
            methods: {
                // Remark
                resetRemarkInfo: function () {
                    this.RemarkModal.CreatedAtStr = moment().format(DateTimeFormat);
                    this.RemarkModal.CreatedByName = AuthUserName;
                    this.RemarkModal.ModuleId = this.UwLimit.ModuleId;
                    this.RemarkModal.ObjectId = this.UwLimit.TreatyPricingCedantId;
                    this.RemarkModal.SubModuleController = SubModuleController;
                    this.RemarkModal.SubObjectId = this.UwLimit.Id;
                    this.RemarkModal.Version = Model.CurrentVersion;
                    this.RemarkModal.ShowSubjectSelect = false;
                    this.RemarkModal.Content = null;

                    this.toggleRemarkSubject();
                    clearSelectedFiles('remark');
                },
                toggleRemarkSubject: function () {
                    this.RemarkModal.Subject = null;
                    this.$nextTick(function () {
                        $('#subjectSelect').selectpicker('refresh');
                    });

                    this.RemarkModal.ShowSubjectSelect = !this.RemarkModal.ShowSubjectSelect;
                    if (this.RemarkModal.ShowSubjectSelect) {
                        $('#subjectSelect').selectpicker('show');
                        $('#subjectText').hide();
                    } else {
                        $('#subjectSelect').selectpicker('hide');
                        $('#subjectText').show();
                    }
                },
                addRemark: function () {
                    var remark = createRemark(this.RemarkModal);

                    if (remark) {
                        remark.DocumentBos = this.saveDocuments(this.RemarkMaxIndex, remark.Id);

                        this.Remarks.unshift(Object.assign({}, remark));

                        if (!this.RemarkSubjects.includes(remark.Subject)) {
                            this.RemarkSubjects.push(remark.Subject);

                            this.$nextTick(function () {
                                $('#subjectSelect').selectpicker('refresh');
                            });
                        }

                        this.RemarkMaxIndex++;
                    }
                },
                saveDocuments(remarkIndex, remarkId = null) {
                    var files = getFiles();

                    if (!files) return;

                    var parentId = this.UwLimit.TreatyPricingCedantId;
                    var document = {
                        ModuleId: this.UwLimit.ModuleId,
                        ObjectId: parentId,
                        SubModuleController: SubModuleController,
                        SubObjectId: this.UwLimit.Id,
                        RemarkId: remarkId,
                        RemarkIndex: remarkIndex,
                        CreatedByName: AuthUserName,
                        CreatedAtStr: this.RemarkModal.CreatedAtStr,
                    };

                    var documents = [];

                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        var document = saveDocument(document, file, true);

                        if (document != null) {
                            documents.push(Object.assign({}, document));
                        }
                    }

                    return documents;
                },
                // Auto Expand TextArea
                autoExpandTextarea: function (id) {
                    var tArea = $('#' + id);
                    this.textAreaWidth = tArea.width();
                    this.textAreaHeight = tArea.height();
                    tArea.autoResize();
                    tArea.trigger('keyup');

                    tArea.on('keypress', function (evt) {
                        var evt = (evt) ? evt : ((event) ? event : null);
                        if (evt.keyCode == 13)
                            return false;
                    });
                },
                autoCollapseTextarea: function (id) {
                    var tArea = $('#' + id);
                    tArea.height(this.textAreaHeight);
                },
                // Changelog
                viewChangelog: function (index) {
                    this.Trails = this.Changelogs[index].UserTrailBos;
                    this.VersionTrail = this.Changelogs[index].BetweenVersionTrail;

                    $('[id^=showAll_]').hide();
                    $('[id^=showLess_]').show();
                    $('[id^=showAllBtn_]').show();
                    $('[id^=collapseAllBtn_]').hide();

                    $('#changelogModal').modal('show');
                },
                toggleChangelogDataView: function (index) {
                    $('#showAll_' + index).toggle();
                    $('#showLess_' + index).toggle();
                    $('#showAllBtn_' + index).toggle();
                    $('#collapseAllBtn_' + index).toggle();
                },
            },
            created: function () {
                if (this.Products)
                    this.ProductMaxIndex = this.Products.length - 1;
            },
        });
    </script>

    @Scripts.Render("~/Scripts/models/Versioning.js")
    @Scripts.Render("~/Scripts/models/ObjectLock.js")
}
