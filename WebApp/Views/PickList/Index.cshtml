@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.PickListViewModel>

@{
    ViewBag.Title = "Pick List";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right btn-row-inline">
                <div class="btn-group" style="display:unset">
                    <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        DOWNLOAD AS
                    </button>
                    <div class="dropdown-menu">
                        @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                        @Html.ActionLink("Filtered", "Download", new
                        {
                            type = 2,
                            DepartmentId = routeValue["DepartmentId"],
                            FieldName = routeValue["FieldName"],
                            UsedBy = routeValue["UsedBy"],
                            }, new { @class = "dropdown-item" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-30">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortDepartmentId;
                                @Shared.Html.Sorter(ViewBag, "Department", "DepartmentId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-35">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortFieldName;
                                @Shared.Html.Sorter(ViewBag, "Field Name", "FieldName", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-35">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortUsedBy;
                                @Shared.Html.Sorter(ViewBag, "Used By", "UsedBy", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "PickList", FormMethod.Get))
                        {
                            @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                            <th>
                                @Html.DropDownList("DepartmentId", (List<SelectListItem>)ViewBag.DropDownDepartments, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("FieldName", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("UsedBy", (List<SelectListItem>)ViewBag.DropDownDepartments, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @item.Department.Name
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FieldName)
                            </td>
                            @{
                                if (item.PickListDepartments != null && item.PickListDepartments.Count > 0)
                                {
                                    var usedBy = "";
                                    foreach (var dept in item.PickListDepartments)
                                    {
                                        var deptName = Services.Identity.DepartmentService.Find(dept.DepartmentId);
                                        if (string.IsNullOrEmpty(usedBy))
                                        {
                                            usedBy = deptName.Name;
                                        }
                                        else
                                        {
                                            usedBy = usedBy + ", " + deptName.Name;
                                        }
                                    }
                                    <td>@usedBy</td>
                                }
                                else
                                {
                                    <td>-</td>
                                }
                            }
                            <td class="text-center">
                                <a href="@Url.Action("Edit", new { id = item.Id })" class="bg-transparent linkbtn"><span class="fas fa-pencil-alt fa-lg"></span></a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="no-data">No available data found.</td>
                    </tr>
                }
            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        DepartmentId = routeValue["DepartmentId"],
                        FieldName = routeValue["FieldName"],
                        UsedBy = routeValue["UsedBy"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script>
        var Departments = @Html.Raw(Json.Encode(ViewBag.Departments));

        var usedByCount = 0;
        var tokenfieldReady = {
            usedBy: false,
        };

        $(document).ready(function () {
            $('#UsedByTokenField')

                .on('tokenfield:createtoken', function (e) {
                    var existingTokens = $(this).tokenfield('getTokens');
                    if (usedByCount != 0) {
                        $.each(existingTokens, function (index, token) {
                            if (token.value === e.attrs.value) {
                                e.preventDefault();
                            }
                        });
                    }
                })

                .on('tokenfield:createdtoken', function (e) {
                    var valid = Departments.includes(e.attrs.value)
                    if (!valid) {
                        $(e.relatedTarget).addClass('invalid');
                    }
                    usedByCount += 1;
                    $('#UsedByTokenField-tokenfield').removeAttr('placeholder');
                })

                .on('tokenfield:edittoken', function (e) {
                    var valid = Departments.includes(e.attrs.value)
                    if (valid) {
                        e.preventDefault();
                    }
                })

                .on('tokenfield:removedtoken', function (e) {
                    usedByCount -= 1;
                    if (usedByCount == 0) {
                        $("#UsedByTokenField-tokenfield").attr("placeholder", "Type here");
                    }
                })

                .on('tokenfield:initialize', function (e) {
                    tokenfieldReady.usedBy = true;
                    Object.keys(tokenfieldReady).forEach(function (key) {
                        if (tokenfieldReady[key] == false) {
                            isReady = false;
                        }
                    });
                })

                .tokenfield({
                    autocomplete: {
                        source: Departments,
                        delay: 100
                    },
                    showAutocompleteOnFocus: true
                });
        });
    </script>
}