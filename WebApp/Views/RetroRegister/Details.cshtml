@using WebApp.Models
@model WebApp.Models.RetroRegisterDetailViewModel

@{
    ViewBag.Title = "Retro Register";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    var enableSubmitForApproval = ViewBag.EnableSubmitForApproval;
    var enableApproval = ViewBag.EnableApproval;
    var enableGenerate = ViewBag.EnableGenerateIFRS;
    var disabled = ViewBag.EnabledEdit;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.RetroRegisterBo.GetStatusApprovalClass(Model.Status)">
                    @BusinessObject.RetroRegisterBo.GetStatusApprovalName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body">
        @Html.Partial("_LoadingSpinner")

        @using (Html.BeginForm("Details", "RetroRegister", new { id = Model.Id }, FormMethod.Post, new { id = "detailForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Status)
            @Html.HiddenFor(model => model.RetroStatementNo)
            @Html.HiddenFor(model => model.IsGenerateIFRS4)
            @Html.HiddenFor(model => model.IsGenerateIFRS17)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Type, (List<SelectListItem>)ViewBag.DropDownTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RetroStatementType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.RetroStatementType, (List<SelectListItem>)ViewBag.DropDownRetroTypes, htmlAttributes: new { @class = "form-control selectpicker" })
                        @Html.ValidationMessageFor(model => model.RetroStatementType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RetroStatementNo, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RetroStatementNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RetroStatementDateStr, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.RetroStatementDateStr, new { id = "RetroStatementDate", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('RetroStatementDate')" />
                        </div>
                        @Html.ValidationMessageFor(model => model.RetroStatementDateStr, "", new { @class = "text-danger" })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.RetroStatementDateStr)
                        <input type="text" readonly class="form-control" value="@(Model.RetroStatementDateStr)">
                    }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ReportCompletedDateStr, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.ReportCompletedDateStr, new { id = "ReportCompletedDate", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ReportCompletedDate')" />
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.ReportCompletedDateStr)
                        <input type="text" readonly class="form-control" value="@(Model.ReportCompletedDateStr)">
                    }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.SendToRetroDateStr, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.SendToRetroDateStr, new { id = "SendToRetroDate", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('SendToRetroDate')" />
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.SendToRetroDateStr)
                        <input type="text" readonly class="form-control" value="@(Model.SendToRetroDateStr)">
                    }
                    </div>
                </div>
                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RetroPartyId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.RetroPartyId, (List<SelectListItem>)ViewBag.DropDownRetroParties, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getRetroPartyDetail(this.value)" })
                    @if (!disabled) { @Html.HiddenFor(model => model.RetroPartyId) }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RiskQuarter, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        @Html.TextBoxFor(model => model.RiskQuarter, new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off" })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.RiskQuarter)
                        <input type="text" readonly class="form-control" value="@(Model.RiskQuarter)">
                    }
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RetroName, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RetroName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PartyCode, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.PartyCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.CedantId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.CedantId, (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker" })
                    @if (!disabled) { @Html.HiddenFor(model => model.CedantId) }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyCodeId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.TreatyCodeId, (List<SelectListItem>)ViewBag.DropDownTreatyCodes, htmlAttributes: new { @class = "form-control selectpicker", @onchange = "getTreatyCodeDetail(this.value)" })
                    @if (!disabled) { @Html.HiddenFor(model => model.TreatyCodeId) }
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.TreatyNumber, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TreatyNumber, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.TreatyType, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.TreatyType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Schedule, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Schedule, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.Lob, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Lob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.AccountFor, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AccountFor, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Gross1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Gross1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.GrossRenewalStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.GrossRenewalStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.AltPremiumStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AltPremiumStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ReserveCededBeginStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ReserveCededBeginStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ReserveCededEndStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ReserveCededEndStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RiskChargeCededBeginStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RiskChargeCededBeginStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RiskChargeCededEndStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RiskChargeCededEndStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.AverageReserveCededStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AverageReserveCededStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Discount1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Discount1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.DiscountRenewalStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.DiscountRenewalStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.DiscountAltStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.DiscountAltStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RiskPremiumStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RiskPremiumStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ClaimsStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ClaimsStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ProfitCommissionStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ProfitCommissionStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.SurrenderValStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.SurrenderValStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.GstPayableStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.GstPayableStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.NoClaimBonusStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.NoClaimBonusStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RetrocessionMarketingFeeStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RetrocessionMarketingFeeStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.AgreedDbCommissionStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AgreedDbCommissionStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Year1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Year1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RenewalStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RenewalStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.NetTotalAmountStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.NetTotalAmountStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.NbCession, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.NbCession, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.NbSumReins, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.NbSumReins, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.RnCession, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RnCession, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RnSumReins, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.RnSumReins, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.AltCession, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AltCession, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.AltSumReins, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.AltSumReins, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Frequency, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.Frequency, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.PreparedById, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.PreparedById, (List<SelectListItem>)ViewBag.DropDownUsers, htmlAttributes: new { @class = "form-control selectpicker" })
                    @if (!disabled) { @Html.HiddenFor(model => model.PreparedById) }
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.OriginalSoaQuarter, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        @Html.TextBoxFor(model => model.OriginalSoaQuarter, new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off" })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.OriginalSoaQuarter)
                        <input type="text" readonly class="form-control" value="@(Model.OriginalSoaQuarter)">
                    }
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.RetroConfirmationDateStr, htmlAttributes: new { @class = "col-form-label" })
                    @if (disabled)
                    {
                        <div class="input-w-icon">
                            @Html.TextBoxFor(model => model.RetroConfirmationDateStr, new { id = "RetroConfirmationDate", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('RetroConfirmationDate')" />
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.RetroConfirmationDateStr)
                        <input type="text" readonly class="form-control" value="@(Model.RetroConfirmationDateStr)">
                    }                    
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextAreaFor(model => model.Remark, new { @class = "form-control textarea-auto-expand", placeholder = "Type here", rows = "1", maxlength = "128" })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                </div>
                <div class="form-row mt-4">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ValuationGross1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationGross1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ValuationGrossRenStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationGrossRenStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ValuationDiscount1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationDiscount1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ValuationDiscountRenStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationDiscountRenStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ValuationCom1stStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationCom1stStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ValuationComRenStr, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ValuationComRenStr, new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>
                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                        <div class="row m-0 p-0 float-right">
                            @if (disabled)
                            {
                                <div class="mr-1">
                                    <button type="submit" class="btn btn-submit">SAVE</button>
                                </div>
                            }
                            @if (enableSubmitForApproval)
                            {
                                <div class="mr-1">
                                    <button class="btn btn-submit" type="button" onclick="updateStatus(@BusinessObject.RetroRegisterBo.StatusPendingApproval);">SUBMIT FOR APPROVAL</button>
                                </div>
                            }
                            @if (enableApproval)
                            {
                                <div class="mr-1">
                                    <button class="btn btn-submit" type="button" onclick="updateStatus(@BusinessObject.RetroRegisterBo.StatusApproved);">APPROVE</button>
                                </div>
                                <div class="mr-1">
                                    <button class="btn btn-submit" type="button" onclick="updateStatus(@BusinessObject.RetroRegisterBo.StatusRejected);">REJECT</button>
                                </div>
                            }
                            @if (enableGenerate)
                            {
                                <div class="mr-1">
                                    <div class="dropdown dropdownActionMenu ml-1">
                                        <button type="button" class="btn btn-submit dropdown-toggle" data-toggle="dropdown" id="dropdownMenuButton" aria-haspopup="true" aria-expanded="false">GENERATE AS</button>
                                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                            @Html.ActionLink("IFRS4", "Generate", new { id = Model.Id, type = 1 }, new { @class = "dropdown-item", onclick = "startDownload(this)" })
                                            @Html.ActionLink("IFRS17", "Generate", new { id = Model.Id, type = 2 }, new { @class = "dropdown-item", onclick = "startDownload(this)" })
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="table-responsive" id="app">
                        <div class="card-header">
                            <h4>SUNGL Files</h4>
                        </div>
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="w-80">Output</th>
                                    <th class="w-20">File</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-if="!SunglFiles || !SunglFiles.length">
                                    <td colspan="2" class="no-data">No available data found.</td>
                                </tr>
                                <tr v-for="(file, index) in SunglFiles">
                                    <td>{{ file.FileName }}</td>
                                    <td><a v-bind:href="urlDownloadLink(index)" title="Download"><span class="fas fa-download" /></a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        }
    </div>
</div>
@Html.Partial("_BackToList")
@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")
    @Scripts.Render("~/Scripts/textarea-autoresize.js")

    <script type="text/javascript">
        var GetTreatyCodeUrl = "@(Url.Action("GetTreatyCodeDetails"))";
        var GetRetroPartyUrl = "@(Url.Action("GetRetroPartyDetails"))";
        var loadingDiv = $("#loadingSpinner");
        var SunglFileList = @Html.Raw(Json.Encode(ViewBag.SunglFiles));
        var DownloadFileUrl = "@(Url.Action("RetroRegisterFileDownload", "RetroRegister"))";
        $(document).ready(function () {
            dateOffAutoComplete();
            loadingDiv.addClass('hide-loading-spinner');

            $('#RetroStatementDate, #ReportCompletedDate, #SendToRetroDate, #RetroConfirmationDate').datepicker({
                format: DateFormatDatePickerJs,
            });

            $('#RiskQuarter, #OriginalSoaQuarter').datepicker({
                format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
                minViewMode: 1,
                autoclose: true,
                language: "qtrs",
                forceParse: false,
            }).on('show', function (e) {
                var datepickerDropDown = $('.datepicker');
                datepickerDropDown.addClass('quarterpicker');
            });

            $(document).ready(function () {
                $('#Remark').autoResize();
            });

            var readOnly = @(disabled.ToString().ToLower());
            console.log(readOnly)
            if (!readOnly) {
                $("input:not('.prevent-disable'):not('[name=__RequestVerificationToken]'):not('[type=hidden]')").prop("readonly", "readonly");
                $("select:not('.prevent-disable')").prop("disabled", true);
                $('textarea').prop("disabled", true);
                $('.selectpicker').selectpicker('refresh');
            }
        });

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        function getTreatyCodeDetail(treatyCodeId) {

            if (treatyCodeId !== "" && treatyCodeId !== null && typeof treatyCodeId !== 'undefined') {
                $.ajax({
                    url: GetTreatyCodeUrl,
                    type: "POST",
                    data: {
                        treatyCodeId: treatyCodeId
                    },
                    cache: false,
                    async: false,
                    success: function (data) {
                        $('#TreatyNumber').val(data.treatyNo);
                        $('#TreatyType').val(data.treatyType);
                        //$('#Lob').val(data.lob);
                    }
                });
            }
            else {
                $('#TreatyNumber').val('');
                $('#TreatyType').val('');
                //$('#Lob').val('');
            }
        }

        function getRetroPartyDetail(retroPartyId) {

            if (retroPartyId !== "" && retroPartyId !== null && typeof retroPartyId !== 'undefined') {
                $.ajax({
                    url: GetRetroPartyUrl,
                    type: "POST",
                    data: {
                        retroPartyId: retroPartyId
                    },
                    cache: false,
                    async: false,
                    success: function (data) {
                        $('#RetroName').val(data.retroName);
                        $('#PartyCode').val(data.partyCode);
                    }
                });
            }
            else {
                $('#RetroName').val('');
                $('#PartyCode').val('');
            }
        }

        function generate(type) {
            if (type == 1) $('#IsGenerateIFRS4').val(true);
            if (type == 2) $('#IsGenerateIFRS17').val(true);

            $('#detailForm').submit();
        }

        function startDownload(download) {
            loadingDiv.removeClass('hide-loading-spinner');
            var downloadToken = (new Date()).getTime();

            if (download.href.includes("downloadToken=")) {
                download.href = download.href.replace(/(downloadToken=).*?/,'$1' + downloadToken + '$2')
            } else {
                download.href += "&downloadToken=" + downloadToken;
            }

            var cookiePattern = new RegExp( ( "downloadToken=" + downloadToken ), "i" );
            var cookieTimer = setInterval(checkCookies, 500);
            var refreshSession = setInterval(
                function () {
                    $.ajax({
                        url: "@(Url.Action("RefreshUserSession", "Account"))",
                        type: "POST",
                        cache: false,
                        async: false,
                        success: function (data) {
                            if (data.logout == true) {
                                window.location.href = "@(Url.Action("Login", "Account"))";
                            }
                        },
                    });
                }, 60 * 1000
            );

            function checkCookies() {
                if (document.cookie.search(cookiePattern) >= 0) {
                    loadingDiv.addClass('hide-loading-spinner');
                    clearInterval(cookieTimer);
                    clearInterval(refreshSession);
                }
            }
    }

    var app = new Vue({
        el: '#app',
        data: {
            // SUNGL Files
            SunglFiles: SunglFileList ? SunglFileList : [],
        },
        methods: {
            urlDownloadLink: function (index) {
                var item = this.SunglFiles[index];
                var url = DownloadFileUrl + '?id=' + item.Id;
                return url
            },
        }
    });

    function updateStatus(status) {
        $("#Status").val(status);
        $('#detailForm').submit();
    }

    </script>
}