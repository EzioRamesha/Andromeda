@using PagedList.Mvc
@model WebApp.Models.SanctionVerificationViewModel

@{
    ViewBag.Title = "Sanction Verification";
    ViewBag.Action = "Edit";
    ViewBag.ListPageUrl = Url.Action("Index");

    PagedList.IPagedList<WebApp.Models.SanctionVerificationDetailListingViewModel> DetailList = ViewBag.DetailList as PagedList.IPagedList<WebApp.Models.SanctionVerificationDetailListingViewModel>;
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
    routeValue["id"] = Url.RequestContext.RouteData.Values["id"];
    var disabled = ViewBag.ReadOnly != null && ViewBag.ReadOnly;
    var isClaimUser = ViewBag.IsClaimUser;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

@Html.Partial("_ValidationSummary")

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-6"><h4>@ViewBag.Action @ViewBag.Title</h4></div>
            <div class="col-6 text-right">
                <span class="@BusinessObject.Sanctions.SanctionVerificationBo.GetStatusClass(Model.Status)">
                    @BusinessObject.Sanctions.SanctionVerificationBo.GetStatusName(Model.Status)
                </span>
            </div>
        </div>
    </div>
    <div class="card-body" id="app">
        @using (Html.BeginForm("Edit", "SanctionVerification", FormMethod.Post, new { id = "SanctionVerificationForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Status)
            @Html.HiddenFor(model => model.SelectedIds)

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.SourceId, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.SourceId, (List<SelectListItem>)ViewBag.DropDownSources, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                        @Html.HiddenFor(model => model.SourceId)
                        @Html.ValidationMessageFor(model => model.SourceId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Checking Against", htmlAttributes: new { @class = "col-form-label" })

                        <div>
                            @Html.LabelFor(model => model.IsRiData, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.IsRiData, new { htmlAttributes = new { @disabled = "disabled" } })
                            @Html.HiddenFor(model => model.IsRiData)
                            @Html.ValidationMessageFor(model => model.IsRiData, "", new { @class = "text-danger" })

                            @Html.LabelFor(model => model.IsClaimRegister, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.IsClaimRegister, new { htmlAttributes = new { @disabled = "disabled" } })
                            @Html.HiddenFor(model => model.IsClaimRegister)
                            @Html.ValidationMessageFor(model => model.IsClaimRegister, "", new { @class = "text-danger" })

                            @Html.LabelFor(model => model.IsReferralClaim, htmlAttributes: new { @class = "col-form-label" })
                            @Html.EditorFor(model => model.IsReferralClaim, new { htmlAttributes = new { @disabled = "disabled" } })
                            @Html.HiddenFor(model => model.IsReferralClaim)
                            @Html.ValidationMessageFor(model => model.IsReferralClaim, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownListFor(model => model.Type, (List<SelectListItem>)ViewBag.DropDownTypes, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                        @Html.HiddenFor(model => model.Type)
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">

                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.LabelFor(model => model.ProcessStartAt, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ProcessStartAtStr, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.HiddenFor(model => model.ProcessStartAt)
                        @Html.ValidationMessageFor(model => model.ProcessStartAt, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.LabelFor(model => model.ProcessEndAt, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EditorFor(model => model.ProcessEndAtStr, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        @Html.HiddenFor(model => model.ProcessEndAt)
                        @Html.ValidationMessageFor(model => model.ProcessEndAt, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="modal fade" id="remarkModal" tabindex="-1" role="dialog" aria-labelledby="remarkModalTitle" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="remarkModalTitle">Remark</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-horizontal">
                                <div class="form-group">
                                    @Html.Label("Name", htmlAttributes: new { @class = "col-form-label" })
                                    @Html.TextBox("AuthUserName", null, new { @class = "form-control", placeholder = "Type here", @readonly = "true", value = @ViewBag.AuthUserName })
                                </div>

                                <div class="form-group">
                                    @Html.Label("Remark", htmlAttributes: new { @class = "col-form-label" })
                                    @Html.TextArea("Remark", new { style = "resize: none;", @class = "form-control", placeholder = "Type here", rows = "3" })
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-cancel mr-auto" data-dismiss="modal">CANCEL</button>
                            <button type="submit" class="btn btn-submit" id="saveBtn">SAVE</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <br />
        <br />

        <div class="text-right" style="margin-bottom: 20px;">
            <div class="btn-group">
                <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    DOWNLOAD AS
                </button>
                <div class="dropdown-menu">
                    @Html.ActionLink("All", "DownloadDetail", new { type = 1, id = Model.Id }, new { @class = "dropdown-item" })
                    @Html.ActionLink("Filtered", "DownloadDetail", new
                    {
                        type = 2,
                        id = Model.Id,
                        ModuleId = routeValue["ModuleId"],
                        UploadDate = routeValue["UploadDate"],
                        CedingCompany = routeValue["CedingCompany"],
                        TreatyCode = routeValue["TreatyCode"],
                        CedingPlanCode = routeValue["CedingPlanCode"],
                        PolicyNumber = routeValue["PolicyNumber"],
                        InsuredName = routeValue["InsuredName"],
                        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                        InsuredIcNumber = routeValue["InsuredIcNumber"],
                        SoaQuarter = routeValue["SoaQuarter"],
                        SumReins = routeValue["SumReins"],
                        ClaimAmount = routeValue["ClaimAmount"],
                        IsWhitelist = routeValue["IsWhitelist"],
                    }, new { @class = "dropdown-item" })
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortModuleId;
                                @Shared.Html.Sorter(ViewBag, "Check Against", "ModuleId", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        @*<th class="w-10">
                                @{
                                    routeValue["SortOrder"] = ViewBag.SortUploadDate;
                                    @Shared.Html.Sorter(ViewBag, "Date Uploaded", "UploadDate", @Url.Action("Edit", routeValue))
                                }
                            </th>*@
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedingCompany;
                                @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedingCompany", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortTreatyCode;
                                @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCode", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCedingPlanCode;
                                @Shared.Html.Sorter(ViewBag, "Ceding Plan Code", "CedingPlanCode", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCategory;
                                @Shared.Html.Sorter(ViewBag, "Category", "Category", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortPolicyNumber;
                                @Shared.Html.Sorter(ViewBag, "Policy Number", "PolicyNumber", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredName;
                                @Shared.Html.Sorter(ViewBag, "Insured Name", "InsuredName", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredDateOfBirth;
                                @Shared.Html.Sorter(ViewBag, "Date of Birth", "InsuredDateOfBirth", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortInsuredIcNumber;
                                @Shared.Html.Sorter(ViewBag, "NRIC", "InsuredIcNumber", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortSoaQuarter;
                                @Shared.Html.Sorter(ViewBag, "SOA Quarter", "SoaQuarter", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortSumReins;
                                @Shared.Html.Sorter(ViewBag, "Sum Reinsured", "SumReins", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortClaimAmount;
                                @Shared.Html.Sorter(ViewBag, "Claim Amount", "ClaimAmount", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="w-10">
                            Previous Decision
                        </th>
                        <th class="w-10">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsWhitelist;
                                @Shared.Html.Sorter(ViewBag, "Whitelist", "IsWhitelist", @Url.Action("Edit", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Remark
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                        <th>
                            @*Check Box here*@
                        </th>
                    </tr>
                    <tr>
                        @using (Html.BeginForm("Edit", "SanctionVerification", new { id = Model.Id }, FormMethod.Get))
                        {
                            @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                            <th>
                                @Html.DropDownList("ModuleId", (List<SelectListItem>)ViewBag.DropDownModuleIds, new { @class = "form-control selectpicker prevent-disable", @data_container = "body" })
                            </th>
                            @*<th>
                                    @Html.TextBox("UploadDate", null, new { @class = "form-control", placeholder = "DD MM YYYY" })
                                    <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('UploadDate')" />
                                </th>*@
                            <th>
                                @Html.TextBox("CedingCompany", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("TreatyCode", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("CedingPlanCode", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.DropDownList("Category", (List<SelectListItem>)ViewBag.DropDownCategories, new { @class = "form-control selectpicker prevent-disable", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("PolicyNumber", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredName", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("InsuredDateOfBirth", null, new { @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                            </th>
                            <th>
                                @Html.TextBox("InsuredIcNumber", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("SoaQuarter", null, new { @class = "form-control", placeholder = "YYYY MM", autocomplete = "off" })
                            </th>
                            <th>
                                @Html.TextBox("SumReins", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("ClaimAmount", null, new { @class = "form-control prevent-disable", placeholder = "Type here" })
                            </th>
                            <th></th>
                            <th>
                                @Html.DropDownList("IsWhitelist", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, new { @class = "form-control selectpicker prevent-disable", @data_container = "body" })
                            </th>
                            <th class="text-center">

                            </th>
                            <th class="text-center">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                            <th class="va-middle">
                                @if (!disabled)
                                {
                                    @Html.CheckBox("SelectAllDetail", new { @onclick = "selectAllDetail()" })
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (DetailList.Count > 0)
                    {
                        foreach (var item in DetailList)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Module.Name)
                                </td>
                                @*<td>
                                        @if (item.UploadDate != null)
                                        {
                                            @item.UploadDate.Value.ToString(Shared.Util.GetDateFormat());
                                        }
                                    </td>*@
                                <td>
                                    @Html.DisplayFor(modelItem => item.CedingCompany)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TreatyCode)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CedingPlanCode)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Category)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.PolicyNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsuredName)
                                </td>
                                <td>
                                    @if (item.InsuredDateOfBirth != null)
                                    {
                                        @item.InsuredDateOfBirth.Value.ToString(Shared.Util.GetDateFormat());
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.InsuredIcNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SoaQuarter)
                                </td>
                                <td>
                                    @Shared.Util.DoubleToString(item.SumReins)
                                </td>
                                <td class="text-right">
                                    @Shared.Util.DoubleToString(item.ClaimAmount)
                                </td>
                                <td>
                                    @BusinessObject.Sanctions.SanctionVerificationDetailBo.GetPreviousDecisionName(item.PreviousDecision)
                                    @if (!string.IsNullOrEmpty(item.PreviousDecisionRemark))
                                    {
                                        @Html.Display(string.Format(" ({0})", item.PreviousDecisionRemark))
                                    }
                                </td>
                                <td>
                                    @if (item.IsWhitelist)
                                    {
                                        @Html.Raw("Yes");
                                    }
                                    else
                                    {
                                        @Html.Raw("No");
                                    }
                                </td>
                                <td class="text-center">
                                    @if (!string.IsNullOrEmpty(item.Remark))
                                    {
                                        <span style="cursor:pointer;" class="fas fa-file-alt" onclick="viewRemarkBtn('@item.Remark')" />
                                    }
                                </td>
                                <td class="text-center">
                                    @{
                                        var url = "";
                                        var error = "";
                                        switch (item.Module.Controller)
                                        {
                                            case "RiData":
                                                if (!Services.RiDatas.RiDataService.IsDeleted(item.ObjectId))
                                                {
                                                    url = Url.Action("Details", item.Module.Controller, new { id = item.ObjectId, ridataBatchId = item.BatchId });
                                                }
                                                else
                                                {
                                                    error = "RI Data has been deleted";
                                                }
                                                break;
                                            case "ClaimRegister":
                                                string controller = isClaimUser ? string.Format("{0}Claim", item.Module.Controller) : item.Module.Controller;
                                                url = Url.Action("Edit", controller, new { id = item.ObjectId });
                                                break;
                                            case "ReferralClaim":
                                                url = Url.Action("Edit", item.Module.Controller, new { id = item.ObjectId });
                                                break;
                                        }

                                        if (!string.IsNullOrEmpty(url))
                                        {
                                            <a href="@url" title="Edit" target="_blank">
                                                <span class="fas fa-eye" />
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="#" onclick="showError('@error')" title="Edit">
                                                <span class="fas fa-exclamation-triangle" />
                                            </a>
                                        }
                                    }
                                </td>
                                <td>
                                    <div class="actionCheckbox" name="selectDetail">
                                        @if (item.IsWhitelist || disabled)
                                        {

                                        }
                                        else
                                        {
                                            @Html.CheckBox("SelectDetail", new { id = item.Id })
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="15" class="no-data">No available data found.</td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>

        @{
            ViewBag.CurrentPageNumber = DetailList.PageNumber;
            ViewBag.CurrentPageItems = DetailList.Count;
            ViewBag.PageSize = DetailList.PageSize;
            ViewBag.Total = ViewBag.DetailTotal;
        }
        <div class="pagination-footer position-relative">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8" id="DetailPager">
                    @Html.PagedListPager(DetailList, Page => Url.Action("Edit", new
                    {
                        id = Model.Id,
                        ModuleId = routeValue["ModuleId"],
                        UploadDate = routeValue["UploadDate"],
                        Category = routeValue["Category"],
                        CedingCompany = routeValue["CedingCompany"],
                        TreatyCode = routeValue["TreatyCode"],
                        CedingPlanCode = routeValue["CedingPlanCode"],
                        PolicyNumber = routeValue["PolicyNumber"],
                        InsuredName = routeValue["InsuredName"],
                        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                        InsuredIcNumber = routeValue["InsuredIcNumber"],
                        SoaQuarter = routeValue["SoaQuarter"],
                        SumReins = routeValue["SumReins"],
                        ClaimAmount = routeValue["ClaimAmount"],
                        IsWhitelist = routeValue["IsWhitelist"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>

        <div class="form-row form-row-btn">
            <div class="form-group col-md-12 btn-row">
                @Html.ActionLink("CANCEL", "Index", null, new { @class = "btn btn-cancel" })
                <div class="m-0 p-0 float-right">
                    <button type="submit" class="btn btn-del" id="exactMatchBtn">
                        EXACT MATCH
                    </button>
                    <button type="button" class="btn btn-add" onclick="resetRemarkModal()" data-toggle="modal" data-target="#remarkModal" id="whitelistBtn">
                        MARK AS WHITELIST
                    </button>
                    <button type="submit" class="btn btn-add" id="remainBtn">
                        REMAIN
                    </button>
                </div>
            </div>
        </div>

        <div class="modal fade" id="viewRemarkModal" tabindex="-1" role="dialog" aria-labelledby="viewRemarkModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewRemarkModalTitle">Remark</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-horizontal">
                            <div class="form-group">
                                @Html.TextArea("ViewRemark", new { style = "resize: none;", @class = "form-control", placeholder = "Type here", rows = "3", @readonly = "true" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="sanctionErrorModal" tabindex="-1" role="dialog" aria-labelledby="sanctionErrorModalTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewRemarkModalTitle">Error</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body py-4">
                        <span id="sanctionError"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        var ModelId = @Model.Id;
        var WhitelistUrl = '@Url.Action("Whitelist")';
        var ExactMatchUrl = '@Url.Action("ExactMatch")';
        var RemainUrl = '@Url.Action("Remain")';
        var SavedSelectedIds = '@ViewBag.SelectedIds';

        $(document).ready(function () {
            dateOffAutoComplete();

            $('#SoaQuarter').datepicker({
                format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
                minViewMode: 1,
                autoclose: true,
                language: "qtrs",
                forceParse: false
            }).on('show', function (e) {
                var datepickerDropDown = $('.datepicker');
                datepickerDropDown.addClass('quarterpicker');
            });

            if (SavedSelectedIds != '') {
                var selectedAll = true;
                var selected = SavedSelectedIds.split(",");

                $('input[name=SelectDetail]').each(function () {
                    var id = $(this).attr('id');
                    if (typeof id != 'undefined') {
                        if (selected.includes(id)) {
                            $(this).prop('checked', true);
                        } else {
                            selectedAll = false;
                        }
                    }

                });

                if (selectedAll) {
                    $('input[name=SelectAllDetail]').prop('checked', true);
                }
            }
        });

        function showError(error) {
            $('#sanctionError').text(error);
            $('#sanctionErrorModal').modal('show');
        }

        function selectAllDetail() {
            $('input[name=SelectDetail]').prop('checked', $('input[name=SelectAllDetail]').prop('checked'));
        }

        function formatIds() {
            var selected = [];
            if (SavedSelectedIds != '') {
                selected = SavedSelectedIds.split(",");
            }

            $('input[name=SelectDetail]').each(function () {
                var id = $(this).attr('id');
                if (typeof id != 'undefined') {
                    var checked = $(this).prop('checked');

                    if (selected.includes(id)) {
                        if (!checked)
                            selected.splice(selected.indexOf(id), 1);
                    } else {
                        if (checked)
                            selected.push(id);
                    }
                }
            });
            var selectedIds = selected.join(',');

            $('#SelectedIds').val(selectedIds);
        }

        function resetRemarkModal() {
            $('#Remark').val("");
        }

        $('#whitelistBtn').on("click", function () {
            $('#SanctionVerificationForm').attr("action", WhitelistUrl);
            formatIds();
        });

        $('#exactMatchBtn').on("click", function () {
            $('#SanctionVerificationForm').attr("action", ExactMatchUrl);
            formatIds();
            $('#SanctionVerificationForm').submit();
        });

        $('#remainBtn').on("click", function () {
            $('#SanctionVerificationForm').attr("action", RemainUrl);
            formatIds();
            $('#SanctionVerificationForm').submit();
        });

        $('a[href^="/SanctionVerification/Edit/' + ModelId + '?"]').on("click", function () {
            formatIds();
            this.href += "&SelectedIds=" + $('#SelectedIds').val();
        });

        $('#saveBtn').on("click", function () {
            $('#SanctionVerificationForm').submit();
        });

        function viewRemarkBtn(remark) {
            $("#ViewRemark").val(remark);
            $("#viewRemarkModal").modal();
        }
    </script>
}