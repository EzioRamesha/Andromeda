@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.SanctionVerificationViewModel>

@{
    ViewBag.Title = "Sanction Verification";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-4"><h4>@ViewBag.Title</h4></div>
            <div class="col-md-8 text-right  btn-row-inline">
                <a href="@Url.Action("Create")" class="btn btn-add">
                    ADD CHECKING
                </a>
            </div>
        </div>
    </div>
    <div class="card-body card-listing">
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCreatedAt;
                                @Shared.Html.Sorter(ViewBag, "Checking date & Time", "CreatedAt", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortSourceId;
                                @Shared.Html.Sorter(ViewBag, "Source", "SourceId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsRiData;
                                @Shared.Html.Sorter(ViewBag, "RI Data", "IsRiData", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsClaimRegister;
                                @Shared.Html.Sorter(ViewBag, "Claim Register", "IsClaimRegister", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortIsReferralClaim;
                                @Shared.Html.Sorter(ViewBag, "Referral Claim", "IsReferralClaim", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortType;
                                @Shared.Html.Sorter(ViewBag, "Type", "Type", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortBatchId;
                                @Shared.Html.Sorter(ViewBag, "Batch ID", "BatchId", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortCreatedBy;
                                @Shared.Html.Sorter(ViewBag, "Scheduled by", "CreatedBy", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortProcessStartAt;
                                @Shared.Html.Sorter(ViewBag, "Processing Start Date & Time", "ProcessStartAt", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortProcessEndAt;
                                @Shared.Html.Sorter(ViewBag, "Processing End Date & Time", "ProcessEndAt", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="w-15">
                            No of Matched Record(s)
                        </th>
                        <th class="w-25">
                            No of Unprocessed Record(s)
                        </th>
                        <th class="w-15">
                            @{
                                routeValue["SortOrder"] = ViewBag.SortStatus;
                                @Shared.Html.Sorter(ViewBag, "Status", "Status", @Url.Action("Index", routeValue))
                            }
                        </th>
                        <th class="text-center w-5">
                            Action
                        </th>
                    </tr>

                    <tr>
                        @using (Html.BeginForm("Index", "SanctionVerification", FormMethod.Get))
                        {
                            string sortOrder = ViewBag.SortOrder;

                            @Html.Hidden("SortOrder", sortOrder)
                            <th>
                                @Html.TextBox("CreatedAt", null, new { id = "CreatedAt", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('CreatedAt')" />
                            </th>
                            <th>
                                @Html.DropDownList("SourceId", (List<SelectListItem>)ViewBag.DropDownSources, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("IsRiData", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("IsClaimRegister", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("IsReferralClaim", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.DropDownList("Type", (List<SelectListItem>)ViewBag.DropDownTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th>
                                @Html.TextBox("BatchId", null, new { @class = "form-control", placeholder = "Type here", @type = "number", @min = "0" })
                            </th>
                            <th>
                                @Html.TextBox("CreatedBy", null, new { @class = "form-control", placeholder = "Type here" })
                            </th>
                            <th>
                                @Html.TextBox("ProcessStartAt", null, new { id = "ProcessStartAt", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ProcessStartAt')" />
                            </th>
                            <th>
                                @Html.TextBox("ProcessEndAt", null, new { id = "ProcessEndAt", @class = "form-control", placeholder = "DD MM YYYY" })
                                <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('ProcessEndAt')" />
                            </th>
                            <th>
                                @*No of Matched Record(s)*@
                            </th>
                            <th style="min-width: 160px;">
                                @*No of Unprocessed Record(s)*@
                                @Html.CheckBox("UnprocessedRecords") @Html.Label("Unprocessed Only", htmlAttributes: new { @class = "col-form-label" })
                            </th>
                            <th>
                                @Html.DropDownList("Status", (List<SelectListItem>)ViewBag.DropDownStatuses, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                            </th>
                            <th class="text-center align-middle">
                                <div class="btn-row-action">
                                    <a href="@Url.Action("Index")" class="btn btn-circle" title="Clear">
                                        <span class="fas fa-backspace" />
                                    </a>
                                    <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                </div>
                            </th>
                        }
                    </tr>
                </thead>

                @if (Model.Count > 0)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @item.CreatedAt.ToString(Shared.Util.GetDateTimeFormat())
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Source.Name)
                            </td>
                            <td>
                                @if (item.IsRiData)
                                {
                                    @Html.Raw("Yes")
                                }
                                else
                                {
                                    @Html.Raw("No")
                                }
                            </td>
                            <td>
                                @if (item.IsClaimRegister)
                                {
                                    @Html.Raw("Yes")
                                }
                                else
                                {
                                    @Html.Raw("No")
                                }
                            </td>
                            <td>
                                @if (item.IsReferralClaim)
                                {
                                    @Html.Raw("Yes")
                                }
                                else
                                {
                                    @Html.Raw("No")
                                }
                            </td>
                            <td>
                                @BusinessObject.Sanctions.SanctionVerificationBo.GetTypeName(item.Type)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.BatchId)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CreatedBy.FullName)
                            </td>
                            <td>
                                @if (item.ProcessStartAt.HasValue)
                                {
                                    @item.ProcessStartAt.Value.ToString(Shared.Util.GetDateTimeFormat())
                                }
                            </td>
                            <td>
                                @if (item.ProcessEndAt.HasValue)
                                {
                                    @item.ProcessEndAt.Value.ToString(Shared.Util.GetDateTimeFormat())
                                }
                            </td>
                            <td class="text-right">
                                @Html.DisplayFor(modelItem => item.Record)
                            </td>
                            <td class="text-right">
                                @Html.DisplayFor(modelItem => item.UnprocessedRecords)
                            </td>
                            <td class="va-middle">
                                <span class="@BusinessObject.Sanctions.SanctionVerificationBo.GetStatusClass(item.Status)">
                                    @BusinessObject.Sanctions.SanctionVerificationBo.GetStatusName(item.Status)
                                </span>
                            </td>
                            <td class="text-center">
                                <a href="@Url.Action("Edit", new { id = item.Id })" class="bg-transparent linkbtn"><span class="fas fa-pencil-alt fa-lg"></span></a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="11" class="no-data">No available data found.</td>
                    </tr>
                }

            </table>
        </div>

        <div class="pagination-footer">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                    {
                        CreatedAt = routeValue["CreatedAt"],
                        SourceId = routeValue["SourceId"],
                        IsRiData = routeValue["IsRiData"],
                        IsClaimRegister = routeValue["IsClaimRegister"],
                        IsReferralClaim = routeValue["IsReferralClaim"],
                        Type = routeValue["Type"],
                        BatchId = routeValue["BatchId"],
                        CreatedBy = routeValue["CreatedBy"],
                        ProcessStartAt = routeValue["ProcessStartAt"],
                        ProcessEndAt = routeValue["ProcessEndAt"],
                        UnprocessedRecords = routeValue["UnprocessedRecords"],
                        Status = routeValue["Status"],
                        SortOrder = ViewBag.SortOrder,
                        Page,
                    }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            dateOffAutoComplete();

            $('#CreatedAt').datepicker({
                format: DateFormatDatePickerJs,
            });

            $('#ProcessStartAt').datepicker({
                format: DateFormatDatePickerJs,
            });

            $('#ProcessEndAt').datepicker({
                format: DateFormatDatePickerJs,
            });
        });

        function focusOnDate(val) {
            $('#' + val).focus();
        }
    </script>
}