@using PagedList.Mvc

@model WebApp.Models.InvoiceRegisterViewModel

@{
    ViewBag.Title = "Invoice Register";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
    bool readOnly = ViewBag.ReadOnly == null ? false : ViewBag.ReadOnly;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-12"><h4>@ViewBag.Title</h4></div>
        </div>
    </div>
    <div class="card-body card-listing">
        <ul class="nav nav-tabs">
            <li class="nav-item"><a data-toggle="tab" href="#invoiceReg" class="@(Model.ActiveTab == null || Model.ActiveTab == 1 ? "active" : "") underline-tab">Invoice Register</a></li>
            <li class="nav-item"><a class="@(Model.ActiveTab == 2 ? "active" : "") underline-tab" data-toggle="tab" href="#batch">Batch</a></li>
        </ul>

        <div class="tab-content underline-tab-content">
            <div class="tab-pane fade @(Model.ActiveTab == null || Model.ActiveTab == 1 ? "show active" : "")" id="invoiceReg" role="tabpanel" aria-labelledby="invoiceReg-tab">

                <div class="form-row mb-4">
                    <div class="form-group col-md-12 text-right btn-row-inline">
                        @if (readOnly)
                        {
                            <div class="file btn btn-upload disabled" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                                <label>UPLOAD</label>
                            </div>
                        }
                        else
                        {
                            <div class="file btn btn-upload" data-loading-text="Processing...<span></span>" style="display: inline-flex;">
                                <label>UPLOAD</label>
                                @using (Html.BeginForm("Upload", "InvoiceRegister", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <input type="file" id="dataFile" name="upload" accept=".csv" onchange="this.form.submit()" />
                                }
                            </div>
                        }
                        <div class="btn-group" style="display: inline-flex;">
                            <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                DOWNLOAD AS
                            </button>
                            <div class="dropdown-menu">
                                @Html.ActionLink("All", "Download", new { type = 1 }, new { @class = "dropdown-item" })
                                @Html.ActionLink("Filtered", "Download", new
                               {
                                   Type = 2,
                                   InvoiceType = routeValue["InvoiceType"],
                                   TreatyCodeId = routeValue["TreatyCodeId"],
                                   InvoiceNo = routeValue["InvoiceNo"],
                                   InvoiceDate = routeValue["InvoiceDate"],
                                   SttReceivedDate = routeValue["StatementReceivedDate"],
                                   CedantId = routeValue["CedantId"],
                                   PartyCode = routeValue["PartyCode"],
                                   RiskQuarter = routeValue["RiskQuarter"],
                                   TreatyType = routeValue["TreatyType"],
                                   AccountFor = routeValue["AccountFor"],
                                   TotalPaid = routeValue["TotalPaid"],
                                   Year1st = routeValue["Year1st"],
                                   Renewal = routeValue["Renewal"],
                                   Gross1st = routeValue["Gross1st"],
                                   GrossRen = routeValue["GrossRenewal"],
                                   PreparedById = routeValue["PreparedById"],
                                   Status = routeValue["InvoiceStatus"],
                               }, new { @class = "dropdown-item" })
                            </div>
                        </div>
                    </div>
                </div>

                @using (Html.BeginForm("Index", "InvoiceRegister", FormMethod.Get))
                {
                    @Html.Hidden("Sort1Order", (string)ViewBag.Sort1Order)
                    @Html.Hidden("Sort2Order", (string)ViewBag.Sort2Order)
                    @Html.Hidden("Results1Page", (string)Model.SearchResults1Page.ToString())
                    @Html.Hidden("Results2Page", (string)Model.SearchResults2Page.ToString())
                    @Html.Hidden("TabIndex", 1)

                    <div class="form-row mb-2">
                        <div class="form-group col-md-6 mid-line-1">
                            @Html.Label("Invoice Type", htmlAttributes: new { @class = "col-form-label" })
                            <div class="row">
                                <div class="col-md-11">
                                    @Html.DropDownList("InvoiceType", (List<SelectListItem>)ViewBag.InvoiceTypeItems, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </div>
                                <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                            </div>
                        </div>
                        <div class="form-group col-md-6 mid-line-2">&nbsp;</div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortInvoiceNo;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Invoice No", "InvoiceNo", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortInvoiceDate;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Invoice Date", "InvoiceDate", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortSttReceivedDate;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Stt Received Date", "StatementReceivedDate", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-20">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortCedantId;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Client Name", "CedantId", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortRiskQuarter;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Risk Quarter", "RiskQuarter", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortTreatyCodeId;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeId", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortAccountFor;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Accounts For", "AccountFor", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortTotalPaid;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Total Paid", "TotalPaid", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.Sort1stYear;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "1st Year", "Year1st", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortRenewal;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Renewal", "Renewal", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortGross1st;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Gross - 1st", "Gross1st", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-15">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortGrossRen;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Gross - Ren", "GrossRenewal", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        @{
                                            routeValue["Sort1Order"] = ViewBag.SortPreparedBy;
                                            routeValue["Sort2Order"] = ViewBag.Sort2Order;
                                            routeValue["TabIndex"] = 1;
                                            @Shared.Html.Sorter(ViewBag, "Person In-Charge", "PreparedById", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                    <th class="w-10">
                                        Invoice Status
                                    </th>
                                    <th class="text-center w-5">
                                        Action
                                    </th>
                                </tr>
                                <tr>
                                    <th>
                                        @Html.TextBox("InvoiceNo", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("InvoiceDate", null, new { id = "InvoiceDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InvoiceDate')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("StatementReceivedDate", null, new { id = "SttReceivedDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('SttReceivedDate')" />
                                    </th>
                                    <th>
                                        @Html.DropDownList("CedantId", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form -control selectpicker", @data_container = "body", @onchange = "getTreatyCode(this.value)" })
                                    </th>
                                    <th>
                                        @Html.TextBox("RiskQuarter", null, new { id = "RiskQuarter", @class = "form-control", placeholder = "YYMM", autocomplete = "off" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("TreatyCodeId", (List<SelectListItem>)ViewBag.DropDownEmpty, htmlAttributes: new { @class = "form -control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.TextBox("AccountFor", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("TotalPaid", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("Year1st", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("Renewal", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("Gross1st", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("GrossRenewal", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("PreparedById", (List<SelectListItem>)ViewBag.DropDownUsers, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("InvoiceStatus", (List<SelectListItem>)ViewBag.InvoiceStatusItems, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th class="text-center align-middle">
                                        <div class="btn-row-action">
                                            <a href="@Url.Action("Index", new { Sort2Order = ViewBag.Sort2Order, Results2Page = Model.SearchResults2Page, TabIndex = 1 })" class="btn btn-circle" title="Clear">
                                                <span class="fas fa-backspace" />
                                            </a>
                                            <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                        </div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.InvoiceRegisters.Count > 0)
                                {
                                    foreach (var item in Model.InvoiceRegisters)
                                    {
                                        <tr>
                                            <td>@item.InvoiceNo</td>
                                            <td>
                                                @if (item.InvoiceDate != null)
                                                {
                                                    @item.InvoiceDate.Value.ToString(Shared.Util.GetDateFormat())
                                                }
                                            </td>
                                            <td>
                                                @if (item.StatementReceivedDate != null)
                                                {
                                                    @item.StatementReceivedDate.Value.ToString(Shared.Util.GetDateFormat())
                                                }
                                            </td>
                                            <td>@item.ClientName</td>
                                            <td>@item.RiskQuarter</td>
                                            <td>
                                                @if (item.TreatyCode != null)
                                                {
                                                    @item.TreatyCode.Code
                                                }
                                            </td>
                                            <td>@item.AccountsFor</td>
                                            <td class="text-right">@Shared.Util.DoubleToString(item.TotalPaid)</td>
                                            <td class="text-right">@Shared.Util.DoubleToString(item.Year1st)</td>
                                            <td class="text-right">@Shared.Util.DoubleToString(item.Renewal)</td>
                                            <td class="text-right">@Shared.Util.DoubleToString(item.Gross1st)</td>
                                            <td class="text-right">@Shared.Util.DoubleToString(item.GrossRenewal)</td>
                                            <td>@item.PreparedByName</td>
                                            <td class="va-middle">
                                                @if (item.SoaDataBatch != null)
                                                {
                                                    <span class="@BusinessObject.SoaDatas.SoaDataBatchBo.GetInvoiceStatusClass(item.SoaDataBatch.InvoiceStatus)">
                                                        @BusinessObject.SoaDatas.SoaDataBatchBo.GetInvoiceStatusName(item.SoaDataBatch.InvoiceStatus)
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <a href="@Url.Action("Details", "InvoiceRegister", new { id = item.Id })">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="15" class="no-data">No available data found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }


                <div class="pagination-footer">
                    <div class="row">
                        <div class="col-md-4">
                            @{
                                ViewBag.CurrentPageNumber = Model.InvoiceRegisters.PageNumber;
                                ViewBag.CurrentPageItems = Model.InvoiceRegisters.Count;
                                ViewBag.PageSize = Model.InvoiceRegisters.PageSize;
                                ViewBag.Total = ViewBag.TotalInvoices;
                            }
                            @Html.Partial("_PageInfo")
                        </div>
                        <div class="col-md-8">
                            @Html.PagedListPager(Model.InvoiceRegisters, Page => Url.Action("Index", new
                            {
                                InvoiceType = routeValue["InvoiceType"],
                                InvoiceNo = routeValue["InvoiceNo"],
                                InvoiceDate = routeValue["InvoiceDate"],
                                StatementReceivedDate = routeValue["StatementReceivedDate"],
                                CedantId = routeValue["CedantId"],
                                RiskQuarter = routeValue["RiskQuarter"],
                                TreatyCodeId = routeValue["TreatyCodeId"],
                                AccountFor = routeValue["AccountFor"],
                                TotalPaid = routeValue["TotalPaid"],
                                Year1st = routeValue["Year1st"],
                                Renewal = routeValue["Renewal"],
                                Gross1st = routeValue["Gross1st"],
                                GrossRenewal = routeValue["GrossRenewal"],
                                PreparedById = routeValue["PreparedById"],
                                InvoiceStatus = routeValue["InvoiceStatus"],
                                BatchNo = routeValue["CedantId"],
                                BatchDate = routeValue["BatchDate"],
                                NoOfInvoices = routeValue["NoOfInvoices"],
                                BatchPersonInChargeId = routeValue["BatchPersonInChargeId"],
                                BatchStatus = routeValue["BatchStatus"],
                                Sort1Order = ViewBag.Sort1Order,
                                Sort2Order = ViewBag.Sort2Order,
                                Results1Page = Page,
                                Results2Page = Model.SearchResults2Page,
                                TabIndex = 1,
                            }), Shared.Html.GetPagedListRenderOptions())
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade @(Model.ActiveTab == 2 ? "show active" : "")" id="batch" role="tabpanel" aria-labelledby="batch-tab">

                <div class="text-right mb-2">
                    @if (readOnly)
                    {
                        <span class="btn btn-submit disabled">ADD NEW BATCH</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Create")" class="btn btn-add">ADD NEW BATCH</a>
                    }
                </div>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th class="w-25">
                                    @{
                                        routeValue["Sort1Order"] = ViewBag.Sort1Order;
                                        routeValue["Sort2Order"] = ViewBag.SortBatchNo;
                                        routeValue["TabIndex"] = 2;
                                        @Shared.Html.Sorter(ViewBag, "Batch No", "BatchNo", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-25">
                                    @{
                                        routeValue["Sort1Order"] = ViewBag.Sort1Order;
                                        routeValue["Sort2Order"] = ViewBag.SortBatchDate;
                                        routeValue["TabIndex"] = 2;
                                        @Shared.Html.Sorter(ViewBag, "Batch Date", "BatchDate", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["Sort1Order"] = ViewBag.Sort1Order;
                                        routeValue["Sort2Order"] = ViewBag.SortTotalInvoices;
                                        routeValue["TabIndex"] = 2;
                                        @Shared.Html.Sorter(ViewBag, "No of Invoices", "NoOfInvoices", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-20">
                                    @{
                                        routeValue["Sort1Order"] = ViewBag.Sort1Order;
                                        routeValue["Sort2Order"] = ViewBag.SortPersonInCharge;
                                        routeValue["TabIndex"] = 2;
                                        @Shared.Html.Sorter(ViewBag, "Person In-Charge", "BatchPersonInChargeId", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-15">
                                    Status
                                </th>
                                <th class="text-center w-5">
                                    Action
                                </th>
                            </tr>
                            <tr>
                                @using (Html.BeginForm("Index", "InvoiceRegister", FormMethod.Get))
                                {
                                    @Html.Hidden("Sort1Order", (string)ViewBag.Sort1Order)
                                    @Html.Hidden("Sort2Order", (string)ViewBag.Sort2Order)
                                    @Html.Hidden("Results1Page", (string)Model.SearchResults1Page.ToString())
                                    @Html.Hidden("Results2Page", (string)Model.SearchResults2Page.ToString())
                                    @Html.Hidden("TabIndex", 2)
                                    <th>
                                        @Html.TextBox("BatchNo", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.TextBox("BatchDate", null, new { id = "BatchDate", @class = "form-control", placeholder = "DD MM YYYY" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('BatchDate')" />
                                    </th>
                                    <th>
                                        @Html.TextBox("NoOfInvoices", null, new { @class = "form-control", placeholder = "Type here" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("BatchPersonInChargeId", (List<SelectListItem>)ViewBag.DropDownUsers, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th>
                                        @Html.DropDownList("BatchStatus", (List<SelectListItem>)ViewBag.StatusItems, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                    </th>
                                    <th class="text-center align-middle">
                                        <div class="btn-row-action">
                                            <a href="@Url.Action("Index", new { Sort1Order = ViewBag.Sort1Order, Results1Page = Model.SearchResults1Page, TabIndex = 2 })" class="btn btn-circle" title="Clear">
                                                <span class="fas fa-backspace" />
                                            </a>
                                            <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                        </div>
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.InvoiceRegisterBatches.Count > 0)
                            {
                                foreach (var item in Model.InvoiceRegisterBatches)
                                {
                                    <tr>
                                        <td>@item.BatchNo</td>
                                        <td>
                                            @if (item.BatchDate != null)
                                            {
                                                @item.BatchDate.Value.ToString(Shared.Util.GetDateFormat())
                                            }
                                        </td>
                                        <td>@item.TotalInvoice</td>
                                        <td>@item.PersonInChargeName</td>
                                        <td class="va-middle">
                                            <span class="@BusinessObject.InvoiceRegisters.InvoiceRegisterBatchBo.GetStatusClass(item.Status.Value)">
                                                @BusinessObject.InvoiceRegisters.InvoiceRegisterBatchBo.GetStatusName(item.Status.Value)
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-action" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <span class="fas fa-ellipsis-v dropbtn" />
                                                </button>
                                                <div class="dropdown-menu">
                                                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "dropdown-item" })
                                                    @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "dropdown-item" })
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="no-data">No available data found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="pagination-footer">
                    <div class="row">
                        <div class="col-md-4">
                            @{
                                ViewBag.CurrentPageNumber = Model.InvoiceRegisterBatches.PageNumber;
                                ViewBag.CurrentPageItems = Model.InvoiceRegisterBatches.Count;
                                ViewBag.PageSize = Model.InvoiceRegisterBatches.PageSize;
                                ViewBag.Total = ViewBag.TotalBatches;
                            }
                            @Html.Partial("_PageInfo")
                        </div>
                        <div class="col-md-8">
                            @Html.PagedListPager(Model.InvoiceRegisterBatches, Page => Url.Action("Index", new
                            {
                                InvoiceType = routeValue["InvoiceType"],
                                InvoiceNo = routeValue["InvoiceNo"],
                                InvoiceDate = routeValue["InvoiceDate"],
                                StatementReceivedDate = routeValue["StatementReceivedDate"],
                                CedantId = routeValue["CedantId"],
                                RiskQuarter = routeValue["RiskQuarter"],
                                TreatyCodeId = routeValue["TreatyCodeId"],
                                AccountFor = routeValue["AccountFor"],
                                TotalPaid = routeValue["TotalPaid"],
                                Year1st = routeValue["Year1st"],
                                Renewal = routeValue["Renewal"],
                                Gross1st = routeValue["Gross1st"],
                                GrossRenewal = routeValue["GrossRenewal"],
                                PreparedById = routeValue["PreparedById"],
                                InvoiceStatus = routeValue["InvoiceStatus"],
                                BatchNo = routeValue["CedantId"],
                                BatchDate = routeValue["BatchDate"],
                                NoOfInvoices = routeValue["NoOfInvoices"],
                                BatchPersonInChargeId = routeValue["BatchPersonInChargeId"],
                                BatchStatus = routeValue["BatchStatus"],
                                Sort1Order = ViewBag.Sort1Order,
                                Sort2Order = ViewBag.Sort2Order,
                                Results1Page = ViewBag.Results1Page,
                                Results2Page = Page,
                                TabIndex = 2,
                            }), Shared.Html.GetPagedListRenderOptions())
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
    var GetTreatyCodeUrl = "@(Url.Action("GetTreatyCodeByCedant"))";
    var selectedTreatyCode = '@ViewBag.routeValue["TreatyCodeId"]';

    $(document).ready(function () {
        dateOffAutoComplete();

        $('#BatchDate, #InvoiceDate, #SttReceivedDate').datepicker({
            format: DateFormatDatePickerJs,
        });

        $('#RiskQuarter').datepicker({
            format: 'yyMM',
            minViewMode: 1,
            autoclose: true,
            language: "qtrs",
            forceParse: false
        })
        .on('show', function (e) {
            var datepickerDropDown = $('.datepicker');
            datepickerDropDown.addClass('quarterpicker');
        });

        var cedantId = 0;
        if ($('#CedantId')[0].selectedIndex != 0) {
            cedantId = $('#CedantId').val();
        }
        getTreatyCode(cedantId);
    });

    function focusOnDate(val) {
        $('#' + val).focus();
    }

    function getTreatyCode(cedantId) {
        if (!isNaN(cedantId) && cedantId != 0) {
            $.ajax({
                url: GetTreatyCodeUrl,
                type: "POST",
                data: { cedantId: cedantId },
                cache: false,
                async: false,
                success: function (data) {
                    var treatyCodeList = data.treatyCodeBos;
                    refreshDropDownItems('TreatyCodeId', treatyCodeList, selectedTreatyCode, 'Code', 'Description');
                }
            });
        }
        else {
            refreshDropDownItems('TreatyCodeId', [], null, 'Code', 'Description');
        }
    }

    </script>
}