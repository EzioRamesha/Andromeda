@using PagedList.Mvc

@model WebApp.Models.ClaimRegisterSearchViewModel

@{
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;

    ViewBag.Title = "Claim Register Search";
    ViewBag.ListPageUrl = Url.Action("Index", new
    {
        IsSnapshotVersion = routeValue["IsSnapshotVersion"],
        CutOffId = routeValue["CutOffId"],
        ClaimId = routeValue["ClaimId"],
        InsuredName = routeValue["InsuredName"],
        InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
        PolicyNumber = routeValue["PolicyNumber"],
        TreatyCode = routeValue["TreatyCode"],
        IsWithAdjustmentDetail = routeValue["IsWithAdjustmentDetail"],
        EntryNo = routeValue["EntryNo"],
        SoaQuarter = routeValue["SoaQuarter"],
        ClaimIdFilter = routeValue["ClaimIdFilter"],
        ClaimTransactionType = routeValue["ClaimTransactionType"],
        ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
        IsReferralCase = routeValue["IsReferralCase"],
        RiDataWarehouseId = routeValue["RiDataWarehouseId"],
        RecordType = routeValue["RecordType"],
        TreatyCodeFilter = routeValue["TreatyCodeFilter"],
        PolicyNumberFilter = routeValue["PolicyNumberFilter"],
        CedingCompany = routeValue["CedingCompany"],
        ProvisionAt = routeValue["ProvisionAt"],
    });
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

@Html.Partial("_BackToList")

<div class="card" id="app">
    <div class="card-header">
        <h4>@ViewBag.Title</h4>
    </div>
    <div class="card-body" id="app">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            @Html.Hidden("EntryNo");
            @Html.Hidden("SoaQuarter");
            @Html.Hidden("ClaimIdFilter");
            @Html.Hidden("ClaimTransactionType");
            @Html.Hidden("IsReferralCase");
            @Html.Hidden("RiDataWarehouseId");
            @Html.Hidden("RecordType");
            @Html.Hidden("TreatyCodeFilter");
            @Html.Hidden("PolicyNumberFilter");
            @Html.Hidden("CedingCompany");

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Search Parameters", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Snapshot Version", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("IsSnapshotVersion", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { id = "IsSnapshotVersion", @class = "form-control selectpicker", onchange = "isSnapshotOnChange(this.value)", @disabled = "disabled" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        <div id="CutOffIdDiv">
                            @Html.Label("Cut Off Quarter", htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownList("CutOffId", (List<SelectListItem>)ViewBag.DropDownCutOffs, htmlAttributes: new { id = "CutOffId", @class = "form-control selectpicker", @disabled = "disabled" })
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Claim Id", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("ClaimId", null, new { @class = "form-control", placeholder = "Type Here", value = routeValue["ClaimId"], @disabled = "disabled" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Insured Name", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("InsuredName", null, new { @class = "form-control", placeholder = "Type Here", value = routeValue["InsuredName"], @disabled = "disabled" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Insured Date of Birth", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBox("InsuredDateOfBirth", null, new { id = "InsuredDateOfBirth", @class = "form-control", placeholder = "DD MM YYYY", value = routeValue["InsuredDateOfBirth"], @disabled = "disabled" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                        </div>
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Number", htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBox("PolicyNumber", null, new { @class = "form-control", placeholder = "Type Here", value = routeValue["PolicyNumber"], @disabled = "disabled" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Treaty Code", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("TreatyCode", new { htmlAttributes = new { id = "TreatyCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("With Adjustment Detail", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("IsWithAdjustmentDetail", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", @disabled = "disabled" })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Standard Outputs", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="table-responsive mt-2">
                    <table class="table table-hover tableBodyScroll">
                        <thead>
                            <tr>
                                <th class="w-30">
                                    Label
                                </th>
                                <th class="w-30">
                                    Value
                                </th>
                                <th class="w-35">
                                    Error
                                </th>
                                <th class="w-5">

                                </th>
                            </tr>
                            <tr>
                                <th>
                                    @Html.TextBox("Label", null, new { @class = "form-control form-control-sm", @placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.CheckBox("DataValue") @Html.Label("Has Value Only", htmlAttributes: new { @class = "col-form-label" })
                                </th>
                                <th>
                                    @Html.CheckBox("Error") @Html.Label("Has Error Only", htmlAttributes: new { @class = "col-form-label" })
                                </th>
                                <th class="text-center">
                                    <div class="btn-row-action">
                                        <button type="button" title="Clear" class="btn-circle" onclick="SearchClear(); return false;"><span class="fas fa-backspace" /></button>
                                        <button type="button" title="Search" class="btn-circle" onclick="SearchFilter(); return false;"><span class="fas fa-search" /></button>
                                    </div>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var item in ViewBag.StandardClaimDataOutputList)
                                {
                                    string FieldName = null;
                                    if (item.Type == BusinessObject.StandardClaimDataOutputBo.TypeCustomField)
                                    {
                                        continue;
                                    }
                                    switch (item.DataType)
                                    {
                                        case BusinessObject.StandardOutputBo.DataTypeDate:
                                        case BusinessObject.StandardOutputBo.DataTypeAmount:
                                        case BusinessObject.StandardOutputBo.DataTypePercentage:
                                            FieldName = BusinessObject.StandardClaimDataOutputBo.GetPropertyNameByType(item.Type) + "Str";
                                            break;
                                        default:
                                            FieldName = BusinessObject.StandardClaimDataOutputBo.GetPropertyNameByType(item.Type);
                                            break;
                                    }
                                    <tr>
                                        <td>@item.Code</td>
                                        <td>
                                            <div v-if="ClaimRegister != null">
                                                {{ClaimRegister.@(FieldName)}}
                                            </div>
                                        </td>
                                        <td class="w-35">
                                            @{
                                                if (ViewBag.Errors != null)
                                                {
                                                    foreach (var error in ViewBag.Errors)
                                                    {
                                                        if (error.Key == FieldName)
                                                        {
                                                            <ul>
                                                                @{
                                                                    if (error.Value is string)
                                                                    {
                                                                        <li>@(error.Value)</li>
                                                                    }
                                                                    else
                                                                    {
                                                                        foreach (var errorVal in error.Value)
                                                                        {
                                                                            <li>@(errorVal)</li>
                                                                        }
                                                                    }
                                                                }
                                                            </ul>
                                                        }
                                                    }
                                                }
                                            }
                                        </td>
                                        <td class="w-5"></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="form-row form-row-btn">
                    <div class="form-group col-md-12 btn-row">
                        @Html.ActionLink("CANCEL", "Index", new
                       {
                           IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                           CutOffId = routeValue["CutOffId"],
                           ClaimId = routeValue["ClaimId"],
                           InsuredName = routeValue["InsuredName"],
                           InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                           PolicyNumber = routeValue["PolicyNumber"],
                           TreatyCode = routeValue["TreatyCode"],
                           IsWithAdjustmentDetail = routeValue["IsWithAdjustmentDetail"],
                           EntryNo = routeValue["EntryNo"],
                           SoaQuarter = routeValue["SoaQuarter"],
                           ClaimIdFilter = routeValue["ClaimIdFilter"],
                           ClaimTransactionType = routeValue["ClaimTransactionType"],
                           ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
                           IsReferralCase = routeValue["IsReferralCase"],
                           RiDataWarehouseId = routeValue["RiDataWarehouseId"],
                           RecordType = routeValue["RecordType"],
                           TreatyCodeFilter = routeValue["TreatyCodeFilter"],
                           PolicyNumberFilter = routeValue["PolicyNumberFilter"],
                           CedingCompany = routeValue["CedingCompany"],
                           ProvisionAt = routeValue["ProvisionAt"],
                       },
                        new { @class = "btn btn-cancel" })
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@Html.Partial("_BackToList")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        var ClaimRegisterBo = @Html.Raw(Json.Encode(ViewBag.ClaimRegisterBo));
        var TreatyCodes = @Html.Raw(Json.Encode(ViewBag.TreatyCodes));
        var treatyCodeCount = 0;

        $(document).ready(function () {
            dateOffAutoComplete();

            $('#SoaQuarter').datepicker({
                format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
                minViewMode: 1,
                autoclose: true,
                language: "qtrs",
                forceParse: false
            }).on('show', function (e) {
                var datepickerDropDown = $('.datepicker');
                datepickerDropDown.addClass('quarterpicker');
            });

            $('#InsuredDateOfBirth').datepicker({
                format: DateFormatDatePickerJs,
            });

            var isSnapshot = $('#IsSnapshotVersion').val();
            $('#CutOffIdDiv').hide();
            if (isSnapshot == "true") {
                $('#CutOffIdDiv').show();
            }

            $('#TreatyCodeTokenField')

                .on('tokenfield:createtoken', function (e) {
                    var existingTokens = $(this).tokenfield('getTokens');
                    if (treatyCodeCount != 0) {
                        $.each(existingTokens, function (index, token) {
                            if (token.value === e.attrs.value) {
                                e.preventDefault();
                            }
                        });
                    }
                })

                .on('tokenfield:createdtoken', function (e) {
                    var valid = TreatyCodes.includes(e.attrs.value)
                    if (!valid) {
                        $(e.relatedTarget).addClass('invalid');
                    }
                    treatyCodeCount += 1;
                    $('#TreatyCodeTokenField-tokenfield').removeAttr('placeholder');
                })

                .on('tokenfield:edittoken', function (e) {
                    var valid = TreatyCodes.includes(e.attrs.value)
                    if (valid) {
                        e.preventDefault();
                    }
                })

                .on('tokenfield:removedtoken', function (e) {
                    treatyCodeCount -= 1;
                    if (treatyCodeCount == 0) {
                        $("#TreatyCodeTokenField-tokenfield").attr("placeholder", "Type here");
                    }
                })

                .tokenfield({
                    autocomplete: {
                        source: TreatyCodes,
                        delay: 100
                    },
                    showAutocompleteOnFocus: true
                });

            $('#TreatyCodeTokenField').tokenfield('disable');
        });

        function validateQuarter(qtr) {
            if (qtr == null || qtr == "")
                return;
            if (!/[0-9]{4} Q{1}([1-4]){1}/.test(qtr)) {
                $("#SoaQuarter").val(null);
                alert("SOA Quarter format is incorrect");
            }
        }

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        var app = new Vue({
            el: '#app',
            data: {
                ClaimRegister: ClaimRegisterBo,
            }
        });

        function SearchFilter() {
            var searchVal = $("#Label").val().toUpperCase();

            $("table tbody tr").each(function (index) {
                $row = $(this);
                //if (index !== 0) { }

                var codeVal = $row.find("td:first").text();
                var dataVal = $row.find("td:nth-last-child(3)").find("div:first").text();
                var errorVal = $row.find("td:nth-last-child(2)").text();

                if ($('#Error').prop("checked") == true) {
                    if (errorVal.trim() === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else if ($('#DataValue').prop("checked") == true) {
                    if (dataVal.trim() === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else if (searchVal !== '') {
                    if (codeVal.indexOf(searchVal) === -1) {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
                else {
                    if (codeVal.indexOf(searchVal) === -1 && dataVal.trim() === '' && errorVal === '') {
                        $row.hide();
                    }
                    else {
                        $row.show();
                    }
                }
            });
        }

        function SearchClear() {
            $("#Label").val('');
            $('#DataValue').prop('checked', false)
            $('#Error').prop('checked', false)

            var rows = $('table tbody tr');
            rows.show();
        }
    </script>
}
