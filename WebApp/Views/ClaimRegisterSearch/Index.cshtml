@using PagedList.Mvc

@model PagedList.IPagedList<WebApp.Models.ClaimRegisterSearchViewModel>

@{
    ViewBag.Title = "Claim Register Search";
    var routeValue = (RouteValueDictionary)ViewBag.RouteValue;
    var disableDownload = ViewBag.DisableDownload != null ? ViewBag.DisableDownload : false;
    var showProvisionDate = ViewBag.ShowProvisionDate != null ? ViewBag.ShowProvisionDate : false;
}

@section breadcrumb
{
    @Html.Partial("_Breadcrumb")
}

<div class="card">
    <div class="card-header">
        <h4>@ViewBag.Title</h4>
    </div>
    <div class="card-body" id="app">
        @using (Html.BeginForm("Index", "ClaimRegisterSearch", FormMethod.Get))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Search Parameters", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Snapshot Version", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("IsSnapshotVersion", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { id = "IsSnapshotVersion", @class = "form-control selectpicker", onchange = "isSnapshotOnChange(this.value)" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        <div id="CutOffIdDiv">
                            @Html.Label("Cut Off Quarter", htmlAttributes: new { @class = "col-form-label" })
                            @Html.DropDownList("CutOffId", (List<SelectListItem>)ViewBag.DropDownCutOffs, htmlAttributes: new { id = "CutOffId", @class = "form-control selectpicker" })
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Claim Id", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("ClaimId", new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Insured Name", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("InsuredName", new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Insured Date of Birth", htmlAttributes: new { @class = "col-form-label" })
                        <div class="input-w-icon">
                            @Html.TextBox("InsuredDateOfBirth", null, new { id = "InsuredDateOfBirth", @class = "form-control", placeholder = "DD MM YYYY" })
                            <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnDate('InsuredDateOfBirth')" />
                        </div>
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("Policy Number", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("PolicyNumber", new { htmlAttributes = new { @class = "form-control", placeholder = "Type here" } })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Treaty Code", htmlAttributes: new { @class = "col-form-label" })
                        @Html.Editor("TreatyCode", new { htmlAttributes = new { id = "TreatyCodeTokenField", @class = "form-control", placeholder = "Type here" } })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        @Html.Label("With Adjustment Detail", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("IsWithAdjustmentDetail", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker" })
                    </div>
                </div>

                <div class="form-row my-4"></div>

                <div class="form-row">
                    <div class="form-group col-md-6 mid-line-1">
                        @Html.Label("Download data with header", htmlAttributes: new { @class = "col-form-label" })
                        @Html.DropDownList("WriteHeader", (List<SelectListItem>)ViewBag.DropDownYesNo, htmlAttributes: new { @class = "form-control selectpicker", id = "WriteHeader" })
                    </div>

                    <div class="form-group col-md-6 mid-line-2">
                        &nbsp;
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12 text-right">
                        <a href="@Url.Action("Index")" class="btn btn-cancel mr-1" title="Clear">CLEAR</a>
                        <button type="submit" class="btn btn-submit" id="searchBtn">SEARCH</button>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        @Html.Label("Search Result", htmlAttributes: new { @class = "col-form-label font-weight-bold" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12">
                        <div class="btn-group float-right">
                            <button type="button" class="btn btn-download dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" disabled="@disableDownload">
                                DOWNLOAD AS
                            </button>
                            <div class="dropdown-menu">
                                <button type="button" class="dropdown-item" onclick="downloadAllButton()">All</button>
                                <button type="button" class="dropdown-item" onclick="downloadFilteredButton()">Filtered</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortHasRedFlag;
                                        @Shared.Html.Sorter(ViewBag, "Red Flag", "HasRedFlag", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortEntryNo;
                                        @Shared.Html.Sorter(ViewBag, "Entry No", "EntryNo", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortSoaQuarter;
                                        @Shared.Html.Sorter(ViewBag, "SOA Quarter", "SoaQuarter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortClaimIdFilter;
                                        @Shared.Html.Sorter(ViewBag, "Claim ID", "ClaimIdFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortClaimTransactionType;
                                        @Shared.Html.Sorter(ViewBag, "Claim Transaction Type", "ClaimTransactionType", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortClaimRecoveryAmount;
                                        @Shared.Html.Sorter(ViewBag, "Claim Recovery Amount", "ClaimRecoveryAmount", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortIsReferralCase;
                                        @Shared.Html.Sorter(ViewBag, "Referral Case", "IsReferralCase", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortRiDataWarehouseId;
                                        @Shared.Html.Sorter(ViewBag, "RI Data", "RiDataWarehouseId", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortRecordType;
                                        @Shared.Html.Sorter(ViewBag, "Record Type", "RecordType", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortTreatyCodeFilter;
                                        @Shared.Html.Sorter(ViewBag, "Treaty Code", "TreatyCodeFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortPolicyNumberFilter;
                                        @Shared.Html.Sorter(ViewBag, "Policy Number", "PolicyNumberFilter", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                <th class="w-10">
                                    @{
                                        routeValue["SortOrder"] = ViewBag.SortCedingCompany;
                                        @Shared.Html.Sorter(ViewBag, "Ceding Company", "CedingCompany", @Url.Action("Index", routeValue))
                                    }
                                </th>
                                @if (showProvisionDate)
                                {
                                    <th class="w-10">
                                        @{
                                            routeValue["SortOrder"] = ViewBag.SortProvisionAt;
                                            @Shared.Html.Sorter(ViewBag, "Provision Date", "ProvisionAt", @Url.Action("Index", routeValue))
                                        }
                                    </th>
                                }
                                <th class="text-center w-5">
                                    Action
                                </th>
                            </tr>

                            <tr>
                                @Html.Hidden("SortOrder", (string)ViewBag.SortOrder)
                                <th>
                                    @Html.DropDownList("HasRedFlag", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.TextBox("EntryNo", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.TextBox("SoaQuarter", null, new { @class = "form-control", @onchange = "validateQuarter(this.value)", placeholder = "YYYY MM", autocomplete = "off" })
                                </th>
                                <th>
                                    @Html.TextBox("ClaimIdFilter", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.DropDownList("ClaimTransactionType", (List<SelectListItem>)ViewBag.DropDownClaimTransactionTypes, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.TextBox("ClaimRecoveryAmount", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.DropDownList("IsReferralCase", (List<SelectListItem>)ViewBag.DropDownYesNoWithSelect, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                <th>
                                    @Html.TextBox("RiDataWarehouseId", null, new { @class = "form-control", placeholder = "Type here", @type = "number", @min = "0" })
                                </th>
                                <th>
                                    @Html.TextBox("RecordType", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.TextBox("TreatyCodeFilter", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.TextBox("PolicyNumberFilter", null, new { @class = "form-control", placeholder = "Type here" })
                                </th>
                                <th>
                                    @Html.DropDownList("CedingCompany", (List<SelectListItem>)ViewBag.DropDownCedants, htmlAttributes: new { @class = "form-control selectpicker", @data_container = "body" })
                                </th>
                                @if (showProvisionDate)
                                {
                                    <th>
                                        @Html.TextBox("ProvisionAt", null, new { @class = "form-control", placeholder = "DD MM YYYY", @onclick = "openDatePicker(this.id)" })
                                        <span class="fa fa-calendar-alt field-icon" aria-hidden="true" onclick="focusOnElement('ProvisionAt')" />
                                    </th>
                                }
                                <th class="text-center align-middle">
                                    <div class="btn-row-action">
                                        <a href="@Url.Action("Index", new {
                                            IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                                            CutOffId = routeValue["CutOffId"],
                                            ClaimId = routeValue["ClaimId"],
                                            InsuredName = routeValue["InsuredName"],
                                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                                            PolicyNumber = routeValue["PolicyNumber"],
                                            TreatyCode = routeValue["TreatyCode"],
                                            IsWithAdjustmentDetail = routeValue["IsWithAdjustmentDetail"],
                                            })" class="btn btn-circle" title="Clear">
                                            <span class="fas fa-backspace" />
                                        </a>
                                        <button type="submit" title="Search" class="btn-circle"><span class="fas fa-search" /></button>
                                    </div>
                                </th>
                            </tr>
                        </thead>

                        @if (Model.Count > 0)
                        {
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td class="text-right">
                                        @if (item.HasRedFlag)
                                        {
                                            <i class="fas fa-flag"></i>
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.EntryNo)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.SoaQuarter)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ClaimId)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ClaimTransactionType)
                                    </td>
                                    <td class="text-right">
                                        @Shared.Util.DoubleToString(item.ClaimRecoveryAmount)
                                    </td>
                                    <td class="text-right">
                                        @if (item.IsReferralCase)
                                        {
                                            @Html.Raw("Yes");
                                        }
                                        else
                                        {
                                            @Html.Raw("No");
                                        }
                                    </td>
                                    <td class="text-right">
                                        @Html.DisplayFor(modelItem => item.RiDataWarehouseId)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.RecordType)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.TreatyCode)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.PolicyNumber)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CedingCompany)
                                    </td>
                                    @if (showProvisionDate)
                                    {
                                    <td>
                                        @if (item.ProvisionAt.HasValue)
                                        {
                                            @item.ProvisionAt.Value.ToString(Shared.Util.GetDateFormat())
                                        }
                                    </td>
                                    }
                                    <td class="text-center">
                                        <a href="@Url.Action("Details", new {
                                            id = item.Id,
                                            IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                                            CutOffId = routeValue["CutOffId"],
                                            ClaimId = routeValue["ClaimId"],
                                            InsuredName = routeValue["InsuredName"],
                                            InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                                            PolicyNumber = routeValue["PolicyNumber"],
                                            TreatyCode = routeValue["TreatyCode"],
                                            IsWithAdjustmentDetail = routeValue["IsWithAdjustmentDetail"],
                                            EntryNo = routeValue["EntryNo"],
                                            SoaQuarter = routeValue["SoaQuarter"],
                                            ClaimIdFilter = routeValue["ClaimIdFilter"],
                                            ClaimTransactionType = routeValue["ClaimTransactionType"],
                                            ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
                                            IsReferralCase = routeValue["IsReferralCase"],
                                            RiDataWarehouseId = routeValue["RiDataWarehouseId"],
                                            RecordType = routeValue["RecordType"],
                                            TreatyCodeFilter = routeValue["TreatyCodeFilter"],
                                            PolicyNumberFilter = routeValue["PolicyNumberFilter"],
                                            CedingCompany = routeValue["CedingCompany"],
                                            ProvisionAt = routeValue["ProvisionAt"],
                                        })" class="bg-transparent linkbtn"><span class="fas fa-eye"></span></a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="12" class="no-data">No available data found.</td>
                            </tr>
                        }

                    </table>
                </div>
            </div>
        }

        <div class="pagination-footer btn-row">
            <div class="row">
                <div class="col-md-4">
                    @Html.Partial("_PageInfo")
                </div>
                <div class="col-md-8">
                    @Html.PagedListPager(Model, Page => Url.Action("Index", new
                   {
                       IsSnapshotVersion = routeValue["IsSnapshotVersion"],
                       CutOffId = routeValue["CutOffId"],
                       ClaimId = routeValue["ClaimId"],
                       InsuredName = routeValue["InsuredName"],
                       InsuredDateOfBirth = routeValue["InsuredDateOfBirth"],
                       PolicyNumber = routeValue["PolicyNumber"],
                       TreatyCode = routeValue["TreatyCode"],
                       IsWithAdjustmentDetail = routeValue["IsWithAdjustmentDetail"],
                       HasRedFlag = routeValue["HasRedFlag"],
                       EntryNo = routeValue["EntryNo"],
                       SoaQuarter = routeValue["SoaQuarter"],
                       ClaimIdFilter = routeValue["ClaimIdFilter"],
                       ClaimTransactionType = routeValue["ClaimTransactionType"],
                       ClaimRecoveryAmount = routeValue["ClaimRecoveryAmount"],
                       IsReferralCase = routeValue["IsReferralCase"],
                       RiDataWarehouseId = routeValue["RiDataWarehouseId"],
                       RecordType = routeValue["RecordType"],
                       TreatyCodeFilter = routeValue["TreatyCodeFilter"],
                       PolicyNumberFilter = routeValue["PolicyNumberFilter"],
                       CedingCompany = routeValue["CedingCompany"],
                       ProvisionAt = routeValue["ProvisionAt"],
                       SortOrder = ViewBag.SortOrder,
                       Page,
                   }), Shared.Html.GetPagedListRenderOptions())
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/date-quarter.js")

    <script>
        var routeValue = @Html.Raw(Json.Encode(@routeValue));
        var DownloadUrl = "@(Url.Action("Download"))";
        var TreatyCodes = @Html.Raw(Json.Encode(ViewBag.TreatyCodes));
        var treatyCodeCount = 0;

        $(document).ready(function () {
            dateOffAutoComplete();

            $('#SoaQuarter').datepicker({
                format: '@BusinessObject.Mfrs17ReportingBo.DateQuarterFormatJs',
                minViewMode: 1,
                autoclose: true,
                language: "qtrs",
                forceParse: false
            }).on('show', function (e) {
                var datepickerDropDown = $('.datepicker');
                datepickerDropDown.addClass('quarterpicker');
            });

            $('#InsuredDateOfBirth').datepicker({
                format: DateFormatDatePickerJs,
            });

            var isSnapshot = $('#IsSnapshotVersion').val();
            isSnapshotOnChange(isSnapshot);

            $('#TreatyCodeTokenField')

                .on('tokenfield:createtoken', function (e) {
                    var existingTokens = $(this).tokenfield('getTokens');
                    if (treatyCodeCount != 0) {
                        $.each(existingTokens, function (index, token) {
                            if (token.value === e.attrs.value) {
                                e.preventDefault();
                            }
                        });
                    }
                })

                .on('tokenfield:createdtoken', function (e) {
                    var valid = TreatyCodes.includes(e.attrs.value)
                    if (!valid) {
                        $(e.relatedTarget).addClass('invalid');
                    }
                    treatyCodeCount += 1;
                    $('#TreatyCodeTokenField-tokenfield').removeAttr('placeholder');
                })

                .on('tokenfield:edittoken', function (e) {
                    var valid = TreatyCodes.includes(e.attrs.value)
                    if (valid) {
                        e.preventDefault();
                    }
                })

                .on('tokenfield:removedtoken', function (e) {
                    treatyCodeCount -= 1;
                    if (treatyCodeCount == 0) {
                        $("#TreatyCodeTokenField-tokenfield").attr("placeholder", "Type here");
                    }
                })

                .tokenfield({
                    autocomplete: {
                        source: TreatyCodes,
                        delay: 100
                    },
                    showAutocompleteOnFocus: true
                });
        });

        function isSnapshotOnChange(bl) {
            $('#CutOffIdDiv').hide();
            if (bl == "true") {
                $('#CutOffIdDiv').show();
                if (!$('#CutOffId').val()) {
                    if ($("#CutOffId option:eq(1)") != null) {
                        $("#CutOffId option:eq(1)").attr('selected', 'selected');
                    }
                }
                $('#CutOffId').selectpicker('refresh');
            }
        }

        $('#searchBtn, #dlAllBtn, #dlFilteredBtn').click(function (e) {
            var isSnapshot = $('#IsSnapshotVersion').val();
            var cutOffId = $('#CutOffId').val();
            if (isSnapshot == "true") {
                if (cutOffId == null || cutOffId == "") {
                    alert("Cut Off Quarter is Required for Snapshot Version");
                    e.preventDefault();
                }
            }
        });

        function validateQuarter(qtr) {
            if (qtr == null || qtr == "")
                return;
            if (!/[0-9]{4} Q{1}([1-4]){1}/.test(qtr)) {
                $("#SoaQuarter").val(null);
                alert("SOA Quarter format is incorrect");
            }
        }

        function focusOnDate(val) {
            $('#' + val).focus();
        }

        function downloadAllButton() {
            var url = DownloadUrl;
            var writeHeaderVal = $('#WriteHeader').val();
            url = url + "?" + "WriteHeader" + "=" + writeHeaderVal;

            var isLastHeaderParam = false;
            routeValue.forEach(function (entry, index) {
                if (!isLastHeaderParam) {
                    if (entry.Value) {
                        url = url + "&" + entry.Key + "=" + entry.Value;
                    }
                    isLastHeaderParam = entry.Key == "IsWithAdjustmentDetail";
                }
            });
            return window.open(url, '_blank');
        }

        function downloadFilteredButton() {
            var url = DownloadUrl;
            var writeHeaderVal = $('#WriteHeader').val();
            url = url + "?" + "WriteHeader" + "=" + writeHeaderVal;

            var count = routeValue.length;
            routeValue.forEach(function (entry, index) {
                if (index < count - 1) {
                    if (entry.Value) {
                        url = url + "&" + entry.Key + "=" + entry.Value;
                    }
                }
            });
            return window.open(url, '_blank');
        }
    </script>
}
